#!/usr/bin/env node
// Ë∑®Âπ≥Âè∞ÊûÑÂª∫ËÑöÊú¨
import { spawn } from 'child_process'
import fs from 'fs'
import path from 'path'
import { gzipSync, constants as zlibConstants } from 'zlib'

// ÂÆö‰πâÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ
const configs = {
  dev: {
    ENABLE_LOGGING: 'true',
    ENABLE_INDEXEDDB: 'true',
    NODE_ENV: 'development'
  },

  build: {
    ENABLE_LOGGING: 'true',
    ENABLE_INDEXEDDB: 'true',
    NODE_ENV: 'production'
  },

  'build:prod': {
    ENABLE_LOGGING: 'false',
    ENABLE_INDEXEDDB: 'true',
    NODE_ENV: 'production'
  },
  'build:no-indexeddb': {
    ENABLE_LOGGING: 'true',
    ENABLE_INDEXEDDB: 'false',
    NODE_ENV: 'production'
  },
  'build:minimal': {
    ENABLE_LOGGING: 'false',
    ENABLE_INDEXEDDB: 'false',
    NODE_ENV: 'production'
  },
  'build:userscript': {
    ENABLE_LOGGING: 'true',
    ENABLE_INDEXEDDB: 'false',
    NODE_ENV: 'production',
    BUILD_MINIFIED: 'false'
  },
  'build:userscript:min': {
    ENABLE_LOGGING: 'true',
    ENABLE_INDEXEDDB: 'false',
    NODE_ENV: 'production',
    BUILD_MINIFIED: 'true'
  },
  // Êñ∞Â¢ûÔºö‰ªÖÁºñËØë„ÄÅ‰∏çÊ∑∑Ê∑ÜÔºàË∞ÉËØïÁî®Ôºâ
  'build:debug': {
    ENABLE_LOGGING: 'true',
    ENABLE_INDEXEDDB: 'true',
    NODE_ENV: 'production',
    BUILD_MINIFIED: 'false'
  }
}

// Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞
const args = process.argv.slice(2)
// ÂÖºÂÆπ‰∏§ÁßçÁî®Ê≥ïÔºö
// 1) node scripts/build.js build:userscript remote  ÔºàÊóßÔºâ
// 2) node scripts/build.js remote                    ÔºàÊñ∞ÔºöÈ¶ñ‰∏™ÂèÇÊï∞‰Ωú‰∏∫Âèò‰ΩìÔºåÈªòËÆ§ÊûÑÂª∫‰∏∫ userscriptÔºâ
let buildType = 'dev'
let variant = 'default'
if (args.length === 0) {
  buildType = 'dev'
} else if (args.length === 1) {
  if (Object.prototype.hasOwnProperty.call(configs, args[0])) {
    // ‰º†ÂÖ•ÁöÑÊòØÂ∑≤Áü•ÁöÑÊûÑÂª∫Á±ªÂûã
    buildType = args[0]
  } else {
    // ‰º†ÂÖ•ÁöÑÊòØÂèò‰ΩìÔºàÈ¶ñ‰∏™ÂèÇÊï∞ÔºâÔºåÈªòËÆ§ÊûÑÂª∫‰∏∫ userscript
    buildType = 'build:userscript'
    variant = args[0]
  }
} else {
  // ‰∏§‰∏™Âèä‰ª•‰∏äÂèÇÊï∞Ôºå‰øùÊåÅÂéüÊúâËØ≠‰πâÔºöÁ¨¨‰∏Ä‰∏™‰∏∫ÊûÑÂª∫Á±ªÂûãÔºåÁ¨¨‰∫å‰∏™‰∏∫Âèò‰Ωì
  buildType = args[0]
  variant = args[1] || 'default'
}

const config = configs[buildType]
if (!config) {
  console.error(`Êú™Áü•ÁöÑÊûÑÂª∫Á±ªÂûã: ${buildType}`)
  console.error(`ÂèØÁî®ÁöÑÊûÑÂª∫Á±ªÂûã: ${Object.keys(configs).join(', ')}`)
  process.exit(1)
}

// ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
Object.assign(process.env, config)
// ÊääÂèØÈÄâÁöÑÊûÑÂª∫Âèò‰ΩìÊ≥®ÂÖ•ÁéØÂ¢ÉÂèòÈáèÔºå‰æõ vite ÈÖçÁΩÆËØªÂèñ
process.env.USERSCRIPT_VARIANT = variant

// Note: build-time generation of defaultEmojiGroups.ts has been removed.

// ÊâìÂç∞ÈÖçÁΩÆ‰ø°ÊÅØ
console.log(`üöÄ ÂºÄÂßãÊûÑÂª∫ (${buildType})`)
console.log(`üìã ÈÖçÁΩÆ:`)
Object.entries(config).forEach(([key, value]) => {
  console.log(`   ${key}: ${value}`)
})
console.log('')
if (variant && variant !== 'default') {
  console.log(`üîÄ ÊûÑÂª∫Âèò‰Ωì: ${variant}`)
}

// ÊâßË°å vite build
const isUserscript = buildType.startsWith('build:userscript')
const viteCommand =
  buildType === 'dev'
    ? 'vite'
    : `vite build${isUserscript ? ' --config vite.config.userscript.ts' : ''}`
// Variant flag functionality removed - development variant no longer supported
const publicDir = path.resolve(process.cwd(), 'public')
const distDir = path.resolve(process.cwd(), 'dist')

const child = spawn('npx', viteCommand.split(' '), {
  stdio: 'inherit',
  env: process.env,
  shell: true
})

child.on('exit', code => {
  if (code === 0 && buildType !== 'dev') {
    // For userscript builds, run post-processing instead of clean-empty-chunks
    if (isUserscript) {
      console.log('üîß Post-processing userscript...')
      const postProcessChild = spawn('node', ['./scripts/post-process-userscript.js', buildType], {
        stdio: 'inherit',
        shell: true
      })

      postProcessChild.on('exit', postCode => {
        if (postCode === 0) {
          console.log('‚úÖ Userscript build completed!')
        } else {
          console.error('‚ùå Userscript post-processing failed')
        }
        process.exit(postCode)
      })
    }
  } else {
    process.exit(code)
  }
})
