[
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\.eslintrc.userscript.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\components.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\referense\\simple.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\scripts\\build.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\scripts\\clean-empty-chunks.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\scripts\\clean-empty-chunks.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\scripts\\pack-crx.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\scripts\\post-process-userscript.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\scripts\\tests\\storage.spec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\scripts\\vite-plugin-generate-default-emoji-groups.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [142, 145], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [142, 145], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [161, 164], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [161, 164], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { readFileSync, writeFileSync } from 'fs'\nimport { join } from 'path'\n\nimport { Plugin } from 'vite'\n\ninterface ConfigData {\n  groups: any[]\n  settings?: any\n}\n\nexport function generateDefaultEmojiGroupsPlugin(): Plugin {\n  return {\n    name: 'generate-default-emoji-groups',\n    buildStart() {\n      // 读取 default.json 文件\n      const configPath = join(process.cwd(), 'src/config/default.json')\n      const outputPath = join(process.cwd(), 'src/types/defaultEmojiGroups.ts')\n\n      try {\n        console.log('📦 正在从 default.json 生成 defaultEmojiGroups.ts...')\n\n        const configContent = readFileSync(configPath, 'utf-8')\n        const configData: ConfigData = JSON.parse(configContent)\n\n        if (!configData.groups || !Array.isArray(configData.groups)) {\n          throw new Error('default.json 中缺少有效的 groups 数组')\n        }\n\n        // 生成 TypeScript 文件内容\n        const tsContent = `import { EmojiGroup } from \"./emoji\";\n\n// 这个文件是在构建时从 src/config/default.json 自动生成的\n// 请不要手动修改此文件，而是修改 src/config/default.json\n\nexport const defaultEmojiGroups: EmojiGroup[] = ${JSON.stringify(configData.groups, null, 2)};\n`\n\n        writeFileSync(outputPath, tsContent, 'utf-8')\n        console.log('✅ defaultEmojiGroups.ts 已成功生成')\n\n        // 添加文件监听，当 default.json 改变时重新生成\n        this.addWatchFile(configPath)\n      } catch (error) {\n        console.error('❌ 生成 defaultEmojiGroups.ts 失败:', error)\n        throw error\n      }\n    },\n\n    handleHotUpdate({ file, server }) {\n      // 当 default.json 文件改变时，重新生成 defaultEmojiGroups.ts\n      if (file.includes('src/config/default.json')) {\n        console.log('🔄 检测到 default.json 变更，重新生成 defaultEmojiGroups.ts...')\n\n        const configPath = join(process.cwd(), 'src/config/default.json')\n        const outputPath = join(process.cwd(), 'src/types/defaultEmojiGroups.ts')\n\n        try {\n          const configContent = readFileSync(configPath, 'utf-8')\n          const configData: ConfigData = JSON.parse(configContent)\n\n          if (!configData.groups || !Array.isArray(configData.groups)) {\n            throw new Error('default.json 中缺少有效的 groups 数组')\n          }\n\n          const tsContent = `import { EmojiGroup } from \"./emoji\";\n\n// 这个文件是在构建时从 src/config/default.json 自动生成的\n// 请不要手动修改此文件，而是修改 src/config/default.json\n\nexport const defaultEmojiGroups: EmojiGroup[] = ${JSON.stringify(configData.groups, null, 2)};\n`\n\n          writeFileSync(outputPath, tsContent, 'utf-8')\n          console.log('✅ defaultEmojiGroups.ts 已重新生成')\n\n          // 通知客户端重新加载\n          server.ws.send({\n            type: 'full-reload'\n          })\n        } catch (error) {\n          console.error('❌ 重新生成 defaultEmojiGroups.ts 失败:', error)\n        }\n\n        return []\n      }\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\scripts\\watch.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\background\\background.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 10,
        "column": 1,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 10,
        "endColumn": 12,
        "suggestions": [
          {
            "fix": { "range": [194, 250], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import './utils'\nimport { setupOnInstalledListener } from './init'\nimport {\n  setupMessageListener,\n  setupStorageChangeListener,\n  setupContextMenu,\n  setupPeriodicCleanup\n} from './handlers'\n\nconsole.log('Emoji Extension Background script loaded.')\n\n// Wire up listeners and periodic jobs\nsetupOnInstalledListener()\nsetupMessageListener()\nsetupStorageChangeListener()\nsetupContextMenu()\nsetupPeriodicCleanup()\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\background\\handlers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [298, 301], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [298, 301], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [312, 315], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [312, 315], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 88,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 91,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [331, 334], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [331, 334], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 9,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 9,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [347, 399], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 25,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 25,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [782, 832], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 40,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 40,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [1255, 1301], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1459, 1462], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1459, 1462], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'response' is defined but never used.",
        "line": 48,
        "column": 76,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 89,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "response" },
            "fix": { "range": [1479, 1492], "text": "" },
            "desc": "Remove unused variable 'response'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 86,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 89,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1489, 1492], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1489, 1492], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1649, 1652], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1649, 1652], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 68,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 68,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1991, 1994], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1991, 1994], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 89,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 89,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2496, 2550], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 92,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 92,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2633, 2677], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2828, 2831], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2828, 2831], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'response' is defined but never used.",
        "line": 97,
        "column": 71,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 84,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "response" },
            "fix": { "range": [2848, 2861], "text": "" },
            "desc": "Remove unused variable 'response'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 81,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 84,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2858, 2861], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2858, 2861], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 101,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 101,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3067, 3070], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3067, 3070], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 103,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 103,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [3130, 3186], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 109,
        "column": 22,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 109,
        "endColumn": 73
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 109,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 109,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3401, 3404], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3401, 3404], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3521, 3524], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3521, 3524], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 139,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 139,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4403, 4406], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4403, 4406], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 139,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 139,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4411, 4414], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4411, 4414], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 154,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 154,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 154,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 154,
        "endColumn": 17
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 161,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 161,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5209, 5266], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'response' is defined but never used.",
        "line": 169,
        "column": 57,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "response" },
            "fix": { "range": [5448, 5461], "text": "" },
            "desc": "Remove unused variable 'response'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 169,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 169,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5458, 5461], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5458, 5461], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 199,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 199,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6366, 6369], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6366, 6369], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 200,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 200,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6377, 6426], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 205,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 205,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6541, 6544], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6541, 6544], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'response' is defined but never used.",
        "line": 205,
        "column": 69,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 205,
        "endColumn": 82,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "response" },
            "fix": { "range": [6561, 6574], "text": "" },
            "desc": "Remove unused variable 'response'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 205,
        "column": 79,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 205,
        "endColumn": 82,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6571, 6574], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6571, 6574], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 215,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 215,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6866, 6869], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6866, 6869], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 216,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 216,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6877, 6927], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 221,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 221,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7045, 7048], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7045, 7048], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'response' is defined but never used.",
        "line": 221,
        "column": 72,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 221,
        "endColumn": 85,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "response" },
            "fix": { "range": [7065, 7078], "text": "" },
            "desc": "Remove unused variable 'response'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 221,
        "column": 82,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 221,
        "endColumn": 85,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7075, 7078], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7075, 7078], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 253,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 253,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7968, 7971], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7968, 7971], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 254,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 254,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [7979, 8027], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 262,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 262,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8301, 8304], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8301, 8304], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 262,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 262,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8317, 8320], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8317, 8320], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 263,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 263,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [8333, 8384], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 304,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 304,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9826, 9829], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9826, 9829], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_tab' is defined but never used.",
        "line": 304,
        "column": 64,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 304,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_tab" },
            "fix": { "range": [9829, 9840], "text": "" },
            "desc": "Remove unused variable '_tab'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 304,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 304,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9837, 9840], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9837, 9840], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 355,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 355,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [11407, 11453], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 358,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 358,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [11496, 11542], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 40,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { newStorageHelpers } from '../utils/newStorage'\n\nimport { getChromeAPI } from './utils'\n\nexport function setupMessageListener() {\n  const chromeAPI = getChromeAPI()\n  if (chromeAPI && chromeAPI.runtime && chromeAPI.runtime.onMessage) {\n    chromeAPI.runtime.onMessage.addListener((message: any, _sender: any, sendResponse: any) => {\n      console.log('Background received message:', message)\n\n      switch (message.type) {\n        case 'GET_EMOJI_DATA':\n          handleGetEmojiData(sendResponse)\n          return true\n\n        case 'SAVE_EMOJI_DATA':\n          handleSaveEmojiData(message.data, sendResponse)\n          return true\n\n        case 'SYNC_SETTINGS':\n          handleSyncSettings(message.settings, sendResponse)\n          return true\n\n        default:\n          console.log('Unknown message type:', message.type)\n          sendResponse({ success: false, error: 'Unknown message type' })\n      }\n\n      if (message.action) {\n        switch (message.action) {\n          case 'addToFavorites':\n            handleAddToFavorites(message.emoji, sendResponse)\n            return true\n\n          case 'addEmojiFromWeb':\n            handleAddEmojiFromWeb(message.emojiData, sendResponse)\n            return true\n\n          default:\n            console.log('Unknown action:', message.action)\n            sendResponse({ success: false, error: 'Unknown action' })\n        }\n      }\n    })\n  }\n}\n\nexport async function handleAddEmojiFromWeb(emojiData: any, sendResponse: (response: any) => void) {\n  try {\n    // 获取所有表情组\n    const groups = await newStorageHelpers.getAllEmojiGroups()\n\n    // 找到未分组表情组\n    let ungroupedGroup = groups.find((g: any) => g.id === 'ungrouped')\n    if (!ungroupedGroup) {\n      // 如果未分组表情组不存在，创建一个\n      ungroupedGroup = {\n        id: 'ungrouped',\n        name: '未分组',\n        icon: '📦',\n        order: 999,\n        emojis: []\n      }\n      groups.push(ungroupedGroup)\n    }\n\n    // 检查是否已存在相同URL的表情\n    const existingEmoji = ungroupedGroup.emojis.find((e: any) => e.url === emojiData.url)\n    if (existingEmoji) {\n      sendResponse({ success: false, error: '此表情已存在于未分组中' })\n      return\n    }\n\n    // 创建新表情\n    const newEmoji = {\n      id: `emoji-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,\n      packet: Date.now(),\n      name: emojiData.name,\n      url: emojiData.url,\n      groupId: 'ungrouped',\n      addedAt: Date.now()\n    }\n\n    ungroupedGroup.emojis.push(newEmoji)\n\n    // 保存到存储\n    await newStorageHelpers.setAllEmojiGroups(groups)\n\n    console.log('[Background] 成功添加表情到未分组:', newEmoji.name)\n    sendResponse({ success: true, message: '表情已添加到未分组' })\n  } catch (error) {\n    console.error('[Background] 添加表情失败:', error)\n    sendResponse({ success: false, error: error instanceof Error ? error.message : '添加失败' })\n  }\n}\n\nexport async function handleAddToFavorites(emoji: any, sendResponse: (response: any) => void) {\n  try {\n    // Use the unified newStorageHelpers to read/update groups for consistency\n    const groups = await newStorageHelpers.getAllEmojiGroups()\n    const favoritesGroup = groups.find((g: any) => g.id === 'favorites')\n    if (!favoritesGroup) {\n      console.warn('Favorites group not found - creating one')\n      const newFavorites = { id: 'favorites', name: 'Favorites', icon: '⭐', order: 0, emojis: [] }\n      groups.unshift(newFavorites)\n    }\n\n    const finalGroups = groups\n    const favGroup = finalGroups.find((g: any) => g.id === 'favorites')!\n\n    const now = Date.now()\n    const existingEmojiIndex = favGroup.emojis.findIndex((e: any) => e.url === emoji.url)\n\n    if (existingEmojiIndex !== -1) {\n      const existingEmoji = favGroup.emojis[existingEmojiIndex]\n      const lastUsed = existingEmoji.lastUsed || 0\n      const timeDiff = now - lastUsed\n      const twelveHours = 12 * 60 * 60 * 1000\n\n      if (timeDiff < twelveHours) {\n        existingEmoji.usageCount = (existingEmoji.usageCount || 0) + 1\n      } else {\n        const currentCount = existingEmoji.usageCount || 1\n        existingEmoji.usageCount = Math.floor(currentCount * 0.8) + 1\n        existingEmoji.lastUsed = now\n      }\n    } else {\n      const favoriteEmoji = {\n        ...emoji,\n        id: `fav-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,\n        groupId: 'favorites',\n        usageCount: 1,\n        lastUsed: now,\n        addedAt: now\n      }\n      favGroup.emojis.push(favoriteEmoji)\n    }\n\n    favGroup.emojis.sort((a: any, b: any) => (b.lastUsed || 0) - (a.lastUsed || 0))\n\n    // Persist via newStorageHelpers which updates group index and individual groups\n    await newStorageHelpers.setAllEmojiGroups(finalGroups)\n\n    // Notify content scripts by updating chrome.storage (legacy compatibility)\n    const chromeAPI = getChromeAPI()\n    if (chromeAPI && chromeAPI.storage && chromeAPI.storage.local) {\n      try {\n        await new Promise<void>((resolve, reject) => {\n          chromeAPI.storage.local.set({ emojiGroups: finalGroups }, () => {\n            if (chromeAPI.runtime.lastError) reject(chromeAPI.runtime.lastError)\n            else resolve()\n          })\n        })\n      } catch (e) {\n        // ignore\n      }\n    }\n\n    sendResponse({ success: true, message: 'Added to favorites' })\n  } catch (error) {\n    console.error('Failed to add emoji to favorites:', error)\n    sendResponse({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    })\n  }\n}\n\nexport async function handleGetEmojiData(sendResponse: (response: any) => void) {\n  const chromeAPI = getChromeAPI()\n  if (!chromeAPI || !chromeAPI.storage) {\n    sendResponse({ success: false, error: 'Chrome storage API not available' })\n    return\n  }\n\n  try {\n    const data = await chromeAPI.storage.local.get(['emojiGroups', 'appSettings', 'favorites'])\n\n    // 解析新的存储格式，appSettings 现在是 { data: {...}, timestamp: ... } 的格式\n    let settings = {}\n    if (data.appSettings) {\n      if (data.appSettings.data && typeof data.appSettings.data === 'object') {\n        // 新格式：{ data: {...}, timestamp: ... }\n        settings = data.appSettings.data\n      } else if (typeof data.appSettings === 'object') {\n        // 兼容旧格式：直接是设置对象\n        settings = data.appSettings\n      }\n    }\n\n    sendResponse({\n      success: true,\n      data: {\n        groups: data.emojiGroups || [],\n        settings: settings,\n        favorites: data.favorites || []\n      }\n    })\n  } catch (error: any) {\n    console.error('Failed to get emoji data:', error)\n    sendResponse({ success: false, error: error.message })\n  }\n}\n\nexport async function handleSaveEmojiData(data: any, sendResponse: (response: any) => void) {\n  const chromeAPI = getChromeAPI()\n  if (!chromeAPI || !chromeAPI.storage) {\n    sendResponse({ success: false, error: 'Chrome storage API not available' })\n    return\n  }\n\n  try {\n    await chromeAPI.storage.local.set(data)\n    sendResponse({ success: true })\n  } catch (error: any) {\n    console.error('Failed to save emoji data:', error)\n    sendResponse({ success: false, error: error.message })\n  }\n}\n\nexport async function handleSyncSettings(settings: any, sendResponse: (response: any) => void) {\n  const chromeAPI = getChromeAPI()\n  if (!chromeAPI || !chromeAPI.storage || !chromeAPI.tabs) {\n    sendResponse({ success: false, error: 'Chrome API not available' })\n    return\n  }\n\n  try {\n    // 保存为新的存储格式：{ data: {...}, timestamp: ... }\n    const timestamp = Date.now()\n    const appSettingsData = {\n      data: { ...settings, lastModified: timestamp },\n      timestamp: timestamp\n    }\n\n    await chromeAPI.storage.local.set({ appSettings: appSettingsData })\n\n    const tabs = await chromeAPI.tabs.query({})\n    for (const tab of tabs) {\n      if (tab.id) {\n        chromeAPI.tabs\n          .sendMessage(tab.id, {\n            type: 'SETTINGS_UPDATED',\n            settings: settings\n          })\n          .catch(() => {\n            // Ignore errors for tabs that don't have content script\n          })\n      }\n    }\n\n    sendResponse({ success: true })\n  } catch (error: any) {\n    console.error('Failed to sync settings:', error)\n    sendResponse({ success: false, error: error.message })\n  }\n}\n\nexport function setupStorageChangeListener() {\n  const chromeAPI = getChromeAPI()\n  if (chromeAPI && chromeAPI.storage && chromeAPI.storage.onChanged) {\n    chromeAPI.storage.onChanged.addListener((changes: any, namespace: any) => {\n      console.log('Storage changed:', changes, namespace)\n      // Placeholder for cloud sync or other reactions\n    })\n  }\n}\n\nexport function setupContextMenu() {\n  const chromeAPI = getChromeAPI()\n  if (chromeAPI && chromeAPI.runtime && chromeAPI.runtime.onInstalled && chromeAPI.contextMenus) {\n    chromeAPI.runtime.onInstalled.addListener(() => {\n      chrome.storage.local.get('appSettings', result => {\n        // 解析新的存储格式来获取 forceMobileMode\n        let forceMobileMode = false\n        if (result.appSettings) {\n          if (result.appSettings.data && typeof result.appSettings.data === 'object') {\n            // 新格式：{ data: {...}, timestamp: ... }\n            forceMobileMode = result.appSettings.data.forceMobileMode || false\n          } else if (typeof result.appSettings === 'object') {\n            // 兼容旧格式：直接是设置对象\n            forceMobileMode = result.appSettings.forceMobileMode || false\n          }\n        }\n\n        if (chromeAPI.contextMenus && chromeAPI.contextMenus.create) {\n          chromeAPI.contextMenus.create({\n            id: 'open-emoji-options',\n            title: '表情管理',\n            contexts: ['page']\n          })\n          chromeAPI.contextMenus.create({\n            id: 'force-mobile-mode',\n            title: '强制使用移动模式',\n            type: 'checkbox',\n            checked: forceMobileMode,\n            contexts: ['page']\n          })\n        }\n      })\n    })\n\n    if (chromeAPI.contextMenus.onClicked) {\n      chromeAPI.contextMenus.onClicked.addListener((info: any, _tab: any) => {\n        if (\n          info.menuItemId === 'open-emoji-options' &&\n          chromeAPI.runtime &&\n          chromeAPI.runtime.openOptionsPage\n        ) {\n          chromeAPI.runtime.openOptionsPage()\n        } else if (info.menuItemId === 'force-mobile-mode') {\n          const newCheckedState = info.checked\n\n          // 获取当前设置并更新 forceMobileMode\n          chrome.storage.local.get('appSettings', result => {\n            let currentSettings = {}\n            if (result.appSettings) {\n              if (result.appSettings.data && typeof result.appSettings.data === 'object') {\n                currentSettings = result.appSettings.data\n              } else if (typeof result.appSettings === 'object') {\n                currentSettings = result.appSettings\n              }\n            }\n\n            // 更新设置并保存为新格式\n            const timestamp = Date.now()\n            const updatedSettings = {\n              ...currentSettings,\n              forceMobileMode: newCheckedState,\n              lastModified: timestamp\n            }\n\n            const appSettingsData = {\n              data: updatedSettings,\n              timestamp: timestamp\n            }\n\n            chrome.storage.local.set({ appSettings: appSettingsData })\n          })\n        }\n      })\n    }\n  }\n}\n\nexport function setupPeriodicCleanup() {\n  setInterval(\n    async () => {\n      const chromeAPI = getChromeAPI()\n      if (!chromeAPI || !chromeAPI.storage) return\n\n      try {\n        const data = await chromeAPI.storage.local.get(['emojiGroups'])\n        if (data.emojiGroups) {\n          console.log('Storage cleanup check completed')\n        }\n      } catch (error) {\n        console.error('Storage cleanup error:', error)\n      }\n    },\n    24 * 60 * 60 * 1000\n  )\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\background\\init.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 8,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 8,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [235, 284], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 17,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 17,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [521, 568], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 29,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 29,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [846, 893], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 32,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 32,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [924, 982], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1205, 1208], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1205, 1208], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 40,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 40,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1221, 1286], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { defaultEmojiGroups } from '../types/defaultEmojiGroups'\n\nimport { getChromeAPI } from './utils'\n\nexport async function initializeDefaultData() {\n  const chromeAPI = getChromeAPI()\n  if (!chromeAPI || !chromeAPI.storage) {\n    console.error('Chrome storage API not available')\n    return\n  }\n\n  try {\n    const existingData = await chromeAPI.storage.local.get(['emojiGroups', 'appSettings'])\n\n    if (!existingData.emojiGroups) {\n      await chromeAPI.storage.local.set({ emojiGroups: defaultEmojiGroups })\n      console.log('Default emoji groups initialized')\n    }\n\n    if (!existingData.appSettings) {\n      const defaultSettings = {\n        imageScale: 100,\n        defaultGroup: 'nachoneko',\n        showSearchBar: true,\n        gridColumns: 4\n      }\n\n      await chromeAPI.storage.local.set({ appSettings: defaultSettings })\n      console.log('Default app settings initialized')\n    }\n  } catch (error) {\n    console.error('Failed to initialize default data:', error)\n  }\n}\n\nexport function setupOnInstalledListener() {\n  const chromeAPI = getChromeAPI()\n  if (chromeAPI && chromeAPI.runtime && chromeAPI.runtime.onInstalled) {\n    chromeAPI.runtime.onInstalled.addListener(async (details: any) => {\n      console.log('Emoji extension installed/updated:', details.reason)\n      if (details.reason === 'install') {\n        await initializeDefaultData()\n      }\n    })\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\background\\utils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [106, 109], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [106, 109], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [130, 133], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [130, 133], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 6,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 6,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [162, 207], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Utilities for background scripts\nexport const getChromeAPI = () => {\n  try {\n    return (globalThis as any).chrome || (self as any).chrome\n  } catch (e) {\n    console.error('Chrome API not available:', e)\n    return null\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\AboutSection.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\GridColumnsSelector.vue",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 14,
        "column": 4,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "e" },
            "fix": { "range": [330, 353], "text": "" },
            "desc": "Remove unused variable 'e'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'value' is defined but never used.",
        "line": 14,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "value" },
            "fix": { "range": [352, 367], "text": "" },
            "desc": "Remove unused variable 'value'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { Dropdown as ADropdown, Menu as AMenu, Button as AButton } from 'ant-design-vue'\nimport { DownOutlined } from '@ant-design/icons-vue'\n\nconst props = defineProps<{\n  modelValue: number\n  min?: number\n  max?: number\n  step?: number\n}>()\n\nconst emit = defineEmits<{\n  (e: 'update:modelValue', value: number): void\n}>()\n\nconst options = computed(() => {\n  const min = Number(props.min ?? 2)\n  const max = Number(props.max ?? 8)\n  const step = Number(props.step ?? 1)\n  const arr: number[] = []\n  for (let i = min; i <= max; i += step) arr.push(i)\n  return arr\n})\n\nconst onMenuClick = (key: string) => {\n  emit('update:modelValue', Number(key))\n}\n</script>\n\n<template>\n  <ADropdown>\n    <template #overlay>\n      <AMenu @click=\"info => onMenuClick(String(info.key))\">\n        <AMenu.Item v-for=\"col in options\" :key=\"col\" :value=\"col\">{{ col }} 列</AMenu.Item>\n      </AMenu>\n    </template>\n    <AButton>\n      {{ modelValue }} 列\n      <DownOutlined />\n    </AButton>\n  </ADropdown>\n</template>\n\n<style scoped>\n/* keep style minimal; parent can override */\n</style>\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\ImageGenerator\\ApiConfig.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\ImageGenerator\\GenerateButton.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\ImageGenerator\\GenerationConfig.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\ImageGenerator\\GenerationMode.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\ImageGenerator\\ImageGeneratorMain.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\ImageGenerator\\ImageUpload.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\ImageGenerator\\PromptInput.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\ImageGenerator\\ResultDisplay.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\components\\ImageGenerator\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\composables\\useImageGenerator.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1775, 1778], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1775, 1778], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 57,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 57,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [1841, 1881], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 71,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 71,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2184, 2187], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2184, 2187], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'err' is defined but never used.",
        "line": 79,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'err' is defined but never used.",
        "line": 79,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, computed } from 'vue'\n\nimport { ProviderManager } from '@/utils/imageProviders'\nimport type { GenerateRequest } from '@/types/imageGenerator'\n\nexport function useImageGenerator() {\n  const providerManager = new ProviderManager()\n  const isGenerating = ref(false)\n  const error = ref<string | null>(null)\n  const generatedImages = ref<string[]>([])\n\n  // Form data\n  const generationMode = ref<'generate' | 'edit'>('generate')\n  const uploadedImage = ref<string | undefined>()\n  const prompt = ref('')\n  const generationConfig = ref({\n    imageCount: 4,\n    aspectRatio: '1:1',\n    style: ''\n  })\n\n  // Computed\n  const canGenerate = computed(() => {\n    const hasPrompt = prompt.value.trim().length > 0\n    const currentProvider = providerManager.getCurrentProvider()\n    const hasApiKey =\n      currentProvider && typeof currentProvider.loadApiKey === 'function'\n        ? currentProvider.loadApiKey().length > 0\n        : false\n    const hasImageForEdit = generationMode.value === 'edit' ? !!uploadedImage.value : true\n\n    return hasPrompt && hasApiKey && hasImageForEdit && !isGenerating.value\n  })\n\n  // Methods\n  const generateImages = async () => {\n    if (!canGenerate.value) return\n\n    isGenerating.value = true\n    error.value = null\n    generatedImages.value = []\n\n    try {\n      const request: GenerateRequest = {\n        prompt: prompt.value.trim(),\n        aspectRatio: generationConfig.value.aspectRatio,\n        numberOfImages: generationConfig.value.imageCount,\n        style: generationConfig.value.style || undefined,\n        editMode: generationMode.value === 'edit',\n        inputImage: uploadedImage.value\n      }\n\n      const images = await providerManager.generateImages(request)\n      generatedImages.value = images\n    } catch (err: any) {\n      error.value = err.message || '生成图片时发生错误，请稍后重试'\n      console.error('Generation failed:', err)\n    } finally {\n      isGenerating.value = false\n    }\n  }\n\n  const clearResults = () => {\n    generatedImages.value = []\n    error.value = null\n  }\n\n  const downloadImage = async (url: string, filename: string) => {\n    try {\n      await providerManager.downloadImage(url, filename)\n    } catch (err: any) {\n      throw new Error(err.message || '下载失败')\n    }\n  }\n\n  const copyImageUrl = async (url: string) => {\n    try {\n      await providerManager.copyToClipboard(url)\n    } catch (err) {\n      throw new Error('复制失败')\n    }\n  }\n\n  const resetForm = () => {\n    generationMode.value = 'generate'\n    uploadedImage.value = undefined\n    prompt.value = ''\n    generationConfig.value = {\n      imageCount: 4,\n      aspectRatio: '1:1',\n      style: ''\n    }\n    clearResults()\n  }\n\n  return {\n    // State\n    providerManager,\n    isGenerating,\n    error,\n    generatedImages,\n    generationMode,\n    uploadedImage,\n    prompt,\n    generationConfig,\n\n    // Computed\n    canGenerate,\n\n    // Methods\n    generateImages,\n    clearResults,\n    downloadImage,\n    copyImageUrl,\n    resetForm\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\config\\buildFlags.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [627, 630], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [627, 630], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 22,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 22,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [683, 703], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [734, 737], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [734, 737], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 28,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 28,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [790, 811], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [843, 846], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [843, 846], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 34,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 34,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [899, 921], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [974, 977], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [974, 977], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 41,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 41,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1072, 1101], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Build-time flags for development and production\n// These values are replaced at build time by Vite\n\ndeclare global {\n  const __ENABLE_LOGGING__: boolean\n  const __ENABLE_INDEXEDDB__: boolean\n}\n\n// Runtime flags that can be set by build configuration\nexport const BUILD_FLAGS = {\n  // 是否启用日志输出 (控制 console.log, console.warn, console.error)\n  ENABLE_LOGGING: typeof __ENABLE_LOGGING__ !== 'undefined' ? __ENABLE_LOGGING__ : true,\n\n  // 是否启用 IndexedDB 读写操作\n  ENABLE_INDEXEDDB: typeof __ENABLE_INDEXEDDB__ !== 'undefined' ? __ENABLE_INDEXEDDB__ : true\n} as const\n\n// 日志包装器，根据编译期标志决定是否输出\nexport const logger = {\n  log: (...args: any[]) => {\n    if (BUILD_FLAGS.ENABLE_LOGGING) {\n      console.log(...args)\n    }\n  },\n\n  warn: (...args: any[]) => {\n    if (BUILD_FLAGS.ENABLE_LOGGING) {\n      console.warn(...args)\n    }\n  },\n\n  error: (...args: any[]) => {\n    if (BUILD_FLAGS.ENABLE_LOGGING) {\n      console.error(...args)\n    }\n  },\n\n  // 开发模式日志（只在开发环境下输出）\n  dev: (...args: any[]) => {\n    if (BUILD_FLAGS.ENABLE_LOGGING && process.env.NODE_ENV === 'development') {\n      console.log('[DEV]', ...args)\n    }\n  }\n}\n\n// IndexedDB 操作包装器\nexport const indexedDBWrapper = {\n  isEnabled: () => BUILD_FLAGS.ENABLE_INDEXEDDB,\n\n  // 检查是否应该跳过 IndexedDB 操作\n  shouldSkip: () => !BUILD_FLAGS.ENABLE_INDEXEDDB\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\ContentStorageAdapter.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [193, 196], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [193, 196], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 12,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 12,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [483, 549], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 20,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 20,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [812, 889], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 31,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 31,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [1177, 1238], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 41,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 41,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [1532, 1604], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 51,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 51,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [1890, 1953], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 61,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 61,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [2247, 2321], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 64,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 64,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2333, 2390], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 68,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 68,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2449, 2452], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2449, 2452], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 69,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 69,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2462, 2519], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 73,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 73,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2622, 2679], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 78,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 78,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [2833, 2899], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 81,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 81,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [3020, 3095], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 84,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 84,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [3132, 3432], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 97,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 97,
        "endColumn": 26,
        "suggestions": [
          {
            "fix": { "range": [3778, 3925], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 105,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 105,
        "endColumn": 26,
        "suggestions": [
          {
            "fix": { "range": [4158, 4286], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 116,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 116,
        "endColumn": 26,
        "suggestions": [
          {
            "fix": { "range": [4701, 4834], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 120,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 120,
        "endColumn": 27,
        "suggestions": [
          {
            "fix": { "range": [4870, 5254], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 131,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 131,
        "endColumn": 25,
        "suggestions": [
          {
            "fix": { "range": [5300, 5380], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 136,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 136,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5418, 5541], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 141,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 141,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [5582, 5702], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 151,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 151,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [6050, 6174], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 158,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 158,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [6236, 6298], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 161,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 161,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6442, 6531], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 170,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 170,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [6901, 6960], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 174,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 174,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7011, 7014], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7011, 7014], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 175,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 175,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [7022, 7071], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 179,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 179,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [7307, 7364], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 28,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { defaultSettings } from '../types/emoji'\n\nexport class ContentStorageAdapter {\n  // Read from extension storage with fallback to local/session storage\n  async get(key: string): Promise<any> {\n    // Try extension storage first (main source for content scripts)\n    if (chrome?.storage?.local) {\n      try {\n        const result = await chrome.storage.local.get({ [key]: null })\n        const value = result[key]\n        if (value !== null && value !== undefined) {\n          console.log(`[Content Storage] Found ${key} in extension storage`)\n          // Handle both new storage format (with .data) and legacy format\n          if (value && typeof value === 'object' && value.data !== undefined) {\n            return value.data\n          }\n          return value\n        }\n      } catch (error) {\n        console.warn(`[Content Storage] Extension storage failed for ${key}:`, error)\n      }\n    }\n\n    // Fallback to localStorage\n    try {\n      if (typeof localStorage !== 'undefined') {\n        const value = localStorage.getItem(key)\n        if (value) {\n          const parsed = JSON.parse(value)\n          if (parsed !== null && parsed !== undefined) {\n            console.log(`[Content Storage] Found ${key} in localStorage`)\n            // Handle both new storage format (with .data) and legacy format\n            if (parsed && typeof parsed === 'object' && parsed.data !== undefined) {\n              return parsed.data\n            }\n            return parsed\n          }\n        }\n      }\n    } catch (error) {\n      console.warn(`[Content Storage] localStorage failed for ${key}:`, error)\n    }\n\n    // Fallback to sessionStorage\n    try {\n      if (typeof sessionStorage !== 'undefined') {\n        const value = sessionStorage.getItem(key)\n        if (value) {\n          const parsed = JSON.parse(value)\n          if (parsed !== null && parsed !== undefined) {\n            console.log(`[Content Storage] Found ${key} in sessionStorage`)\n            // Handle both new storage format (with .data) and legacy format\n            if (parsed && typeof parsed === 'object' && parsed.data !== undefined) {\n              return parsed.data\n            }\n            return parsed\n          }\n        }\n      }\n    } catch (error) {\n      console.warn(`[Content Storage] sessionStorage failed for ${key}:`, error)\n    }\n\n    console.log(`[Content Storage] No data found for ${key}`)\n    return null\n  }\n\n  async getAllEmojiGroups(): Promise<any[]> {\n    console.log('[Content Storage] Getting all emoji groups')\n\n    // First try to get the group index\n    const groupIndex = await this.get('emojiGroupIndex')\n    console.log('[Content Storage] Group index:', groupIndex)\n\n    if (groupIndex && Array.isArray(groupIndex) && groupIndex.length > 0) {\n      const groups = []\n      for (const groupInfo of groupIndex) {\n        console.log(`[Content Storage] Processing group info:`, groupInfo)\n        if (groupInfo && groupInfo.id) {\n          const group = await this.get(`emojiGroup_${groupInfo.id}`)\n          console.log(`[Content Storage] Raw group data for ${groupInfo.id}:`, group)\n\n          if (group) {\n            console.log(`[Content Storage] Group structure:`, {\n              hasEmojis: !!group.emojis,\n              emojisType: typeof group.emojis,\n              isArray: Array.isArray(group.emojis),\n              emojisLength: group.emojis?.length,\n              groupKeys: Object.keys(group)\n            })\n\n            // Handle case where emojis is stored as an object instead of array\n            let emojisArray = group.emojis\n            if (group.emojis && typeof group.emojis === 'object' && !Array.isArray(group.emojis)) {\n              // Convert object to array if needed\n              emojisArray = Object.values(group.emojis)\n              console.log(\n                `[Content Storage] Converting emojis object to array for ${group.name}, length: ${emojisArray.length}`\n              )\n            }\n\n            if (emojisArray && Array.isArray(emojisArray)) {\n              const processedGroup = { ...group, emojis: emojisArray, order: groupInfo.order || 0 }\n              groups.push(processedGroup)\n              console.log(\n                `[Content Storage] ✅ Loaded group: ${group.name} with ${emojisArray.length} emojis`\n              )\n            } else if (groupInfo.id === 'favorites') {\n              // Special handling for favorites group which might not have emojis initially\n              const favoritesGroup = {\n                ...group,\n                emojis: emojisArray && Array.isArray(emojisArray) ? emojisArray : [],\n                order: groupInfo.order || 0\n              }\n              groups.push(favoritesGroup)\n              console.log(\n                `[Content Storage] ✅ Loaded favorites group with ${favoritesGroup.emojis.length} emojis`\n              )\n            } else {\n              console.warn(\n                `[Content Storage] ❌ Group ${group.name || groupInfo.id} has invalid emojis after conversion:`,\n                {\n                  hasEmojis: !!emojisArray,\n                  emojisType: typeof emojisArray,\n                  isArray: Array.isArray(emojisArray),\n                  originalEmojisType: typeof group.emojis\n                }\n              )\n            }\n          } else {\n            console.warn(`[Content Storage] ❌ Group ${groupInfo.id} data is null/undefined`)\n          }\n        }\n      }\n\n      console.log(\n        `[Content Storage] Processed ${groupIndex.length} groups, ${groups.length} valid groups found`\n      )\n\n      if (groups.length > 0) {\n        console.log(\n          `[Content Storage] Successfully loaded ${groups.length} groups from new storage system`\n        )\n        // Ensure favorites group is always first\n        const favoritesGroup = groups.find(g => g.id === 'favorites')\n        const otherGroups = groups\n          .filter(g => g.id !== 'favorites')\n          .sort((a, b) => a.order - b.order)\n        return favoritesGroup ? [favoritesGroup, ...otherGroups] : otherGroups\n      } else {\n        console.warn(\n          `[Content Storage] No valid groups found in new storage system despite having group index`\n        )\n      }\n    }\n\n    // Fallback to legacy emojiGroups key\n    console.log('[Content Storage] Trying legacy emojiGroups key')\n    const legacyGroups = await this.get('emojiGroups')\n    if (legacyGroups && Array.isArray(legacyGroups) && legacyGroups.length > 0) {\n      console.log(`[Content Storage] Loaded ${legacyGroups.length} groups from legacy storage`)\n      // Ensure favorites group is always first for legacy data too\n      const favoritesGroup = legacyGroups.find(g => g.id === 'favorites')\n      const otherGroups = legacyGroups\n        .filter(g => g.id !== 'favorites')\n        .sort((a, b) => (a.order || 0) - (b.order || 0))\n      return favoritesGroup ? [favoritesGroup, ...otherGroups] : otherGroups\n    }\n\n    console.log('[Content Storage] No groups found in storage')\n    return []\n  }\n\n  async getSettings(): Promise<any> {\n    console.log('[Content Storage] Getting settings')\n    const settings = await this.get('appSettings')\n    // Merge with central defaultSettings so fields like outputFormat are always present\n    const result = settings ? { ...defaultSettings, ...settings } : { ...defaultSettings }\n    console.log('[Content Storage] Settings loaded:', result)\n    return result\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\buildFlags.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\content.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 4,
        "column": 1,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 4,
        "endColumn": 12,
        "suggestions": [
          {
            "fix": { "range": [76, 138], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 13,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 13,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [478, 543], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 22,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 22,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [895, 970], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 31,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 31,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [1253, 1320], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 40,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 40,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [1587, 1646], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 44,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 44,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [1670, 1734], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 50,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 50,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [1832, 1891], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 53,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 53,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [1930, 2005], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Entry point: 初始化模块并启动功能\nimport { initializeEmojiFeature } from './init'\n\nconsole.log('[Emoji Extension] Content script loaded (entry)')\n\n// Function to check if current page should have emoji injection\nfunction shouldInjectEmoji(): boolean {\n  // Check for discourse meta tag as example\n  const discourseMetaTags = document.querySelectorAll(\n    'meta[name*=\"discourse\"], meta[content*=\"discourse\"], meta[property*=\"discourse\"]'\n  )\n  if (discourseMetaTags.length > 0) {\n    console.log('[Emoji Extension] Discourse detected via meta tags')\n    return true\n  }\n\n  // Check for common forum/discussion platforms\n  const generatorMeta = document.querySelector('meta[name=\"generator\"]')\n  if (generatorMeta) {\n    const content = generatorMeta.getAttribute('content')?.toLowerCase() || ''\n    if (content.includes('discourse') || content.includes('flarum') || content.includes('phpbb')) {\n      console.log('[Emoji Extension] Forum platform detected via generator meta')\n      return true\n    }\n  }\n\n  // Check current domain - allow linux.do and other known sites\n  const hostname = window.location.hostname.toLowerCase()\n  const allowedDomains = ['linux.do', 'meta.discourse.org']\n  if (allowedDomains.some(domain => hostname.includes(domain))) {\n    console.log('[Emoji Extension] Allowed domain detected:', hostname)\n    return true\n  }\n\n  // Check for editor elements that suggest a discussion platform\n  const editors = document.querySelectorAll(\n    'textarea.d-editor-input, .ProseMirror.d-editor-input, .composer-input, .reply-area textarea'\n  )\n  if (editors.length > 0) {\n    console.log('[Emoji Extension] Discussion editor detected')\n    return true\n  }\n\n  console.log('[Emoji Extension] No compatible platform detected')\n  return false\n}\n\n// Only inject if compatible platform is detected\nif (shouldInjectEmoji()) {\n  console.log('[Emoji Extension] Initializing emoji feature')\n  initializeEmojiFeature()\n} else {\n  console.log('[Emoji Extension] Skipping injection - incompatible platform')\n}\n\nexport {}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\default.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\editor.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 2,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 2,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [52, 55], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [52, 55], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [140, 143], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [140, 143], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 6,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 6,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [149, 205], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 14,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 14,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 13
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 18,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 18,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 15
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 18,
        "column": 17,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 18,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [528, 528], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 25,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 25,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [764, 787], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 82,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 82,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 15
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 86,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 86,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [3010, 3044], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// editor.ts - 负责把选中的表情插入到编辑器\ndeclare const chrome: any\nimport { cachedState } from './state'\n\nexport function insertEmojiIntoEditor(emoji: any) {\n  console.log('[Emoji Extension] Inserting emoji:', emoji)\n\n  // Add emoji to favorites automatically\n  try {\n    chrome.runtime.sendMessage({\n      action: 'addToFavorites',\n      emoji: emoji\n    })\n  } catch (e) {\n    // Some environments may not support promise-based sendMessage\n    try {\n      chrome.runtime.sendMessage({ action: 'addToFavorites', emoji })\n    } catch (_) {}\n  }\n\n  const textArea = document.querySelector('textarea.d-editor-input') as HTMLTextAreaElement | null\n  const richEle = document.querySelector('.ProseMirror.d-editor-input') as HTMLElement | null\n\n  if (!textArea && !richEle) {\n    console.error('找不到输入框')\n    return\n  }\n\n  const match = emoji.url?.match(/_(\\d{3,})x(\\d{3,})\\./)\n  let width = '500'\n  let height = '500'\n  if (match) {\n    width = match[1]\n    height = match[2]\n  } else if (emoji.width && emoji.height) {\n    width = emoji.width.toString()\n    height = emoji.height.toString()\n  }\n\n  const scale = (cachedState && cachedState.settings && cachedState.settings.imageScale) || 30\n  const outputFormat =\n    (cachedState && cachedState.settings && cachedState.settings.outputFormat) || 'markdown'\n\n  if (textArea) {\n    let emojiText = ''\n\n    if (outputFormat === 'html') {\n      // HTML格式输出\n      const pixelWidth = Math.max(1, Math.round(Number(width) * (scale / 100)))\n      const pixelHeight = Math.max(1, Math.round(Number(height) * (scale / 100)))\n      emojiText = `<img src=\"${emoji.url}\" title=\":${emoji.name}:\" class=\"emoji only-emoji\" alt=\":${emoji.name}:\" loading=\"lazy\" width=\"${pixelWidth}\" height=\"${pixelHeight}\" style=\"aspect-ratio: ${pixelWidth} / ${pixelHeight};\"> `\n    } else {\n      // 默认Markdown格式输出\n      emojiText = `![${emoji.name}|${width}x${height},${scale}%](${emoji.url}) `\n    }\n\n    const startPos = textArea.selectionStart\n    const endPos = textArea.selectionEnd\n    textArea.value =\n      textArea.value.substring(0, startPos) +\n      emojiText +\n      textArea.value.substring(endPos, textArea.value.length)\n\n    textArea.selectionStart = textArea.selectionEnd = startPos + emojiText.length\n    textArea.focus()\n\n    const event = new Event('input', { bubbles: true, cancelable: true })\n    textArea.dispatchEvent(event)\n  } else if (richEle) {\n    const numericWidth = Number(width) || 500\n    const pixelWidth = Math.max(1, Math.round(numericWidth * (scale / 100)))\n    const imgTemplate = `<img src=\"${emoji.url}\" alt=\"${emoji.name}\" width=\"${width}\" height=\"${height}\" data-scale=\"${scale}\" style=\"width: ${pixelWidth}px\">`\n\n    try {\n      const dt = new DataTransfer()\n      dt.setData('text/html', imgTemplate)\n      const evt = new ClipboardEvent('paste', {\n        clipboardData: dt,\n        bubbles: true\n      })\n      richEle.dispatchEvent(evt)\n    } catch (_) {\n      try {\n        document.execCommand('insertHTML', false, imgTemplate)\n      } catch (e) {\n        console.error('无法向富文本编辑器中插入表情', e)\n      }\n    }\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\init.ts",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 40,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 40,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 17
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 75,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 75,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 176,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 176,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5428, 5431], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5428, 5431], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 177,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 177,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5479, 5482], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5479, 5482], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 177,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 177,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5531, 5534], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5531, 5534], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 192,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 192,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6063, 6066], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6063, 6066], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 193,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 193,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6114, 6117], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6114, 6117], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 194,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 194,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6173, 6176], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6173, 6176], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_sender' is defined but never used.",
        "line": 194,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 194,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_sender" },
            "fix": { "range": [6176, 6190], "text": "" },
            "desc": "Remove unused variable '_sender'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 194,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 194,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6187, 6190], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6187, 6190], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_sendResponse' is defined but never used.",
        "line": 194,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 194,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_sendResponse" },
            "fix": { "range": [6190, 6210], "text": "" },
            "desc": "Remove unused variable '_sendResponse'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 194,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 194,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6207, 6210], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6207, 6210], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { loadDataFromStorage } from './storage'\nimport { findAllToolbars, injectButton } from './injector'\nimport { initOneClickAdd } from './oneClickAdd'\nimport { logger } from './buildFlags'\n\n// Function to check and re-inject buttons if needed\nfunction checkAndReinjectButtons() {\n  const toolbars = findAllToolbars()\n  toolbars.forEach((toolbar: Element) => {\n    if (\n      !toolbar.querySelector('.emoji-extension-button') &&\n      !toolbar.querySelector('.image-upload-button')\n    ) {\n      logger.log('[Emoji Extension] Buttons missing after reply button click, re-injecting...')\n      injectButton(toolbar)\n    }\n  })\n}\n\n// Setup reply button listeners\nfunction setupReplyButtonListeners() {\n  // Selectors for different types of reply buttons\n  const replyButtonSelectors = [\n    // Topic footer reply button\n    'button.btn.btn-icon-text.btn-primary.create.topic-footer-button[title*=\"回复\"]',\n    // Simple reply button (no text)\n    'button.btn.no-text.btn-icon.btn-default.create.reply-to-post[title*=\"回复\"]',\n    // Post action menu reply button\n    'button.btn.btn-icon-text.post-action-menu__reply.reply.create[title*=\"回复\"]'\n  ]\n\n  // Use event delegation to handle dynamically added buttons\n  document.addEventListener('click', (event: Event) => {\n    const target = event.target as HTMLElement\n\n    // Check if the clicked element matches any reply button selector\n    const isReplyButton = replyButtonSelectors.some(selector => {\n      try {\n        return target.matches(selector) || target.closest(selector)\n      } catch (e) {\n        // Handle invalid selector gracefully\n        return false\n      }\n    })\n\n    if (isReplyButton) {\n      logger.log('[Emoji Extension] Reply button clicked, checking for injection needs...')\n\n      // Delay check to allow the editor to be created\n      setTimeout(() => {\n        checkAndReinjectButtons()\n      }, 500)\n\n      // Additional check after a longer delay for complex UI changes\n      setTimeout(() => {\n        checkAndReinjectButtons()\n      }, 2000)\n    }\n  })\n\n  // Also listen for mutations in case buttons are added/removed dynamically\n  const observer = new MutationObserver(mutations => {\n    let shouldCheck = false\n\n    mutations.forEach(mutation => {\n      // Check if any added nodes contain reply buttons\n      mutation.addedNodes.forEach(node => {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          const element = node as Element\n\n          // Check if the added element or its descendants contain reply buttons\n          const hasReplyButtons = replyButtonSelectors.some(selector => {\n            try {\n              return element.matches(selector) || element.querySelector(selector)\n            } catch (e) {\n              return false\n            }\n          })\n\n          if (hasReplyButtons) {\n            shouldCheck = true\n          }\n        }\n      })\n    })\n\n    if (shouldCheck) {\n      logger.log('[Emoji Extension] Reply buttons detected in DOM changes, checking injection...')\n      setTimeout(() => {\n        checkAndReinjectButtons()\n      }, 500)\n    }\n  })\n\n  // Start observing DOM changes\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  })\n\n  logger.log('[Emoji Extension] Reply button listeners initialized')\n}\n\nexport async function initializeEmojiFeature(\n  maxInjectionAttempts: number = 10,\n  delay: number = 1000\n) {\n  logger.log('[Emoji Extension] Initializing (module)...')\n  await loadDataFromStorage()\n\n  // 初始化一键添加表情功能\n  initOneClickAdd()\n\n  // 初始化回复按钮监听器\n  setupReplyButtonListeners()\n\n  let injectionAttempts = 0\n\n  function attemptInjection() {\n    injectionAttempts++\n\n    // Inject into all available toolbars\n    const toolbars = findAllToolbars()\n    let injectedCount = 0\n\n    toolbars.forEach(toolbar => {\n      if (\n        !toolbar.querySelector('.emoji-extension-button') &&\n        !toolbar.querySelector('.image-upload-button')\n      ) {\n        logger.log('[Emoji Extension] Toolbar found, injecting buttons.')\n        injectButton(toolbar)\n        injectedCount++\n      }\n    })\n\n    if (injectedCount > 0 || toolbars.length > 0) {\n      // Success - we found toolbars and injected or they already have buttons\n      return\n    }\n\n    // No toolbars found, continue retry logic\n    if (injectionAttempts < maxInjectionAttempts) {\n      logger.log(\n        `[Emoji Extension] Toolbar not found, attempt ${injectionAttempts}/${maxInjectionAttempts}. Retrying ${\n          delay / 1000\n        } s.`\n      )\n      setTimeout(attemptInjection, delay)\n    } else if (maxInjectionAttempts < 20) {\n      initializeEmojiFeature(20, 2000)\n    } else if (maxInjectionAttempts < 40) {\n      initializeEmojiFeature(40, 4000)\n    } else if (maxInjectionAttempts < 80) {\n      initializeEmojiFeature(80, 8000)\n    } else if (maxInjectionAttempts < 160) {\n      initializeEmojiFeature(160, 16000)\n    } else if (maxInjectionAttempts < 320) {\n      initializeEmojiFeature(320, 32000)\n    } else if (maxInjectionAttempts < 640) {\n      initializeEmojiFeature(640, 64000)\n    } else {\n      logger.error(\n        '[Emoji Extension] Failed to find toolbar after multiple attempts. Button injection failed. 我感觉你是人机'\n      )\n    }\n  }\n\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', attemptInjection)\n  } else {\n    attemptInjection()\n  }\n\n  // storage change listener (using chrome.storage.onChanged if available)\n  if ((window as any).chrome?.storage?.onChanged) {\n    ;(window as any).chrome.storage.onChanged.addListener((changes: any, namespace: string) => {\n      if (namespace === 'local') {\n        const relevantKeys = ['emojiGroups', 'emojiGroupIndex', 'appSettings']\n        const hasRelevant = Object.keys(changes).some(\n          k => relevantKeys.includes(k) || k.startsWith('emojiGroup_')\n        )\n        if (hasRelevant) {\n          logger.log('[Emoji Extension] Storage change detected (module), reloading data')\n          loadDataFromStorage()\n        }\n      }\n    })\n  }\n\n  // Listen for settings updates from background script\n  if ((window as any).chrome?.runtime?.onMessage) {\n    ;(window as any).chrome.runtime.onMessage.addListener(\n      (message: any, _sender: any, _sendResponse: any) => {\n        if (message.type === 'SETTINGS_UPDATED') {\n          logger.log('[Emoji Extension] Settings updated from background, reloading data')\n          loadDataFromStorage()\n        }\n      }\n    )\n  }\n\n  // periodic checks\n  setInterval(() => {\n    const toolbars = findAllToolbars()\n    toolbars.forEach(toolbar => {\n      if (\n        !toolbar.querySelector('.emoji-extension-button') &&\n        !toolbar.querySelector('.image-upload-button')\n      ) {\n        logger.log('[Emoji Extension] Toolbar found but buttons missing, injecting... (module)')\n        injectButton(toolbar)\n      }\n    })\n  }, 30000)\n\n  setInterval(() => {\n    logger.log('[Emoji Extension] Periodic data reload (module)')\n    loadDataFromStorage()\n  }, 120000)\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\injector.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 212,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 212,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6690, 6693], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6690, 6693], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 283,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 283,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [8827, 8899], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createEmojiPicker } from './picker'\nimport { cachedState } from './state'\nimport { showImageUploadDialog } from './uploader'\n\n// Different toolbar selectors for different contexts\nconst TOOLBAR_SELECTORS = [\n  '.d-editor-button-bar[role=\"toolbar\"]', // Standard editor toolbar\n  '.chat-composer__inner-container' // Chat composer\n]\n\nexport function findToolbar(): Element | null {\n  for (const selector of TOOLBAR_SELECTORS) {\n    const toolbar = document.querySelector(selector)\n    if (toolbar) {\n      return toolbar\n    }\n  }\n  return null\n}\n\nexport function findAllToolbars(): Element[] {\n  const toolbars: Element[] = []\n  for (const selector of TOOLBAR_SELECTORS) {\n    const elements = document.querySelectorAll(selector)\n    toolbars.push(...Array.from(elements))\n  }\n  return toolbars\n}\n\nlet currentPicker: HTMLElement | null = null\n\nfunction handleClickOutside(e: Event, button: HTMLElement) {\n  if (currentPicker && !currentPicker.contains(e.target as Node) && e.target !== button) {\n    currentPicker.remove()\n    currentPicker = null\n    document.removeEventListener('click', event => handleClickOutside(event, button))\n  }\n}\n\nasync function injectDesktopPicker(button: HTMLElement) {\n  currentPicker = await createEmojiPicker(false)\n  const buttonRect = button.getBoundingClientRect()\n  const pickerElement = currentPicker\n  if (pickerElement) document.body.appendChild(pickerElement)\n\n  const editorWrapper = document.querySelector('.d-editor-textarea-wrapper')\n  if (editorWrapper) {\n    const editorRect = editorWrapper.getBoundingClientRect()\n    const replyControl = document.querySelector('#reply-control')\n    const isMinireply = replyControl?.className.includes('hide-preview') && window.innerWidth < 1600\n    pickerElement.style.position = 'fixed'\n    if (isMinireply) {\n      pickerElement.style.bottom = window.innerHeight - editorRect.top + 10 + 'px'\n      pickerElement.style.left = editorRect.left + editorRect.width / 2 - 200 + 'px'\n    } else {\n      const pickerRect = pickerElement.getBoundingClientRect()\n      pickerElement.style.top = buttonRect.top - pickerRect.height - 5 + 'px'\n      pickerElement.style.left =\n        buttonRect.left + buttonRect.width / 2 - pickerRect.width / 2 + 'px'\n      if (pickerElement.getBoundingClientRect().top < 0) {\n        pickerElement.style.top = buttonRect.bottom + 5 + 'px'\n      }\n    }\n  } else {\n    pickerElement.style.position = 'fixed'\n    pickerElement.style.top = buttonRect.bottom + 5 + 'px'\n    pickerElement.style.left = buttonRect.left + 'px'\n  }\n\n  setTimeout(() => {\n    document.addEventListener('click', event => handleClickOutside(event, button))\n  }, 100)\n}\n\nasync function injectMobilePicker() {\n  const picker = await createEmojiPicker(true)\n\n  let modalContainer = document.querySelector('.modal-container')\n  if (!modalContainer) {\n    modalContainer = document.createElement('div')\n    modalContainer.className = 'modal-container'\n    document.body.appendChild(modalContainer)\n  }\n\n  modalContainer.innerHTML = '' // Clear any previous content\n\n  const backdrop = document.createElement('div')\n  backdrop.className = 'd-modal__backdrop'\n  backdrop.addEventListener('click', () => {\n    modalContainer.remove()\n    currentPicker = null\n  })\n\n  modalContainer.appendChild(picker)\n  modalContainer.appendChild(backdrop)\n\n  currentPicker = modalContainer as HTMLElement\n}\n\nfunction createUploadMenu(): HTMLElement {\n  const menu = document.createElement('div')\n  menu.className = 'upload-menu'\n  menu.style.cssText = `\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    padding: 8px 0;\n    min-width: 180px;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  `\n\n  const uploadOption = document.createElement('div')\n  uploadOption.className = 'upload-option'\n  uploadOption.style.cssText = `\n    padding: 12px 16px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    transition: background-color 0.2s;\n  `\n  uploadOption.innerHTML = `\n    <span style=\"margin-right: 8px;\">📁</span>\n    <span>上传本地图片</span>\n  `\n  uploadOption.addEventListener('mouseenter', () => {\n    uploadOption.style.backgroundColor = '#f5f5f5'\n  })\n  uploadOption.addEventListener('mouseleave', () => {\n    uploadOption.style.backgroundColor = 'transparent'\n  })\n  uploadOption.addEventListener('click', async () => {\n    menu.remove()\n    await showImageUploadDialog()\n  })\n\n  const generateOption = document.createElement('div')\n  generateOption.className = 'upload-option'\n  generateOption.style.cssText = uploadOption.style.cssText\n  generateOption.innerHTML = `\n    <span style=\"margin-right: 8px;\">🎨</span>\n    <span>AI 生成图片</span>\n  `\n  generateOption.addEventListener('mouseenter', () => {\n    generateOption.style.backgroundColor = '#f5f5f5'\n  })\n  generateOption.addEventListener('mouseleave', () => {\n    generateOption.style.backgroundColor = 'transparent'\n  })\n  generateOption.addEventListener('click', () => {\n    menu.remove()\n    // Image generator removed: fallback to opening upload dialog\n    showImageUploadDialog()\n  })\n\n  menu.appendChild(uploadOption)\n  menu.appendChild(generateOption)\n\n  return menu\n}\n\nexport function injectButton(toolbar: Element) {\n  // Check if we already injected buttons in this toolbar\n  if (\n    toolbar.querySelector('.emoji-extension-button') ||\n    toolbar.querySelector('.image-upload-button')\n  ) {\n    return\n  }\n\n  const isChatComposer = toolbar.classList.contains('chat-composer__inner-container')\n\n  // Create emoji button\n  const emojiButton = document.createElement('button')\n  emojiButton.classList.add(\n    'btn',\n    'no-text',\n    'btn-icon',\n    'toolbar__button',\n    'nacho-emoji-picker-button',\n    'emoji-extension-button'\n  )\n\n  // Add chat-specific classes if needed\n  if (isChatComposer) {\n    emojiButton.classList.add(\n      'fk-d-menu__trigger',\n      'emoji-picker-trigger',\n      'chat-composer-button',\n      'btn-transparent',\n      '-emoji'\n    )\n    emojiButton.setAttribute('aria-expanded', 'false')\n    emojiButton.setAttribute('data-identifier', 'emoji-picker')\n    emojiButton.setAttribute('data-trigger', '')\n  }\n\n  emojiButton.title = '表情包'\n  emojiButton.type = 'button'\n  emojiButton.innerHTML = `🐈‍⬛`\n\n  emojiButton.addEventListener('click', async event => {\n    event.stopPropagation()\n    if (currentPicker) {\n      currentPicker.remove()\n      currentPicker = null\n      document.removeEventListener('click', event => handleClickOutside(event, emojiButton))\n      return\n    }\n\n    // Use cached settings instead of reading from storage directly\n    const forceMobile = (cachedState.settings as any)?.forceMobileMode || false\n\n    if (forceMobile) {\n      injectMobilePicker()\n    } else {\n      injectDesktopPicker(emojiButton)\n    }\n  })\n\n  // Create image upload button\n  const uploadButton = document.createElement('button')\n  uploadButton.classList.add('btn', 'no-text', 'btn-icon', 'toolbar__button', 'image-upload-button')\n\n  // Add chat-specific classes if needed\n  if (isChatComposer) {\n    uploadButton.classList.add('fk-d-menu__trigger', 'chat-composer-button', 'btn-transparent')\n    uploadButton.setAttribute('aria-expanded', 'false')\n    uploadButton.setAttribute('data-trigger', '')\n  }\n\n  uploadButton.title = '上传图片'\n  uploadButton.type = 'button'\n  uploadButton.innerHTML = `📷`\n\n  uploadButton.addEventListener('click', async event => {\n    event.stopPropagation()\n\n    // Show menu with upload options\n    const menu = createUploadMenu()\n    document.body.appendChild(menu)\n\n    // Position menu near button\n    const rect = uploadButton.getBoundingClientRect()\n    menu.style.position = 'fixed'\n    menu.style.top = rect.bottom + 5 + 'px'\n    menu.style.left = rect.left + 'px'\n    menu.style.zIndex = '10000'\n\n    // Remove menu when clicking outside\n    const removeMenu = (e: Event) => {\n      if (!menu.contains(e.target as Node)) {\n        menu.remove()\n        document.removeEventListener('click', removeMenu)\n      }\n    }\n\n    setTimeout(() => {\n      document.addEventListener('click', removeMenu)\n    }, 100)\n  })\n\n  try {\n    // Insert buttons at appropriate positions\n    if (isChatComposer) {\n      // For chat composer, insert before the emoji picker button\n      const emojiPickerBtn = toolbar.querySelector(\n        '.emoji-picker-trigger:not(.emoji-extension-button)'\n      )\n      if (emojiPickerBtn) {\n        toolbar.insertBefore(uploadButton, emojiPickerBtn)\n        toolbar.insertBefore(emojiButton, emojiPickerBtn)\n      } else {\n        toolbar.appendChild(uploadButton)\n        toolbar.appendChild(emojiButton)\n      }\n    } else {\n      // For standard toolbar, append at the end\n      toolbar.appendChild(uploadButton)\n      toolbar.appendChild(emojiButton)\n    }\n  } catch (e) {\n    console.error('[Emoji Extension] Failed to inject buttons (module):', e)\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\insert.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\oneClickAdd.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 2,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 2,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [84, 87], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [84, 87], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 65,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 65,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [1844, 1889], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 470,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 470,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [13144, 13205], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'failCount' is assigned a value but never used.",
        "line": 471,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 471,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'failCount' is assigned a value but never used.",
        "line": 471,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 471,
        "endColumn": 20
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 492,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 492,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [13838, 13883], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 598,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 598,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [16458, 16529], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// oneClickAdd.ts - 一键添加表情功能（支持 Magnific Popup 和 cooked 内容区域）\ndeclare const chrome: any\n\n// 添加CSS动画\nconst cssAnimation = `\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`\n\n// 注入CSS动画到页面\nfunction injectCSSAnimation() {\n  if (!document.getElementById('oneclick-add-styles')) {\n    const style = document.createElement('style')\n    style.id = 'oneclick-add-styles'\n    style.textContent = cssAnimation\n    document.head.appendChild(style)\n  }\n}\n\ninterface AddEmojiButtonData {\n  name: string\n  url: string\n}\n\n/**\n * 设置按钮点击事件处理器。\n * @param button 按钮元素\n * @param data 表情数据\n */\nfunction setupButtonClickHandler(button: HTMLElement, data: AddEmojiButtonData) {\n  button.addEventListener('click', async e => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    // 保存按钮原始内容和样式，用于操作完成后恢复\n    const originalContent = button.innerHTML\n    const originalStyle = button.style.cssText\n\n    try {\n      // 发送消息到background script，执行添加表情的操作\n      await chrome.runtime.sendMessage({\n        action: 'addEmojiFromWeb',\n        emojiData: data\n      })\n\n      // 显示成功提示\n      button.innerHTML = `\n        <svg class=\"fa d-icon d-icon-check svg-icon svg-string\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"width: 1em; height: 1em; fill: currentColor; margin-right: 4px;\">\n          <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n        </svg>已添加\n      `\n      button.style.background = 'linear-gradient(135deg, #10b981, #059669)'\n      button.style.color = '#ffffff'\n      button.style.border = '2px solid #ffffff'\n      button.style.boxShadow = '0 2px 4px rgba(16, 185, 129, 0.3)'\n\n      // 2秒后恢复按钮状态\n      setTimeout(() => {\n        button.innerHTML = originalContent\n        button.style.cssText = originalStyle\n      }, 2000)\n    } catch (error) {\n      console.error('[OneClickAdd] 添加表情失败:', error)\n\n      // 显示失败提示\n      button.innerHTML = `\n        <svg class=\"fa d-icon d-icon-times svg-icon svg-string\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"width: 1em; height: 1em; fill: currentColor; margin-right: 4px;\">\n          <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n        </svg>失败\n      `\n      button.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)'\n      button.style.color = '#ffffff' // 确保失败文本颜色为白色，以便看清\n      button.style.border = '2px solid #ffffff'\n      button.style.boxShadow = '0 2px 4px rgba(239, 68, 68, 0.3)'\n\n      // 2秒后恢复按钮状态\n      setTimeout(() => {\n        button.innerHTML = originalContent\n        button.style.cssText = originalStyle\n      }, 2000)\n    }\n  })\n}\n\n/**\n * 从图片URL中提取文件名作为默认名称。\n * @param url 图片URL字符串\n * @returns 提取的名称或默认值 '表情'\n */\nfunction extractNameFromUrl(url: string): string {\n  try {\n    const urlObj = new URL(url)\n    const pathname = urlObj.pathname\n    const filename = pathname.split('/').pop() || ''\n\n    // 移除文件扩展名\n    const nameWithoutExt = filename.replace(/\\.[^/.]+$/, '')\n\n    // 解码URL编码\n    const decoded = decodeURIComponent(nameWithoutExt)\n\n    // 如果是无意义的哈希值或短字符串，返回默认名称\n    if (/^[0-9a-f]{8,}$/i.test(decoded) || decoded.length < 2) {\n      return '表情'\n    }\n\n    return decoded || '表情'\n  } catch {\n    return '表情'\n  }\n}\n\n/**\n * 从图片元素和标题容器中提取表情数据。\n * @param imgElement 图片元素\n * @param titleContainer 标题容器元素\n * @returns 包含名称和URL的表情数据对象，或 null\n */\nfunction extractEmojiDataFromMfp(\n  imgElement: HTMLImageElement,\n  titleContainer: Element\n): AddEmojiButtonData | null {\n  const src = imgElement.src\n  if (!src || !src.startsWith('http')) {\n    return null\n  }\n\n  // 优先从title容器中获取名称\n  let name = ''\n  const titleText = titleContainer.textContent || ''\n\n  // 解析标题，通常格式为：\"文件名 · 尺寸 大小 · 下载 · 原始图片\"\n  const titleParts = titleText.split('·')\n  if (titleParts.length > 0) {\n    name = titleParts[0].trim()\n  }\n\n  // 如果从标题获取不到有效名称，尝试使用 alt 或 title 属性，最后使用URL\n  if (!name || name.length < 2) {\n    name = imgElement.alt || imgElement.title || extractNameFromUrl(src)\n  }\n\n  // 清理名称\n  name = name.trim()\n  if (name.length === 0) {\n    name = '表情'\n  }\n\n  return {\n    name,\n    url: src\n  }\n}\n\n/**\n * 检查一个元素是否为 Magnific Popup 图片查看器容器。\n * @param element 要检查的元素\n * @returns 如果是则返回 true\n */\nfunction isMagnificPopup(element: Element): boolean {\n  // 检查 class 和 .mfp-img 元素，以确保这是正确的类型\n  return (\n    element.classList.contains('mfp-wrap') &&\n    element.classList.contains('mfp-gallery') &&\n    element.querySelector('.mfp-img') !== null\n  )\n}\n\n/**\n * 创建一个符合 Magnific Popup 标题区域样式的“添加表情”按钮。\n * @param data 按钮绑定的表情数据\n * @returns 创建的按钮元素\n */\nfunction createMfpEmojiButton(data: AddEmojiButtonData): HTMLElement {\n  const button = document.createElement('a')\n  button.className = 'image-source-link emoji-add-link'\n  button.style.cssText = `\n    color: #ffffff;\n    text-decoration: none;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    font-size: inherit;\n    font-family: inherit;\n    background: linear-gradient(135deg, #4f46e5, #7c3aed);\n    border: 2px solid #ffffff;\n    border-radius: 6px;\n    padding: 4px 8px;\n    margin: 0 2px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n    transition: all 0.2s ease;\n    font-weight: 600;\n  `\n\n  // 添加hover效果\n  button.addEventListener('mouseenter', () => {\n    if (!button.innerHTML.includes('已添加') && !button.innerHTML.includes('失败')) {\n      button.style.background = 'linear-gradient(135deg, #3730a3, #5b21b6)'\n      button.style.transform = 'scale(1.05)'\n      button.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.3)'\n    }\n  })\n\n  button.addEventListener('mouseleave', () => {\n    if (!button.innerHTML.includes('已添加') && !button.innerHTML.includes('失败')) {\n      button.style.background = 'linear-gradient(135deg, #4f46e5, #7c3aed)'\n      button.style.transform = 'scale(1)'\n      button.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)'\n    }\n  })\n\n  // 添加SVG图标和文字\n  button.innerHTML = `\n    <svg class=\"fa d-icon d-icon-plus svg-icon svg-string\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"width: 1em; height: 1em; fill: currentColor; margin-right: 4px;\">\n      <path d=\"M12 4c.55 0 1 .45 1 1v6h6c.55 0 1 .45 1 1s-.45 1-1 1h-6v6c0 .55-.45 1-1 1s-1-.45-1-1v-6H5c-.55 0-1-.45-1-1s.45-1 1-1h6V5c0-.55.45-1 1-1z\"/>\n    </svg>添加表情\n  `\n\n  button.title = '添加到未分组表情'\n\n  // 添加点击事件\n  setupButtonClickHandler(button, data)\n\n  return button\n}\n\n/**\n * 为特定的 Magnific Popup 实例添加表情按钮。\n * @param mfpContainer Magnific Popup 的根容器元素\n */\nfunction addEmojiButtonToMfp(mfpContainer: Element) {\n  // 检查是否已经添加过按钮，避免重复注入\n  if (mfpContainer.querySelector('.emoji-add-link')) {\n    return\n  }\n\n  const imgElement = mfpContainer.querySelector('.mfp-img') as HTMLImageElement\n  const titleContainer = mfpContainer.querySelector('.mfp-title')\n\n  // 如果找不到图片或标题容器，则退出\n  if (!imgElement || !titleContainer) {\n    return\n  }\n\n  const emojiData = extractEmojiDataFromMfp(imgElement, titleContainer)\n  if (!emojiData) {\n    return\n  }\n\n  // 创建添加表情按钮\n  const addButton = createMfpEmojiButton(emojiData)\n\n  // 在标题文本和现有链接之间添加按钮。\n  // 这里的关键是找到标题文本的末尾，并插入按钮。\n  const downloadLink = titleContainer.querySelector('a.image-source-link')\n\n  if (downloadLink) {\n    // 如果找到了下载链接，就将按钮插入到它前面\n    const separator = document.createTextNode(' · ')\n    titleContainer.insertBefore(separator, downloadLink)\n    titleContainer.insertBefore(addButton, downloadLink)\n  } else {\n    // 如果没有找到链接，直接添加到末尾\n    titleContainer.appendChild(document.createTextNode(' · '))\n    titleContainer.appendChild(addButton)\n  }\n}\n\n/**\n * 扫描页面中所有 Magnific Popup 实例，并为它们添加按钮。\n */\nfunction scanForMagnificPopup() {\n  const mfpContainers = document.querySelectorAll('.mfp-wrap.mfp-gallery')\n\n  mfpContainers.forEach(container => {\n    if (isMagnificPopup(container)) {\n      addEmojiButtonToMfp(container)\n    }\n  })\n}\n\n/**\n * 监听 DOM 变化，当 Magnific Popup 出现时自动执行扫描。\n */\nfunction observeMagnificPopup() {\n  const observer = new MutationObserver(mutations => {\n    let hasMfpChanges = false\n\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        // 检查是否有新的节点被添加，并且是 Magnific Popup 相关的\n        mutation.addedNodes.forEach(node => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            const element = node as Element\n            if (element.classList && element.classList.contains('mfp-wrap')) {\n              hasMfpChanges = true\n            }\n          }\n        })\n      }\n    })\n\n    if (hasMfpChanges) {\n      // 短暂延迟以确保DOM完全更新，然后执行扫描\n      setTimeout(scanForMagnificPopup, 100)\n    }\n  })\n\n  // 监听 body 的子节点变化，包括子树\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  })\n}\n\n/**\n * 检查一个元素是否为带有 cooked 类的内容区域。\n * @param element 要检查的元素\n * @returns 如果是则返回 true\n */\nfunction isCookedContent(element: Element): boolean {\n  return element.classList.contains('cooked') && element.querySelector('.lightbox-wrapper') !== null\n}\n\n/**\n * 从 lightbox-wrapper 中解析图片数据。\n * @param lightboxWrapper lightbox-wrapper 元素\n * @returns 包含名称和URL的表情数据数组\n */\nfunction extractEmojiDataFromLightbox(lightboxWrapper: Element): AddEmojiButtonData[] {\n  const results: AddEmojiButtonData[] = []\n\n  const anchor = lightboxWrapper.querySelector('a.lightbox') as HTMLAnchorElement | null\n  const img = lightboxWrapper.querySelector('img') as HTMLImageElement | null\n\n  if (!anchor || !img) return results\n\n  const title = anchor.getAttribute('title') || ''\n  const originalUrl = anchor.getAttribute('href') || ''\n  const downloadUrl = anchor.getAttribute('data-download-href') || ''\n  const imgSrc = img.getAttribute('src') || ''\n\n  // 提取图片名称\n  let name = title || img.getAttribute('alt') || ''\n  if (!name || name.length < 2) {\n    // 从URL中提取文件名\n    const urlToUse = originalUrl || downloadUrl || imgSrc\n    name = extractNameFromUrl(urlToUse)\n  }\n\n  // 清理名称，移除文件扩展名\n  name = name.replace(/\\.(webp|jpg|jpeg|png|gif)$/i, '').trim()\n  if (name.length === 0) {\n    name = '表情'\n  }\n\n  // 优先使用原始URL，然后是下载URL，最后是图片src\n  const urlToUse = originalUrl || downloadUrl || imgSrc\n  if (urlToUse && urlToUse.startsWith('http')) {\n    results.push({\n      name,\n      url: urlToUse\n    })\n  }\n\n  return results\n}\n\n/**\n * 创建一键解析按钮。\n * @param cookedElement cooked 元素\n * @returns 创建的按钮元素\n */\nfunction createBatchParseButton(cookedElement: Element): HTMLElement {\n  const button = document.createElement('button')\n  button.className = 'emoji-batch-parse-button'\n  button.style.cssText = `\n    display: inline-flex;\n    align-items: center;\n    gap: 6px;\n    background: linear-gradient(135deg, #f59e0b, #d97706);\n    color: #ffffff;\n    border: none;\n    border-radius: 8px;\n    padding: 8px 12px;\n    font-size: 14px;\n    font-weight: 600;\n    cursor: pointer;\n    margin: 10px 0;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    transition: all 0.2s ease;\n    z-index: 1000;\n    position: relative;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  `\n\n  button.innerHTML = `\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\n    </svg>\n    一键解析并添加所有图片\n  `\n\n  button.title = '解析当前内容中的所有图片并添加到未分组表情'\n\n  // 添加hover效果\n  button.addEventListener('mouseenter', () => {\n    if (!button.innerHTML.includes('已处理') && !button.innerHTML.includes('失败')) {\n      button.style.background = 'linear-gradient(135deg, #d97706, #b45309)'\n      button.style.transform = 'translateY(-1px)'\n      button.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.15)'\n    }\n  })\n\n  button.addEventListener('mouseleave', () => {\n    if (!button.innerHTML.includes('已处理') && !button.innerHTML.includes('失败')) {\n      button.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)'\n      button.style.transform = 'translateY(0)'\n      button.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.1)'\n    }\n  })\n\n  // 添加点击事件\n  button.addEventListener('click', async e => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    // 保存按钮原始内容和样式\n    const originalContent = button.innerHTML\n    const originalStyle = button.style.cssText\n\n    try {\n      // 显示处理中状态\n      button.innerHTML = `\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"animation: spin 1s linear infinite;\">\n          <path d=\"M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z\"/>\n        </svg>\n        正在解析...\n      `\n      button.style.background = 'linear-gradient(135deg, #6b7280, #4b5563)'\n      button.disabled = true\n\n      // 查找所有lightbox-wrapper\n      const lightboxWrappers = cookedElement.querySelectorAll('.lightbox-wrapper')\n      const allEmojiData: AddEmojiButtonData[] = []\n\n      lightboxWrappers.forEach(wrapper => {\n        const emojiDataArray = extractEmojiDataFromLightbox(wrapper)\n        allEmojiData.push(...emojiDataArray)\n      })\n\n      if (allEmojiData.length === 0) {\n        throw new Error('未找到可解析的图片')\n      }\n\n      // 批量添加表情\n      let successCount = 0\n      let failCount = 0\n\n      for (const emojiData of allEmojiData) {\n        try {\n          await chrome.runtime.sendMessage({\n            action: 'addEmojiFromWeb',\n            emojiData: emojiData\n          })\n          successCount++\n        } catch (error) {\n          console.error('[OneClickAdd] 添加表情失败:', emojiData.name, error)\n          failCount++\n        }\n      }\n\n      // 显示成功状态\n      button.innerHTML = `\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n          <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n        </svg>\n        已处理 ${successCount}/${allEmojiData.length} 张图片\n      `\n      button.style.background = 'linear-gradient(135deg, #10b981, #059669)'\n      button.style.color = '#ffffff'\n\n      // 3秒后恢复按钮状态\n      setTimeout(() => {\n        button.innerHTML = originalContent\n        button.style.cssText = originalStyle\n        button.disabled = false\n      }, 3000)\n    } catch (error) {\n      console.error('[OneClickAdd] 批量解析失败:', error)\n\n      // 显示失败状态\n      button.innerHTML = `\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n          <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n        </svg>\n        解析失败\n      `\n      button.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)'\n      button.style.color = '#ffffff'\n\n      // 3秒后恢复按钮状态\n      setTimeout(() => {\n        button.innerHTML = originalContent\n        button.style.cssText = originalStyle\n        button.disabled = false\n      }, 3000)\n    }\n  })\n\n  return button\n}\n\n/**\n * 为 cooked 内容区域添加一键解析按钮。\n * @param cookedElement cooked 元素\n */\nfunction addBatchParseButtonToCooked(cookedElement: Element) {\n  // 检查是否已经添加过按钮，避免重复注入\n  if (cookedElement.querySelector('.emoji-batch-parse-button')) {\n    return\n  }\n\n  // 检查是否有lightbox-wrapper\n  const lightboxWrappers = cookedElement.querySelectorAll('.lightbox-wrapper')\n  if (lightboxWrappers.length === 0) {\n    return\n  }\n\n  // 创建按钮\n  const button = createBatchParseButton(cookedElement)\n\n  // 在cooked元素的开头插入按钮\n  const firstChild = cookedElement.firstChild\n  if (firstChild) {\n    cookedElement.insertBefore(button, firstChild)\n  } else {\n    cookedElement.appendChild(button)\n  }\n}\n\n/**\n * 扫描页面中所有 cooked 内容区域，并为它们添加一键解析按钮。\n */\nfunction scanForCookedContent() {\n  const cookedElements = document.querySelectorAll('.cooked')\n\n  cookedElements.forEach(element => {\n    if (isCookedContent(element)) {\n      addBatchParseButtonToCooked(element)\n    }\n  })\n}\n\n/**\n * 监听 DOM 变化，当 cooked 内容出现时自动执行扫描。\n */\nfunction observeCookedContent() {\n  const observer = new MutationObserver(mutations => {\n    let hasCookedChanges = false\n\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        // 检查是否有新的节点被添加，并且是 cooked 相关的\n        mutation.addedNodes.forEach(node => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            const element = node as Element\n            // 检查元素本身或其子元素是否包含cooked\n            if (element.classList && element.classList.contains('cooked')) {\n              hasCookedChanges = true\n            } else if (element.querySelector && element.querySelector('.cooked')) {\n              hasCookedChanges = true\n            }\n          }\n        })\n      }\n    })\n\n    if (hasCookedChanges) {\n      // 短暂延迟以确保DOM完全更新，然后执行扫描\n      setTimeout(scanForCookedContent, 100)\n    }\n  })\n\n  // 监听 body 的子节点变化，包括子树\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  })\n}\n\n/**\n * 初始化一键添加功能。\n */\nexport function initOneClickAdd() {\n  console.log('[OneClickAdd] 初始化一键添加表情功能（支持 Magnific Popup 和 cooked 内容）')\n\n  // 注入CSS动画\n  injectCSSAnimation()\n\n  // 初始扫描 Magnific Popup\n  setTimeout(scanForMagnificPopup, 500)\n\n  // 初始扫描 cooked 内容\n  setTimeout(scanForCookedContent, 600)\n\n  // 监听 DOM 变化\n  observeMagnificPopup()\n  observeCookedContent()\n\n  // 监听页面可见性变化，当页面重新变为可见时再次扫描\n  document.addEventListener('visibilitychange', () => {\n    if (!document.hidden) {\n      setTimeout(scanForMagnificPopup, 200)\n      setTimeout(scanForCookedContent, 300)\n    }\n  })\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\picker.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 67,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 67,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2656, 2659], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2656, 2659], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 119,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 119,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4606, 4609], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4606, 4609], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5181, 5184], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5181, 5184], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 158,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 158,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5815, 5818], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5815, 5818], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 161,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 161,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5959, 5962], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5959, 5962], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 244,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 244,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9195, 9198], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9195, 9198], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 293,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 293,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11104, 11107], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11104, 11107], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 312,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 312,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11765, 11768], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11765, 11768], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 330,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 330,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12267, 12270], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12267, 12270], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { cachedState } from './state'\nimport { insertEmojiIntoEditor } from './editor'\nimport { ensureDefaultIfEmpty } from './storage'\nimport { logger } from './buildFlags'\n\n// Inline isImageUrl function to avoid external import\nfunction isImageUrl(value: string | null | undefined): boolean {\n  if (!value || typeof value !== 'string') return false\n  try {\n    const url = new URL(value)\n    const pathname = url.pathname.toLowerCase()\n    return /\\.(jpg|jpeg|png|gif|bmp|webp|svg|ico)(\\?.*)?$/i.test(pathname)\n  } catch {\n    return false\n  }\n}\nexport const isMobile = (): boolean => {\n  const userAgent = navigator.userAgent\n  const mobileKeywords = ['Android', 'iPhone', 'iPad', 'iPod', 'Windows Phone']\n  return mobileKeywords.some(keyword => userAgent.includes(keyword))\n}\n\nexport async function createEmojiPicker(isMobileView: boolean): Promise<HTMLElement> {\n  logger.log('[Emoji Extension] Creating picker for isMobileView:', isMobileView)\n  if (isMobileView) {\n    return createMobileEmojiPicker()\n  }\n  return createDesktopEmojiPicker()\n}\n\nasync function createDesktopEmojiPicker(): Promise<HTMLElement> {\n  ensureDefaultIfEmpty()\n  const groupsToUse = cachedState.emojiGroups\n\n  const picker = document.createElement('div')\n  picker.className = 'fk-d-menu -animated -expanded'\n  picker.setAttribute('data-identifier', 'emoji-picker')\n  picker.setAttribute('role', 'dialog')\n  picker.style.cssText = 'max-width: 400px; visibility: visible; z-index: 999999;'\n\n  const innerContent = document.createElement('div')\n  innerContent.className = 'fk-d-menu__inner-content'\n  const emojiPickerDiv = document.createElement('div')\n  emojiPickerDiv.className = 'emoji-picker'\n\n  const filterContainer = document.createElement('div')\n  filterContainer.className = 'emoji-picker__filter-container'\n  const filterDiv = document.createElement('div')\n  filterDiv.className = 'emoji-picker__filter filter-input-container'\n  const searchInput = document.createElement('input')\n  searchInput.className = 'filter-input'\n  searchInput.placeholder = '按表情符号名称搜索…'\n  searchInput.type = 'text'\n  filterDiv.appendChild(searchInput)\n  filterContainer.appendChild(filterDiv)\n\n  const content = document.createElement('div')\n  content.className = 'emoji-picker__content'\n  const sectionsNav = document.createElement('div')\n  sectionsNav.className = 'emoji-picker__sections-nav'\n  const scrollableContent = document.createElement('div')\n  scrollableContent.className = 'emoji-picker__scrollable-content'\n  const sections = document.createElement('div')\n  sections.className = 'emoji-picker__sections'\n  sections.setAttribute('role', 'button')\n\n  groupsToUse.forEach((group: any, index: number) => {\n    if (!group?.emojis?.length) return\n\n    const navButton = document.createElement('button')\n    navButton.className = `btn no-text btn-flat emoji-picker__section-btn ${\n      index === 0 ? 'active' : ''\n    }`\n    navButton.setAttribute('tabindex', '-1')\n    navButton.setAttribute('data-section', group.id)\n    navButton.type = 'button'\n\n    const iconVal = group.icon || '📁'\n    if (isImageUrl(iconVal)) {\n      const img = document.createElement('img')\n      img.src = iconVal\n      img.alt = group.name || ''\n      img.className = 'emoji-group-icon'\n      img.style.width = '18px'\n      img.style.height = '18px'\n      img.style.objectFit = 'contain'\n      navButton.appendChild(img)\n    } else {\n      navButton.textContent = String(iconVal)\n    }\n    navButton.title = group.name\n    navButton.addEventListener('click', () => {\n      sectionsNav\n        .querySelectorAll('.emoji-picker__section-btn')\n        .forEach(btn => btn.classList.remove('active'))\n      navButton.classList.add('active')\n      const target = sections.querySelector(`[data-section=\"${group.id}\"]`)\n      if (target) target.scrollIntoView({ behavior: 'smooth', block: 'start' })\n    })\n    sectionsNav.appendChild(navButton)\n\n    const section = document.createElement('div')\n    section.className = 'emoji-picker__section'\n    section.setAttribute('data-section', group.id)\n    section.setAttribute('role', 'region')\n    section.setAttribute('aria-label', group.name)\n\n    const titleContainer = document.createElement('div')\n    titleContainer.className = 'emoji-picker__section-title-container'\n    const title = document.createElement('h2')\n    title.className = 'emoji-picker__section-title'\n    title.textContent = group.name\n    titleContainer.appendChild(title)\n\n    const sectionEmojis = document.createElement('div')\n    sectionEmojis.className = 'emoji-picker__section-emojis'\n\n    let added = 0\n    group.emojis.forEach((emoji: any) => {\n      if (!emoji || typeof emoji !== 'object' || !emoji.url || !emoji.name) return\n      const img = document.createElement('img')\n      img.width = 32\n      img.height = 32\n      img.className = 'emoji'\n      img.src = emoji.url\n      img.setAttribute('tabindex', '0')\n      img.setAttribute('data-emoji', emoji.name)\n      img.alt = emoji.name\n      img.title = `:${emoji.name}:`\n      img.loading = 'lazy'\n      img.addEventListener('click', () => {\n        insertEmojiIntoEditor(emoji)\n        picker.remove()\n      })\n      img.addEventListener('keydown', (e: any) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault()\n          insertEmojiIntoEditor(emoji)\n          picker.remove()\n        }\n      })\n      sectionEmojis.appendChild(img)\n      added++\n    })\n\n    if (added === 0) {\n      const msg = document.createElement('div')\n      msg.textContent = `${group.name} 组暂无有效表情`\n      msg.style.cssText = 'padding: 20px; text-align: center; color: #999;'\n      sectionEmojis.appendChild(msg)\n    }\n\n    section.appendChild(titleContainer)\n    section.appendChild(sectionEmojis)\n    sections.appendChild(section)\n  })\n\n  searchInput.addEventListener('input', (e: any) => {\n    const q = (e.target.value || '').toLowerCase()\n    const allImages = sections.querySelectorAll('img')\n    allImages.forEach((img: any) => {\n      const emojiName = img.getAttribute('data-emoji')?.toLowerCase() || ''\n      ;(img as HTMLElement).style.display = q === '' || emojiName.includes(q) ? '' : 'none'\n    })\n    sections.querySelectorAll('.emoji-picker__section').forEach(section => {\n      const visibleEmojis = section.querySelectorAll('img:not([style*=\"none\"])')\n      const titleContainer = section.querySelector('.emoji-picker__section-title-container')\n      if (titleContainer)\n        (titleContainer as HTMLElement).style.display = visibleEmojis.length > 0 ? '' : 'none'\n    })\n  })\n\n  scrollableContent.appendChild(sections)\n  content.appendChild(sectionsNav)\n  content.appendChild(scrollableContent)\n  emojiPickerDiv.appendChild(filterContainer)\n  emojiPickerDiv.appendChild(content)\n  innerContent.appendChild(emojiPickerDiv)\n  picker.appendChild(innerContent)\n\n  return picker\n}\n\nasync function createMobileEmojiPicker(): Promise<HTMLElement> {\n  ensureDefaultIfEmpty()\n  const groupsToUse = cachedState.emojiGroups\n\n  const modal = document.createElement('div')\n  modal.className = 'modal d-modal fk-d-menu-modal emoji-picker-content'\n  modal.setAttribute('data-keyboard', 'false')\n  modal.setAttribute('aria-modal', 'true')\n  modal.setAttribute('role', 'dialog')\n  modal.setAttribute('data-identifier', 'emoji-picker')\n\n  const modalContainerDiv = document.createElement('div')\n  modalContainerDiv.className = 'd-modal__container'\n\n  const modalBody = document.createElement('div')\n  modalBody.className = 'd-modal__body'\n  modalBody.tabIndex = -1\n\n  const emojiPickerDiv = document.createElement('div')\n  emojiPickerDiv.className = 'emoji-picker'\n\n  const filterContainer = document.createElement('div')\n  filterContainer.className = 'emoji-picker__filter-container'\n\n  const filterInputContainer = document.createElement('div')\n  filterInputContainer.className = 'emoji-picker__filter filter-input-container'\n\n  const searchInput = document.createElement('input')\n  searchInput.className = 'filter-input'\n  searchInput.placeholder = '按表情符号名称和别名搜索…'\n  searchInput.type = 'text'\n  filterInputContainer.appendChild(searchInput)\n\n  const closeButton = document.createElement('button')\n  closeButton.className = 'btn no-text btn-icon btn-transparent emoji-picker__close-btn'\n  closeButton.type = 'button'\n  closeButton.innerHTML = `<svg class=\"fa d-icon d-icon-xmark svg-icon svg-string\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#xmark\"></use></svg>`\n  closeButton.addEventListener('click', () => {\n    const modalContainer = modal.closest('.modal-container')\n    if (modalContainer) {\n      modalContainer.remove()\n    }\n  })\n\n  filterContainer.appendChild(filterInputContainer)\n  filterContainer.appendChild(closeButton)\n\n  const content = document.createElement('div')\n  content.className = 'emoji-picker__content'\n\n  const sectionsNav = document.createElement('div')\n  sectionsNav.className = 'emoji-picker__sections-nav'\n\n  const scrollableContent = document.createElement('div')\n  scrollableContent.className = 'emoji-picker__scrollable-content'\n\n  const sections = document.createElement('div')\n  sections.className = 'emoji-picker__sections'\n  sections.setAttribute('role', 'button')\n\n  groupsToUse.forEach((group: any, index: number) => {\n    if (!group?.emojis?.length) return\n\n    const navButton = document.createElement('button')\n    navButton.className = `btn no-text btn-flat emoji-picker__section-btn ${index === 0 ? 'active' : ''}`\n    navButton.setAttribute('tabindex', '-1')\n    navButton.setAttribute('data-section', group.id)\n    navButton.type = 'button'\n\n    const iconVal = group.icon || '📁'\n    if (isImageUrl(iconVal)) {\n      const img = document.createElement('img')\n      img.src = iconVal\n      img.alt = group.name || ''\n      img.className = 'emoji'\n      img.style.width = '18px'\n      img.style.height = '18px'\n      img.style.objectFit = 'contain'\n      navButton.appendChild(img)\n    } else {\n      navButton.textContent = String(iconVal)\n    }\n    navButton.title = group.name\n    navButton.addEventListener('click', () => {\n      sectionsNav\n        .querySelectorAll('.emoji-picker__section-btn')\n        .forEach(btn => btn.classList.remove('active'))\n      navButton.classList.add('active')\n      const target = sections.querySelector(`[data-section=\"${group.id}\"]`)\n      if (target) target.scrollIntoView({ behavior: 'smooth', block: 'start' })\n    })\n    sectionsNav.appendChild(navButton)\n\n    const section = document.createElement('div')\n    section.className = 'emoji-picker__section'\n    section.setAttribute('data-section', group.id)\n    section.setAttribute('role', 'region')\n    section.setAttribute('aria-label', group.name)\n\n    const titleContainer = document.createElement('div')\n    titleContainer.className = 'emoji-picker__section-title-container'\n    const title = document.createElement('h2')\n    title.className = 'emoji-picker__section-title'\n    title.textContent = group.name\n    titleContainer.appendChild(title)\n\n    const sectionEmojis = document.createElement('div')\n    sectionEmojis.className = 'emoji-picker__section-emojis'\n\n    group.emojis.forEach((emoji: any) => {\n      if (!emoji || typeof emoji !== 'object' || !emoji.url || !emoji.name) return\n      const img = document.createElement('img')\n      img.width = 32\n      img.height = 32\n      img.className = 'emoji'\n      img.src = emoji.url\n      img.tabIndex = 0\n      img.dataset.emoji = emoji.name\n      img.alt = emoji.name\n      img.title = `:${emoji.name}:`\n      img.loading = 'lazy'\n      img.addEventListener('click', () => {\n        insertEmojiIntoEditor(emoji)\n        const modalContainer = modal.closest('.modal-container')\n        if (modalContainer) {\n          modalContainer.remove()\n        }\n      })\n      img.addEventListener('keydown', (e: any) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault()\n          insertEmojiIntoEditor(emoji)\n          const modalContainer = modal.closest('.modal-container')\n          if (modalContainer) {\n            modalContainer.remove()\n          }\n        }\n      })\n      sectionEmojis.appendChild(img)\n    })\n\n    section.appendChild(titleContainer)\n    section.appendChild(sectionEmojis)\n    sections.appendChild(section)\n  })\n\n  searchInput.addEventListener('input', (e: any) => {\n    const q = (e.target.value || '').toLowerCase()\n    sections.querySelectorAll('img').forEach(img => {\n      const emojiName = (img.dataset.emoji || '').toLowerCase()\n      ;(img as HTMLElement).style.display = q === '' || emojiName.includes(q) ? '' : 'none'\n    })\n    sections.querySelectorAll('.emoji-picker__section').forEach(section => {\n      const visibleEmojis = section.querySelectorAll('img:not([style*=\"display: none\"])')\n      ;(section as HTMLElement).style.display = visibleEmojis.length > 0 ? '' : 'none'\n    })\n  })\n\n  scrollableContent.appendChild(sections)\n  content.appendChild(sectionsNav)\n  content.appendChild(scrollableContent)\n  emojiPickerDiv.appendChild(filterContainer)\n  emojiPickerDiv.appendChild(content)\n  modalBody.appendChild(emojiPickerDiv)\n  modalContainerDiv.appendChild(modalBody)\n  modal.appendChild(modalContainerDiv)\n\n  return modal\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\state.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [133, 136], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [133, 136], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { AppSettings } from '../types/emoji'\n\n// Shared mutable state for content scripts\nexport const cachedState: {\n  emojiGroups: any[]\n  settings: AppSettings\n} = {\n  emojiGroups: [],\n  settings: {\n    imageScale: 30,\n    gridColumns: 4,\n    outputFormat: 'markdown',\n    forceMobileMode: false,\n    defaultGroup: 'nachoneko',\n    showSearchBar: true\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\storage.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [126, 129], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [126, 129], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [140, 143], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [140, 143], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [221, 224], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [221, 224], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [255, 258], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [255, 258], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [297, 300], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [297, 300], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [359, 362], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [359, 362], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [411, 414], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [411, 414], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 26,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 26,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [760, 830], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 33,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 33,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1051, 1137], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 38,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 38,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1282, 1285], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1282, 1285], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 47,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 47,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [1562, 1717], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 51,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 51,
        "endColumn": 23,
        "suggestions": [
          {
            "fix": { "range": [1745, 1877], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 57,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 57,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [1950, 2070], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 65,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 65,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [2251, 2340], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 68,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 68,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [2368, 2480], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 83,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 83,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2808, 2811], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2808, 2811], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 87,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 87,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2895, 3098], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 93,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 93,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3123, 3205], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 18,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { cachedState } from './state'\nimport { getDefaultEmojis } from './default'\n\nfunction sendMessageToBackground(message: any): Promise<any> {\n  return new Promise(resolve => {\n    try {\n      if (\n        (window as any).chrome &&\n        (window as any).chrome.runtime &&\n        (window as any).chrome.runtime.sendMessage\n      ) {\n        ;(window as any).chrome.runtime.sendMessage(message, (response: any) => {\n          resolve(response)\n        })\n      } else {\n        resolve({ success: false, error: 'chrome.runtime.sendMessage not available' })\n      }\n    } catch (e) {\n      resolve({ success: false, error: e instanceof Error ? e.message : String(e) })\n    }\n  })\n}\n\nexport async function loadDataFromStorage(): Promise<void> {\n  try {\n    console.log('[Emoji Extension] Requesting emoji data from background')\n    const resp = await sendMessageToBackground({ type: 'GET_EMOJI_DATA' })\n\n    if (resp && resp.success && resp.data) {\n      const groups = resp.data.groups || []\n      const settings = resp.data.settings || {}\n\n      console.log('[Emoji Extension] Received groups from background:', groups?.length || 0)\n\n      if (Array.isArray(groups) && groups.length > 0) {\n        let validGroups = 0\n        let totalEmojis = 0\n        groups.forEach((group: any) => {\n          if (group && group.emojis && Array.isArray(group.emojis)) {\n            validGroups++\n            totalEmojis += group.emojis.length\n          }\n        })\n\n        if (validGroups > 0 && totalEmojis > 0) {\n          cachedState.emojiGroups = groups\n          console.log(\n            `[Emoji Extension] Successfully loaded ${validGroups} valid groups with ${totalEmojis} total emojis (from background)`\n          )\n        } else {\n          console.warn(\n            '[Emoji Extension] Groups exist but contain no valid emojis, using defaults (from background)'\n          )\n          cachedState.emojiGroups = []\n        }\n      } else {\n        console.warn(\n          '[Emoji Extension] No valid emoji groups found in background response, using defaults'\n        )\n        cachedState.emojiGroups = []\n      }\n\n      if (settings && typeof settings === 'object') {\n        cachedState.settings = { ...cachedState.settings, ...settings }\n        console.log('[Emoji Extension] Loaded settings (from background):', cachedState.settings)\n      }\n    } else {\n      console.warn(\n        '[Emoji Extension] Background did not return emoji data, falling back to defaults'\n      )\n      cachedState.emojiGroups = []\n      cachedState.settings = {\n        imageScale: 30,\n        gridColumns: 4,\n        outputFormat: 'markdown',\n        forceMobileMode: false,\n        defaultGroup: 'nachoneko',\n        showSearchBar: true\n      }\n    }\n\n    let finalEmojisCount = 0\n    cachedState.emojiGroups.forEach((g: any) => {\n      if (g?.emojis?.length) finalEmojisCount += g.emojis.length\n    })\n\n    console.log('[Emoji Extension] Final cache state (from background):', {\n      groupsCount: cachedState.emojiGroups.length,\n      emojisCount: finalEmojisCount,\n      settings: cachedState.settings\n    })\n  } catch (error) {\n    console.error('[Emoji Extension] Failed to load from background (module):', error)\n    cachedState.emojiGroups = []\n    cachedState.settings = {\n      imageScale: 30,\n      gridColumns: 4,\n      outputFormat: 'markdown',\n      forceMobileMode: false,\n      defaultGroup: 'nachoneko',\n      showSearchBar: true\n    }\n  }\n}\n\nexport function ensureDefaultIfEmpty() {\n  if (!Array.isArray(cachedState.emojiGroups) || cachedState.emojiGroups.length === 0) {\n    const defaultEmojis = getDefaultEmojis()\n    cachedState.emojiGroups = [\n      { id: 'default', name: '默认表情', icon: '😀', order: 0, emojis: defaultEmojis }\n    ]\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\content\\uploader.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 25,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 25,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [782, 805], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'value' is defined but never used.",
        "line": 89,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "value" },
            "fix": { "range": [2325, 2346], "text": "" },
            "desc": "Remove unused variable 'value'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 90,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "error" },
            "fix": { "range": [2367, 2377], "text": "" },
            "desc": "Remove unused variable 'error'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 90,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 90,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2374, 2377], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2374, 2377], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 93,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 93,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2475, 2478], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2475, 2478], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 163,
        "column": 20,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 163,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 175,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 175,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4819, 4822], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4819, 4822], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 200,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 200,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5473, 5476], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5473, 5476], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 558,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 558,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 558,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 558,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 888,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 888,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23500, 23503], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23500, 23503], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-alert",
        "severity": 1,
        "message": "Unexpected alert.",
        "line": 915,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "unexpected",
        "endLine": 915,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 939,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 939,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25034, 25037], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25034, 25037], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logger } from './buildFlags'\n\n// Function to parse image filenames from markdown text\nfunction parseImageFilenamesFromMarkdown(markdownText: string): string[] {\n  const imageRegex = /!\\[([^\\]]*)\\]\\([^)]+\\)/g\n  const filenames: string[] = []\n  let match\n\n  while ((match = imageRegex.exec(markdownText)) !== null) {\n    const filename = match[1]\n    if (filename && filename.trim()) {\n      filenames.push(filename.trim())\n    }\n  }\n\n  return filenames\n}\n\n// Generic function to insert text into editor\nfunction insertIntoEditor(text: string) {\n  const textArea = document.querySelector('textarea.d-editor-input') as HTMLTextAreaElement | null\n  const richEle = document.querySelector('.ProseMirror.d-editor-input') as HTMLElement | null\n\n  if (!textArea && !richEle) {\n    console.error('找不到输入框')\n    return\n  }\n\n  if (textArea) {\n    const start = textArea.selectionStart\n    const end = textArea.selectionEnd\n    const value = textArea.value\n\n    textArea.value = value.substring(0, start) + text + value.substring(end)\n    textArea.setSelectionRange(start + text.length, start + text.length)\n    textArea.focus()\n\n    // Trigger input event to notify any listeners\n    const event = new Event('input', { bubbles: true })\n    textArea.dispatchEvent(event)\n  } else if (richEle) {\n    // For rich text editor, insert at current cursor position\n    const selection = window.getSelection()\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0)\n      const textNode = document.createTextNode(text)\n      range.insertNode(textNode)\n\n      // Move cursor after inserted text\n      range.setStartAfter(textNode)\n      range.setEndAfter(textNode)\n      selection.removeAllRanges()\n      selection.addRange(range)\n    }\n    richEle.focus()\n  }\n}\n\ninterface UploadResponse {\n  id: number\n  url: string\n  original_filename: string\n  filesize: number\n  width: number\n  height: number\n  thumbnail_width: number\n  thumbnail_height: number\n  extension: string\n  short_url: string\n  short_path: string\n  retain_hours: null\n  human_filesize: string\n  dominant_color: string\n  thumbnail: null\n}\n\ninterface UploadError {\n  errors: string[]\n  error_type: string\n  extras?: {\n    wait_seconds: number\n    time_left: string\n  }\n}\n\ninterface UploadQueueItem {\n  id: string\n  file: File\n  resolve: (value: UploadResponse) => void\n  reject: (error: any) => void\n  retryCount: number\n  status: 'waiting' | 'uploading' | 'failed' | 'success'\n  error?: any\n  result?: UploadResponse\n  timestamp: number\n}\n\nclass ImageUploader {\n  private waitingQueue: UploadQueueItem[] = []\n  private uploadingQueue: UploadQueueItem[] = []\n  private failedQueue: UploadQueueItem[] = []\n  private successQueue: UploadQueueItem[] = []\n  private isProcessing = false\n  private maxRetries = 2 // Second failure stops retry\n  private progressDialog: HTMLElement | null = null\n\n  async uploadImage(file: File): Promise<UploadResponse> {\n    return new Promise((resolve, reject) => {\n      const item: UploadQueueItem = {\n        id: `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        file,\n        resolve,\n        reject,\n        retryCount: 0,\n        status: 'waiting',\n        timestamp: Date.now()\n      }\n\n      this.waitingQueue.push(item)\n      this.updateProgressDialog()\n      this.processQueue()\n    })\n  }\n\n  private moveToQueue(\n    item: UploadQueueItem,\n    targetStatus: 'waiting' | 'uploading' | 'failed' | 'success'\n  ) {\n    // Remove from all queues\n    this.waitingQueue = this.waitingQueue.filter(i => i.id !== item.id)\n    this.uploadingQueue = this.uploadingQueue.filter(i => i.id !== item.id)\n    this.failedQueue = this.failedQueue.filter(i => i.id !== item.id)\n    this.successQueue = this.successQueue.filter(i => i.id !== item.id)\n\n    // Add to target queue\n    item.status = targetStatus\n    switch (targetStatus) {\n      case 'waiting':\n        this.waitingQueue.push(item)\n        break\n      case 'uploading':\n        this.uploadingQueue.push(item)\n        break\n      case 'failed':\n        this.failedQueue.push(item)\n        break\n      case 'success':\n        this.successQueue.push(item)\n        break\n    }\n\n    this.updateProgressDialog()\n  }\n\n  private async processQueue() {\n    if (this.isProcessing || this.waitingQueue.length === 0) {\n      return\n    }\n\n    this.isProcessing = true\n\n    while (this.waitingQueue.length > 0) {\n      const item = this.waitingQueue.shift()!\n      this.moveToQueue(item, 'uploading')\n\n      try {\n        const result = await this.performUpload(item.file)\n        item.result = result\n        this.moveToQueue(item, 'success')\n        item.resolve(result)\n\n        // Insert into editor\n        const markdown = `![${result.original_filename}](${result.url})`\n        insertIntoEditor(markdown)\n      } catch (error: any) {\n        item.error = error\n\n        if (this.shouldRetry(error, item)) {\n          item.retryCount++\n\n          if (error.error_type === 'rate_limit' && error.extras?.wait_seconds) {\n            // Wait for rate limit before retry\n            await this.sleep(error.extras.wait_seconds * 1000)\n          } else {\n            // Wait before retry\n            await this.sleep(Math.pow(2, item.retryCount) * 1000)\n          }\n\n          this.moveToQueue(item, 'waiting')\n        } else {\n          this.moveToQueue(item, 'failed')\n          item.reject(error)\n        }\n      }\n    }\n\n    this.isProcessing = false\n  }\n\n  private shouldRetry(error: any, item: UploadQueueItem): boolean {\n    if (item.retryCount >= this.maxRetries) {\n      return false\n    }\n\n    // Only retry 429 (rate limit) errors automatically\n    return error.error_type === 'rate_limit'\n  }\n\n  // Method to manually retry failed items\n  retryFailedItem(itemId: string) {\n    const item = this.failedQueue.find(i => i.id === itemId)\n    if (item && item.retryCount < this.maxRetries) {\n      item.retryCount++\n      this.moveToQueue(item, 'waiting')\n      this.processQueue()\n    }\n  }\n\n  showProgressDialog() {\n    if (this.progressDialog) {\n      return // Already showing\n    }\n\n    this.progressDialog = this.createProgressDialog()\n    document.body.appendChild(this.progressDialog)\n  }\n\n  hideProgressDialog() {\n    if (this.progressDialog) {\n      this.progressDialog.remove()\n      this.progressDialog = null\n    }\n  }\n\n  private updateProgressDialog() {\n    if (!this.progressDialog) {\n      return\n    }\n\n    const allItems = [\n      ...this.waitingQueue,\n      ...this.uploadingQueue,\n      ...this.failedQueue,\n      ...this.successQueue\n    ]\n\n    this.renderQueueItems(this.progressDialog, allItems)\n  }\n\n  private async sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  private createProgressDialog(): HTMLElement {\n    const dialog = document.createElement('div')\n    dialog.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      width: 350px;\n      max-height: 400px;\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n      z-index: 10000;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      border: 1px solid #e5e7eb;\n      overflow: hidden;\n    `\n\n    const header = document.createElement('div')\n    header.style.cssText = `\n      padding: 16px 20px;\n      background: #f9fafb;\n      border-bottom: 1px solid #e5e7eb;\n      font-weight: 600;\n      font-size: 14px;\n      color: #374151;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    `\n    header.textContent = '图片上传队列'\n\n    const closeButton = document.createElement('button')\n    closeButton.innerHTML = '✕'\n    closeButton.style.cssText = `\n      background: none;\n      border: none;\n      font-size: 16px;\n      cursor: pointer;\n      color: #6b7280;\n      padding: 4px;\n      border-radius: 4px;\n      transition: background-color 0.2s;\n    `\n    closeButton.addEventListener('click', () => {\n      this.hideProgressDialog()\n    })\n    closeButton.addEventListener('mouseenter', () => {\n      closeButton.style.backgroundColor = '#e5e7eb'\n    })\n    closeButton.addEventListener('mouseleave', () => {\n      closeButton.style.backgroundColor = 'transparent'\n    })\n\n    header.appendChild(closeButton)\n\n    const content = document.createElement('div')\n    content.className = 'upload-queue-content'\n    content.style.cssText = `\n      max-height: 320px;\n      overflow-y: auto;\n      padding: 12px;\n    `\n\n    dialog.appendChild(header)\n    dialog.appendChild(content)\n\n    return dialog\n  }\n\n  private renderQueueItems(dialog: HTMLElement, allItems: UploadQueueItem[]) {\n    const content = dialog.querySelector('.upload-queue-content')\n    if (!content) return\n\n    content.innerHTML = ''\n\n    if (allItems.length === 0) {\n      const emptyState = document.createElement('div')\n      emptyState.style.cssText = `\n        text-align: center;\n        color: #6b7280;\n        font-size: 14px;\n        padding: 20px;\n      `\n      emptyState.textContent = '暂无上传任务'\n      content.appendChild(emptyState)\n      return\n    }\n\n    allItems.forEach(item => {\n      const itemEl = document.createElement('div')\n      itemEl.style.cssText = `\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 8px 12px;\n        margin-bottom: 8px;\n        background: #f9fafb;\n        border-radius: 6px;\n        border-left: 4px solid ${this.getStatusColor(item.status)};\n      `\n\n      const leftSide = document.createElement('div')\n      leftSide.style.cssText = `\n        flex: 1;\n        min-width: 0;\n      `\n\n      const fileName = document.createElement('div')\n      fileName.style.cssText = `\n        font-size: 13px;\n        font-weight: 500;\n        color: #374151;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      `\n      fileName.textContent = item.file.name\n\n      const status = document.createElement('div')\n      status.style.cssText = `\n        font-size: 12px;\n        color: #6b7280;\n        margin-top: 2px;\n      `\n      status.textContent = this.getStatusText(item)\n\n      leftSide.appendChild(fileName)\n      leftSide.appendChild(status)\n\n      const rightSide = document.createElement('div')\n      rightSide.style.cssText = `\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      `\n\n      // Add retry button for failed items\n      if (item.status === 'failed' && item.retryCount < this.maxRetries) {\n        const retryButton = document.createElement('button')\n        retryButton.innerHTML = '🔄'\n        retryButton.style.cssText = `\n          background: none;\n          border: none;\n          cursor: pointer;\n          font-size: 14px;\n          padding: 4px;\n          border-radius: 4px;\n          transition: background-color 0.2s;\n        `\n        retryButton.title = '重试上传'\n        retryButton.addEventListener('click', () => {\n          this.retryFailedItem(item.id)\n        })\n        retryButton.addEventListener('mouseenter', () => {\n          retryButton.style.backgroundColor = '#e5e7eb'\n        })\n        retryButton.addEventListener('mouseleave', () => {\n          retryButton.style.backgroundColor = 'transparent'\n        })\n        rightSide.appendChild(retryButton)\n      }\n\n      const statusIcon = document.createElement('div')\n      statusIcon.style.cssText = `\n        font-size: 16px;\n      `\n      statusIcon.textContent = this.getStatusIcon(item.status)\n\n      rightSide.appendChild(statusIcon)\n\n      itemEl.appendChild(leftSide)\n      itemEl.appendChild(rightSide)\n\n      content.appendChild(itemEl)\n    })\n  }\n\n  private getStatusColor(status: string): string {\n    switch (status) {\n      case 'waiting':\n        return '#f59e0b'\n      case 'uploading':\n        return '#3b82f6'\n      case 'success':\n        return '#10b981'\n      case 'failed':\n        return '#ef4444'\n      default:\n        return '#6b7280'\n    }\n  }\n\n  private getStatusText(item: UploadQueueItem): string {\n    switch (item.status) {\n      case 'waiting':\n        return '等待上传'\n      case 'uploading':\n        return '正在上传...'\n      case 'success':\n        return '上传成功'\n      case 'failed':\n        if (item.error?.error_type === 'rate_limit') {\n          return `上传失败 - 请求过于频繁 (重试 ${item.retryCount}/${this.maxRetries})`\n        }\n        return `上传失败 (重试 ${item.retryCount}/${this.maxRetries})`\n      default:\n        return '未知状态'\n    }\n  }\n\n  private getStatusIcon(status: string): string {\n    switch (status) {\n      case 'waiting':\n        return '⏳'\n      case 'uploading':\n        return '📤'\n      case 'success':\n        return '✅'\n      case 'failed':\n        return '❌'\n      default:\n        return '❓'\n    }\n  }\n\n  private async performUpload(file: File): Promise<UploadResponse> {\n    // Calculate SHA1 checksum (simplified - using a placeholder)\n    const sha1 = await this.calculateSHA1(file)\n\n    // Create form data\n    const formData = new FormData()\n    formData.append('upload_type', 'composer')\n    formData.append('relativePath', 'null')\n    formData.append('name', file.name)\n    formData.append('type', file.type)\n    formData.append('sha1_checksum', sha1)\n    formData.append('file', file, file.name)\n\n    // Get CSRF token from meta tag or cookie\n    const csrfToken = this.getCSRFToken()\n\n    const headers: Record<string, string> = {\n      'X-Csrf-Token': csrfToken\n    }\n\n    // Add cookies if available\n    if (document.cookie) {\n      headers['Cookie'] = document.cookie\n    }\n\n    const response = await fetch(\n      `https://linux.do/uploads.json?client_id=f06cb5577ba9410d94b9faf94e48c2d8`,\n      {\n        method: 'POST',\n        headers,\n        body: formData\n      }\n    )\n\n    if (!response.ok) {\n      const errorData = (await response.json()) as UploadError\n      throw errorData\n    }\n\n    return (await response.json()) as UploadResponse\n  }\n\n  private getCSRFToken(): string {\n    // Try to get CSRF token from meta tag\n    const metaToken = document.querySelector('meta[name=\"csrf-token\"]') as HTMLMetaElement\n    if (metaToken) {\n      return metaToken.content\n    }\n\n    // Try to get from cookie\n    const match = document.cookie.match(/csrf_token=([^;]+)/)\n    if (match) {\n      return decodeURIComponent(match[1])\n    }\n\n    // Fallback - try to extract from any form\n    const hiddenInput = document.querySelector(\n      'input[name=\"authenticity_token\"]'\n    ) as HTMLInputElement\n    if (hiddenInput) {\n      return hiddenInput.value\n    }\n\n    logger.warn('[Image Uploader] No CSRF token found')\n    return ''\n  }\n\n  private async calculateSHA1(file: File): Promise<string> {\n    // Simplified SHA1 calculation - in a real implementation, you'd use crypto.subtle\n    // For now, return a placeholder based on file properties\n    const text = `${file.name}-${file.size}-${file.lastModified}`\n    const encoder = new TextEncoder()\n    const data = encoder.encode(text)\n\n    if (crypto.subtle) {\n      try {\n        const hashBuffer = await crypto.subtle.digest('SHA-1', data)\n        const hashArray = Array.from(new Uint8Array(hashBuffer))\n        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n      } catch (e) {\n        logger.warn('[Image Uploader] Could not calculate SHA1, using fallback')\n      }\n    }\n\n    // Fallback simple hash\n    let hash = 0\n    for (let i = 0; i < text.length; i++) {\n      const char = text.charCodeAt(i)\n      hash = (hash << 5) - hash + char\n      hash = hash & hash // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(16).padStart(40, '0')\n  }\n}\n\nconst uploader = new ImageUploader()\n\ninterface DragDropElements {\n  panel: HTMLElement\n  overlay: HTMLElement\n  dropZone: HTMLElement\n  fileInput: HTMLInputElement\n  closeButton: HTMLButtonElement\n  diffDropZone: HTMLElement\n  diffFileInput: HTMLInputElement\n  markdownTextarea: HTMLTextAreaElement\n}\n\nfunction createDragDropUploadPanel(): DragDropElements {\n  const panel = document.createElement('div')\n  panel.className = 'drag-drop-upload-panel'\n  panel.style.cssText = `\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 500px;\n    max-width: 90vw;\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n    z-index: 10000;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  `\n\n  const overlay = document.createElement('div')\n  overlay.style.cssText = `\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    z-index: 9999;\n  `\n\n  const header = document.createElement('div')\n  header.style.cssText = `\n    padding: 20px 24px 0;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  `\n\n  const title = document.createElement('h3')\n  title.textContent = '上传图片'\n  title.style.cssText = `\n    margin: 0;\n    font-size: 18px;\n    font-weight: 600;\n    color: #111827;\n  `\n\n  const closeButton = document.createElement('button')\n  closeButton.innerHTML = '✕'\n  closeButton.style.cssText = `\n    background: none;\n    border: none;\n    font-size: 20px;\n    cursor: pointer;\n    color: #6b7280;\n    padding: 4px;\n    border-radius: 4px;\n    transition: background-color 0.2s;\n  `\n  closeButton.addEventListener('mouseenter', () => {\n    closeButton.style.backgroundColor = '#f3f4f6'\n  })\n  closeButton.addEventListener('mouseleave', () => {\n    closeButton.style.backgroundColor = 'transparent'\n  })\n\n  header.appendChild(title)\n  header.appendChild(closeButton)\n\n  const content = document.createElement('div')\n  content.style.cssText = `\n    padding: 24px;\n  `\n\n  // Create tabs\n  const tabContainer = document.createElement('div')\n  tabContainer.style.cssText = `\n    display: flex;\n    border-bottom: 1px solid #e5e7eb;\n    margin-bottom: 20px;\n  `\n\n  const regularTab = document.createElement('button')\n  regularTab.textContent = '常规上传'\n  regularTab.style.cssText = `\n    flex: 1;\n    padding: 10px 20px;\n    background: none;\n    border: none;\n    border-bottom: 2px solid #3b82f6;\n    color: #3b82f6;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s;\n  `\n\n  const diffTab = document.createElement('button')\n  diffTab.textContent = '差分上传'\n  diffTab.style.cssText = `\n    flex: 1;\n    padding: 10px 20px;\n    background: none;\n    border: none;\n    border-bottom: 2px solid transparent;\n    color: #6b7280;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s;\n  `\n\n  tabContainer.appendChild(regularTab)\n  tabContainer.appendChild(diffTab)\n\n  // Regular upload panel\n  const regularPanel = document.createElement('div')\n  regularPanel.className = 'regular-upload-panel'\n  regularPanel.style.cssText = `\n    display: block;\n  `\n\n  const dropZone = document.createElement('div')\n  dropZone.className = 'drop-zone'\n  dropZone.style.cssText = `\n    border: 2px dashed #d1d5db;\n    border-radius: 8px;\n    padding: 40px 20px;\n    text-align: center;\n    background: #f9fafb;\n    transition: all 0.2s;\n    cursor: pointer;\n  `\n\n  const dropIcon = document.createElement('div')\n  dropIcon.innerHTML = '📁'\n  dropIcon.style.cssText = `\n    font-size: 48px;\n    margin-bottom: 16px;\n  `\n\n  const dropText = document.createElement('div')\n  dropText.innerHTML = `\n    <div style=\"font-size: 16px; font-weight: 500; color: #374151; margin-bottom: 8px;\">\n      拖拽图片到此处，或点击选择文件\n    </div>\n    <div style=\"font-size: 14px; color: #6b7280;\">\n      支持 JPG、PNG、GIF 等格式，最大 10MB\n    </div>\n  `\n\n  dropZone.appendChild(dropIcon)\n  dropZone.appendChild(dropText)\n\n  const fileInput = document.createElement('input')\n  fileInput.type = 'file'\n  fileInput.accept = 'image/*'\n  fileInput.multiple = true\n  fileInput.style.display = 'none'\n\n  regularPanel.appendChild(dropZone)\n  regularPanel.appendChild(fileInput)\n\n  // Diff upload panel\n  const diffPanel = document.createElement('div')\n  diffPanel.className = 'diff-upload-panel'\n  diffPanel.style.cssText = `\n    display: none;\n  `\n\n  const markdownTextarea = document.createElement('textarea')\n  markdownTextarea.placeholder = '请粘贴包含图片的markdown文本...'\n  markdownTextarea.style.cssText = `\n    width: 100%;\n    height: 120px;\n    padding: 12px;\n    border: 1px solid #d1d5db;\n    border-radius: 6px;\n    font-family: monospace;\n    font-size: 14px;\n    resize: vertical;\n    margin-bottom: 12px;\n    box-sizing: border-box;\n  `\n\n  const diffDropZone = document.createElement('div')\n  diffDropZone.className = 'diff-drop-zone'\n  diffDropZone.style.cssText = `\n    border: 2px dashed #d1d5db;\n    border-radius: 8px;\n    padding: 30px 20px;\n    text-align: center;\n    background: #f9fafb;\n    transition: all 0.2s;\n    cursor: pointer;\n    margin-bottom: 12px;\n  `\n\n  const diffDropIcon = document.createElement('div')\n  diffDropIcon.innerHTML = '📋'\n  diffDropIcon.style.cssText = `\n    font-size: 36px;\n    margin-bottom: 12px;\n  `\n\n  const diffDropText = document.createElement('div')\n  diffDropText.innerHTML = `\n    <div style=\"font-size: 16px; font-weight: 500; color: #374151; margin-bottom: 8px;\">\n      选择图片进行差分上传\n    </div>\n    <div style=\"font-size: 14px; color: #6b7280;\">\n      只会上传不在上方markdown文本中的图片\n    </div>\n  `\n\n  diffDropZone.appendChild(diffDropIcon)\n  diffDropZone.appendChild(diffDropText)\n\n  const diffFileInput = document.createElement('input')\n  diffFileInput.type = 'file'\n  diffFileInput.accept = 'image/*'\n  diffFileInput.multiple = true\n  diffFileInput.style.display = 'none'\n\n  diffPanel.appendChild(markdownTextarea)\n  diffPanel.appendChild(diffDropZone)\n  diffPanel.appendChild(diffFileInput)\n\n  content.appendChild(tabContainer)\n  content.appendChild(regularPanel)\n  content.appendChild(diffPanel)\n\n  panel.appendChild(header)\n  panel.appendChild(content)\n\n  // Tab switching logic\n  const switchToTab = (\n    activeTab: HTMLElement,\n    inactiveTab: HTMLElement,\n    activePanel: HTMLElement,\n    inactivePanel: HTMLElement\n  ) => {\n    activeTab.style.borderBottomColor = '#3b82f6'\n    activeTab.style.color = '#3b82f6'\n    inactiveTab.style.borderBottomColor = 'transparent'\n    inactiveTab.style.color = '#6b7280'\n    activePanel.style.display = 'block'\n    inactivePanel.style.display = 'none'\n  }\n\n  regularTab.addEventListener('click', () => {\n    switchToTab(regularTab, diffTab, regularPanel, diffPanel)\n  })\n\n  diffTab.addEventListener('click', () => {\n    switchToTab(diffTab, regularTab, diffPanel, regularPanel)\n  })\n\n  return {\n    panel,\n    overlay,\n    dropZone,\n    fileInput,\n    closeButton,\n    diffDropZone,\n    diffFileInput,\n    markdownTextarea\n  }\n}\n\nexport async function showImageUploadDialog(): Promise<void> {\n  return new Promise(resolve => {\n    const {\n      panel,\n      overlay,\n      dropZone,\n      fileInput,\n      closeButton,\n      diffDropZone,\n      diffFileInput,\n      markdownTextarea\n    } = createDragDropUploadPanel()\n\n    let isDragOver = false\n    let isDiffDragOver = false\n\n    const cleanup = () => {\n      document.body.removeChild(overlay)\n      document.body.removeChild(panel)\n      resolve()\n    }\n\n    const handleFiles = async (files: FileList) => {\n      if (!files || files.length === 0) return\n\n      cleanup()\n\n      // Show upload progress\n      uploader.showProgressDialog()\n\n      try {\n        const promises = Array.from(files).map(async file => {\n          try {\n            const result = await uploader.uploadImage(file)\n            return result\n          } catch (error: any) {\n            logger.error('[Image Uploader] Upload failed:', error)\n            throw error\n          }\n        })\n\n        await Promise.allSettled(promises)\n      } finally {\n        setTimeout(() => {\n          uploader.hideProgressDialog()\n        }, 3000)\n      }\n    }\n\n    const handleDiffFiles = async (files: FileList) => {\n      if (!files || files.length === 0) return\n\n      const markdownText = markdownTextarea.value\n      const existingFilenames = parseImageFilenamesFromMarkdown(markdownText)\n\n      // Filter files that are not in the existing list\n      const filesToUpload = Array.from(files).filter(file => {\n        const filename = file.name\n        return !existingFilenames.includes(filename)\n      })\n\n      if (filesToUpload.length === 0) {\n        alert('所有选择的图片都已在markdown文本中存在，无需上传。')\n        return\n      }\n\n      if (filesToUpload.length < files.length) {\n        const skippedCount = files.length - filesToUpload.length\n        const { requestConfirmation } = await import('../utils/confirmService')\n        const proceed = await requestConfirmation(\n          '跳过已存在图片',\n          `发现 ${skippedCount} 个图片已存在于markdown文本中，将被跳过。是否继续上传剩余 ${filesToUpload.length} 个图片？`\n        )\n        if (!proceed) return\n      }\n\n      cleanup()\n\n      // Show upload progress\n      uploader.showProgressDialog()\n\n      try {\n        const promises = filesToUpload.map(async file => {\n          try {\n            const result = await uploader.uploadImage(file)\n            return result\n          } catch (error: any) {\n            logger.error('[Image Uploader] Diff upload failed:', error)\n            throw error\n          }\n        })\n\n        await Promise.allSettled(promises)\n      } finally {\n        setTimeout(() => {\n          uploader.hideProgressDialog()\n        }, 3000)\n      }\n    }\n\n    // Regular upload handlers\n    fileInput.addEventListener('change', async (event: Event) => {\n      const files = (event.target as HTMLInputElement).files\n      if (files) {\n        await handleFiles(files)\n      }\n    })\n\n    dropZone.addEventListener('click', () => {\n      fileInput.click()\n    })\n\n    dropZone.addEventListener('dragover', (e: DragEvent) => {\n      e.preventDefault()\n      if (!isDragOver) {\n        isDragOver = true\n        dropZone.style.borderColor = '#3b82f6'\n        dropZone.style.backgroundColor = '#eff6ff'\n      }\n    })\n\n    dropZone.addEventListener('dragleave', (e: DragEvent) => {\n      e.preventDefault()\n      if (!dropZone.contains(e.relatedTarget as Node)) {\n        isDragOver = false\n        dropZone.style.borderColor = '#d1d5db'\n        dropZone.style.backgroundColor = '#f9fafb'\n      }\n    })\n\n    dropZone.addEventListener('drop', async (e: DragEvent) => {\n      e.preventDefault()\n      isDragOver = false\n      dropZone.style.borderColor = '#d1d5db'\n      dropZone.style.backgroundColor = '#f9fafb'\n\n      const files = e.dataTransfer?.files\n      if (files) {\n        await handleFiles(files)\n      }\n    })\n\n    // Diff upload handlers\n    diffFileInput.addEventListener('change', async (event: Event) => {\n      const files = (event.target as HTMLInputElement).files\n      if (files) {\n        await handleDiffFiles(files)\n      }\n    })\n\n    diffDropZone.addEventListener('click', () => {\n      diffFileInput.click()\n    })\n\n    diffDropZone.addEventListener('dragover', (e: DragEvent) => {\n      e.preventDefault()\n      if (!isDiffDragOver) {\n        isDiffDragOver = true\n        diffDropZone.style.borderColor = '#3b82f6'\n        diffDropZone.style.backgroundColor = '#eff6ff'\n      }\n    })\n\n    diffDropZone.addEventListener('dragleave', (e: DragEvent) => {\n      e.preventDefault()\n      if (!diffDropZone.contains(e.relatedTarget as Node)) {\n        isDiffDragOver = false\n        diffDropZone.style.borderColor = '#d1d5db'\n        diffDropZone.style.backgroundColor = '#f9fafb'\n      }\n    })\n\n    diffDropZone.addEventListener('drop', async (e: DragEvent) => {\n      e.preventDefault()\n      isDiffDragOver = false\n      diffDropZone.style.borderColor = '#d1d5db'\n      diffDropZone.style.backgroundColor = '#f9fafb'\n\n      const files = e.dataTransfer?.files\n      if (files) {\n        await handleDiffFiles(files)\n      }\n    })\n\n    // Close handlers\n    closeButton.addEventListener('click', cleanup)\n    overlay.addEventListener('click', cleanup)\n\n    // Prevent default drag behaviors on document\n    const preventDefaults = (e: Event) => {\n      e.preventDefault()\n      e.stopPropagation()\n    }\n\n    ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n      document.addEventListener(eventName, preventDefaults, false)\n    })\n\n    // Cleanup event listeners when panel is closed\n    const originalCleanup = cleanup\n    const enhancedCleanup = () => {\n      ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n        document.removeEventListener(eventName, preventDefaults, false)\n      })\n      originalCleanup()\n    }\n\n    closeButton.removeEventListener('click', cleanup)\n    overlay.removeEventListener('click', cleanup)\n    closeButton.addEventListener('click', enhancedCleanup)\n    overlay.addEventListener('click', enhancedCleanup)\n\n    document.body.appendChild(overlay)\n    document.body.appendChild(panel)\n  })\n}\n\nexport { uploader }\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\image-generator.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\Options.vue",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1652, 1655], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1652, 1655], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\components\\EmojiStats.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\components\\ExternalImportTab.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\components\\FavoritesTab.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\components\\GlobalSettings.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\components\\GroupsTab.vue",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1046, 1049], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1046, 1049], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1392, 1395], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1392, 1395], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1661, 1664], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1661, 1664], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 73,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 73,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2608, 2611], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2608, 2611], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2667, 2670], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2667, 2670], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 89,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 89,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3225, 3228], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3225, 3228], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 107,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 107,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3713, 3716], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3713, 3716], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3772, 3775], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3772, 3775], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 125,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 125,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4263, 4266], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4263, 4266], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 127,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 127,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4324, 4327], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4324, 4327], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 133,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 133,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4523, 4526], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4523, 4526], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 134,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 134,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4580, 4583], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4580, 4583], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 141,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 141,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4915, 4918], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4915, 4918], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\components\\HeaderControls.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\components\\LegacyEmojiManagement.vue",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 15,
        "column": 72,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 15,
        "endColumn": 75,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [556, 559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [556, 559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [621, 624], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [621, 624], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [941, 944], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [941, 944], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\components\\NotificationToasts.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\components\\UngroupedTab.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\main.ts",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`../stores/emojiStore` import should occur before import of `./Options.vue`",
        "line": 14,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 14,
        "endColumn": 53
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\n\nimport Options from './Options.vue'\nimport '../styles/main.css'\n\nconst pinia = createPinia()\nconst app = createApp(Options)\n\napp.use(pinia)\napp.mount('#app')\n\n// Initialize store data\nimport { useEmojiStore } from '../stores/emojiStore'\n\nconst store = useEmojiStore(pinia)\nstore.loadData()\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\modals\\AddEmojiModal.vue",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [641, 644], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [641, 644], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1588, 1591], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1588, 1591], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1644, 1647], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1644, 1647], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 76,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 76,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2276, 2279], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2276, 2279], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2386, 2389], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2386, 2389], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 85,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 85,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2510, 2513], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2510, 2513], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 86,
        "column": 74,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 86,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2596, 2599], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2596, 2599], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\modals\\ConfirmDeleteModal.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\modals\\ConfirmGenericModal.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\modals\\CreateGroupModal.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\modals\\EditEmojiModal.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\modals\\EditGroupModal.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\modals\\ImportConfigModal.vue",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 7,
        "column": 4,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "e" },
            "fix": { "range": [183, 206], "text": "" },
            "desc": "Remove unused variable 'e'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'v' is defined but never used.",
        "line": 7,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "v" },
            "fix": { "range": [205, 217], "text": "" },
            "desc": "Remove unused variable 'v'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 8,
        "column": 4,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "e" },
            "fix": { "range": [228, 242], "text": "" },
            "desc": "Remove unused variable 'e'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'config' is defined but never used.",
        "line": 8,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "config" },
            "fix": { "range": [241, 254], "text": "" },
            "desc": "Remove unused variable 'config'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [251, 254], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [251, 254], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'err' is defined but never used.",
        "line": 34,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'err' is defined but never used.",
        "line": 34,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script setup lang=\"ts\">\nimport { ref, defineEmits, defineProps } from 'vue'\n\nconst props = defineProps<{ modelValue: boolean }>()\nvoid props.modelValue\nconst emit = defineEmits<{\n  (e: 'update:modelValue', v: boolean): void\n  (e: 'imported', config: any): void\n}>()\n\nconst text = ref('')\nconst fileInput = ref<HTMLInputElement | null>(null)\n\nconst close = () => emit('update:modelValue', false)\n\nconst handleFile = (event: Event) => {\n  const target = event.target as HTMLInputElement\n  const file = target.files?.[0]\n  if (file) {\n    const reader = new FileReader()\n    reader.onload = e => {\n      text.value = e.target?.result as string\n    }\n    reader.readAsText(file)\n  }\n}\n\nconst doImport = () => {\n  try {\n    const parsed = JSON.parse(text.value)\n    emit('imported', parsed)\n    text.value = ''\n    close()\n  } catch (err) {\n    emit('imported', null)\n  }\n}\n</script>\n\n<template>\n  <div\n    v-if=\"modelValue\"\n    class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\n    @click=\"close\"\n  >\n    <div class=\"bg-white rounded-lg p-6 w-full max-w-lg\" @click.stop>\n      <h3 class=\"text-lg font-semibold mb-4\">导入配置</h3>\n      <div class=\"space-y-4\">\n        <div>\n          <label class=\"block text-sm font-medium text-gray-700 mb-1\">配置文件</label>\n          <input\n            ref=\"fileInput\"\n            type=\"file\"\n            accept=\".json\"\n            @change=\"handleFile\"\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n        <div>\n          <label class=\"block text-sm font-medium text-gray-700 mb-1\">或粘贴JSON配置</label>\n          <textarea\n            v-model=\"text\"\n            rows=\"6\"\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"粘贴JSON配置内容...\"\n          ></textarea>\n        </div>\n      </div>\n      <div class=\"flex justify-end gap-3 mt-6\">\n        <button\n          @click=\"close\"\n          class=\"px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded transition-colors\"\n        >\n          取消\n        </button>\n        <button\n          @click=\"doImport\"\n          class=\"px-4 py-2 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n        >\n          导入\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\modals\\ImportEmojisModal.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\useOptions.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 92,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 92,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2827, 2830], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2827, 2830], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\utils\\exportUtils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [56, 59], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [56, 59], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [423, 426], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [423, 426], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [726, 729], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [726, 729], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [779, 782], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [779, 782], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export function downloadJson(filename: string, payload: any) {\n  const blob = new Blob([JSON.stringify(payload, null, 2)], { type: 'application/json' })\n  const url = URL.createObjectURL(blob)\n  const a = document.createElement('a')\n  a.href = url\n  a.download = filename\n  document.body.appendChild(a)\n  a.click()\n  document.body.removeChild(a)\n  URL.revokeObjectURL(url)\n}\n\nexport function exportConfigurationFile(store: any) {\n  const config = {\n    version: '1.0',\n    exportDate: new Date().toISOString(),\n    settings: store.settings,\n    groups: store.groups\n  }\n  const filename = `emoji-config-${new Date().toISOString().split('T')[0]}.json`\n  downloadJson(filename, config)\n}\n\nexport function exportGroupFile(group: any) {\n  const emojis = (group.emojis || []).map((e: any) => ({\n    id: e.id,\n    packet: e.packet,\n    name: e.name,\n    url: e.url,\n    width: e.width,\n    height: e.height,\n    groupId: group.name || group.id\n  }))\n  const filename = `emoji-group-${group.id}-${group.name || 'group'}.json`\n  downloadJson(filename, emojis)\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\utils\\importUtils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [166, 169], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [166, 169], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [365, 368], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [365, 368], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [778, 781], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [778, 781], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 47,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 47,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1904, 1907], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1904, 1907], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 59,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 59,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2144, 2147], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2144, 2147], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEmojiStore } from '../../stores/emojiStore'\nimport type { EmojiGroup } from '../../types/emoji'\n\nexport async function importConfigurationToStore(config: any) {\n  const store = useEmojiStore()\n  // simple validation\n  if (!config) throw new Error('empty config')\n  store.importConfiguration(config)\n}\n\nexport async function importEmojisToStore(payload: any, targetGroupId?: string) {\n  // payload can be either:\n  // - an array of emoji items\n  // - an object: { exportedAt, group: { id, name, ... }, emojis: [...] }\n  // - a markdown string containing image links like: ![alt](upload://abc.webp) ...\n  //    in that case we'll parse the markdown and convert to an items array\n  if (typeof payload === 'string') {\n    const md = payload as string\n    const mdItems: any[] = []\n    // match markdown image syntax: ![alt](url \"title\") or ![alt](url \"displayUrl\")\n    const re = /!\\[([^\\]]*)\\]\\(([^)]+)\\)/g\n    let match: RegExpExecArray | null = null\n    while ((match = re.exec(md)) !== null) {\n      const alt = (match[1] || '').trim()\n      const urlPart = (match[2] || '').trim()\n\n      // Parse URL and optional display URL from title\n      const urlTokens = urlPart.split(/\\s+/)\n      const url = urlTokens[0].replace(/^['\"]|['\"]$/g, '').trim()\n\n      // Check if there's a second URL in quotes (as title) - this can be used as displayUrl\n      let displayUrl: string | undefined\n      if (urlTokens.length > 1) {\n        const titlePart = urlTokens\n          .slice(1)\n          .join(' ')\n          .replace(/^['\"]|['\"]$/g, '')\n          .trim()\n        // If the title looks like a URL, use it as display URL\n        if (titlePart.startsWith('http://') || titlePart.startsWith('https://')) {\n          displayUrl = titlePart\n        }\n      }\n\n      const name =\n        alt.split('|')[0].trim() || decodeURIComponent((url.split('/').pop() || '').split('?')[0])\n      const emojiData: any = { name, url }\n      if (displayUrl) {\n        emojiData.displayUrl = displayUrl\n      }\n      mdItems.push(emojiData)\n    }\n    if (mdItems.length > 0) {\n      payload = mdItems\n    }\n  }\n  const store = useEmojiStore()\n\n  let items: any[] = []\n  let inferredGroupName: string | undefined\n\n  if (Array.isArray(payload)) {\n    items = payload\n  } else if (payload && Array.isArray(payload.emojis)) {\n    items = payload.emojis\n    // prefer group.name, fallback to group.id\n    inferredGroupName = (payload.group && (payload.group.name || payload.group.id))?.toString()\n  } else {\n    throw new Error('items must be array or object with emojis[]')\n  }\n\n  store.beginBatch()\n  try {\n    if (targetGroupId) {\n      items.forEach(emoji => {\n        const emojiData = {\n          packet: Number.isInteger(emoji.packet)\n            ? emoji.packet\n            : Date.now() + Math.floor(Math.random() * 1000),\n          name: emoji.name || emoji.alt || '\\u672a\\u547d\\u540d',\n          url: emoji.url || emoji.src,\n          ...(emoji.displayUrl && { displayUrl: emoji.displayUrl })\n        }\n        store.addEmojiWithoutSave(targetGroupId, emojiData)\n      })\n    } else {\n      const groupMap = new Map<string, string>()\n      store.groups.forEach((g: EmojiGroup) => {\n        if (g && g.name && g.id) groupMap.set(g.name, g.id)\n      })\n\n      items.forEach(emoji => {\n        // item.groupId might be either a group id or a group name depending on source\n        const rawGroup = emoji.groupId || emoji.group || inferredGroupName || '\\u672a\\u5206\\u7ec4'\n        const groupName = rawGroup.toString()\n        let targetId = groupMap.get(groupName)\n        if (!targetId) {\n          const created = store.createGroupWithoutSave(groupName, '\\ud83d\\udcc1')\n          if (created && created.id) {\n            targetId = created.id\n            groupMap.set(groupName, targetId)\n          } else {\n            targetId = store.groups[0]?.id || 'nachoneko'\n            if (targetId) groupMap.set(groupName, targetId)\n          }\n        }\n        const emojiData = {\n          packet: Number.isInteger(emoji.packet)\n            ? emoji.packet\n            : Date.now() + Math.floor(Math.random() * 1000),\n          name: emoji.name || emoji.alt || '\\u672a\\u547d\\u540d',\n          url: emoji.url || emoji.src,\n          ...(emoji.displayUrl && { displayUrl: emoji.displayUrl })\n        }\n        if (targetId) store.addEmojiWithoutSave(targetId, emojiData)\n      })\n    }\n\n    await store.saveData()\n  } finally {\n    await store.endBatch()\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\options\\utils\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\popup\\Popup.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\popup\\components\\EmojiGrid.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\popup\\components\\GroupTabs.vue",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'id' is defined but never used.",
        "line": 10,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "id" },
            "fix": { "range": [269, 279], "text": "" },
            "desc": "Remove unused variable 'id'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [437, 440], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [437, 440], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script setup lang=\"ts\">\nimport { defineProps, toRefs } from 'vue'\n\nimport type { EmojiGroup } from '../../types/emoji'\nimport { isImageUrl } from '../../utils/isImageUrl'\n\nconst props = defineProps<{\n  groups: EmojiGroup[]\n  activeGroupId: string | null\n  setActive: (id: string) => void\n}>()\n\n// Preserve reactivity for primitive props (like activeGroupId) by using toRefs\nconst { groups, activeGroupId, setActive } = toRefs(props) as any\n\n// isImageUrl is imported and usable directly in the template\n</script>\n\n<template>\n  <div class=\"flex border-b border-gray-100 overflow-x-auto\">\n    <button\n      v-for=\"group in groups\"\n      :key=\"group.id\"\n      @click=\"setActive(group.id)\"\n      class=\"flex-shrink-0 px-3 py-2 mobile:px-4 mobile:py-3 text-xs mobile:text-sm font-medium border-b-2 transition-colors\"\n      :class=\"[\n        activeGroupId === group.id\n          ? 'border-blue-500 text-blue-600 bg-blue-50'\n          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n      ]\"\n    >\n      <span class=\"mr-1\">\n        <template v-if=\"isImageUrl(group.icon)\">\n          <img\n            :src=\"group.icon\"\n            alt=\"group icon\"\n            class=\"w-4 h-4 mobile:w-5 mobile:h-5 object-contain inline-block\"\n          />\n        </template>\n        <template v-else>\n          {{ group.icon }}\n        </template>\n      </span>\n      {{ group.name }}\n    </button>\n  </div>\n</template>\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\popup\\main.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\popup\\usePopup.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1369, 1372], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1369, 1372], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 78,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 81,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1501, 1504], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1501, 1504], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2014, 2017], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2014, 2017], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, onMounted, watch } from 'vue'\n\nimport { useEmojiStore } from '../stores/emojiStore'\nimport type { Emoji } from '../types/emoji'\n\nexport function usePopup() {\n  const emojiStore = useEmojiStore()\n  const localScale = ref(100)\n  const showCopyToast = ref(false)\n\n  onMounted(async () => {\n    await emojiStore.loadData()\n    localScale.value = emojiStore.settings.imageScale\n  })\n\n  watch(\n    () => emojiStore.settings.imageScale,\n    newScale => {\n      localScale.value = newScale\n    }\n  )\n\n  const updateScale = () => {\n    emojiStore.updateSettings({ imageScale: localScale.value })\n  }\n\n  const selectEmoji = (emoji: Emoji) => {\n    const scale = emojiStore.settings.imageScale\n    const match = emoji.url.match(/_(\\d{3,})x(\\d{3,})\\./)\n    let width = '500'\n    let height = '500'\n    if (match) {\n      width = match[1]\n      height = match[2]\n    } else if (emoji.width && emoji.height) {\n      width = emoji.width.toString()\n      height = emoji.height.toString()\n    }\n\n    const emojiMarkdown = `![${emoji.name}|${width}x${height},${scale}%](${emoji.url}) `\n\n    navigator.clipboard\n      .writeText(emojiMarkdown)\n      .then(() => {\n        // 显示复制成功提示，不关闭弹窗\n        showCopyToast.value = true\n        setTimeout(() => {\n          showCopyToast.value = false\n        }, 2000)\n      })\n      .catch(() => {\n        const chromeApi = (window as any).chrome\n        if (chromeApi && chromeApi.tabs) {\n          chromeApi.tabs.query({ active: true, currentWindow: true }, (tabs: any) => {\n            if (tabs[0] && tabs[0].id) {\n              chromeApi.tabs.sendMessage(tabs[0].id, {\n                type: 'INSERT_EMOJI',\n                emoji: emoji,\n                scale: scale\n              })\n              showCopyToast.value = true\n              setTimeout(() => {\n                showCopyToast.value = false\n              }, 2000)\n            }\n          })\n        }\n      })\n\n    emojiStore.addToFavorites(emoji)\n  }\n\n  const openOptions = () => {\n    const chromeApi = (window as any).chrome\n    if (chromeApi && chromeApi.runtime) {\n      chromeApi.runtime.openOptionsPage()\n    }\n  }\n\n  return {\n    emojiStore,\n    localScale,\n    showCopyToast,\n    updateScale,\n    selectEmoji,\n    openOptions\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\shims-vue.d.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [129, 132], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [129, 132], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\stores\\emojiStore.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 77,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 77,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2204, 2273], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 81,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 81,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2386, 2450], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 95,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 95,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [3112, 3185], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 98,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 98,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [3252, 3329], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 101,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 101,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [3397, 3476], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 105,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 105,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3534, 3578], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 106,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 106,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3585, 3629], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 107,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 107,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3636, 3684], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 108,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 108,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3691, 3741], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 111,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 111,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3808, 4070], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 125,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 125,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [4342, 4513], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 127,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 127,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4485, 4488], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4485, 4488], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 132,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 132,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [4664, 4742], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 134,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 134,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [4828, 4895], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 138,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 138,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [4992, 5074], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 140,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 140,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [5156, 5225], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 146,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 146,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5324, 5383], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 148,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 148,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5421, 5424], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5421, 5424], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 149,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 149,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [5439, 5512], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 161,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 161,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5867, 6045], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 173,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 173,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [6101, 6170], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 183,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 183,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6459, 6665], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 192,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 192,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [6863, 6922], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 196,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 196,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [7101, 7162], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 199,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 199,
        "endColumn": 24,
        "suggestions": [
          {
            "fix": { "range": [7270, 7332], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 204,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 204,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [7404, 7463], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 206,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 206,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7501, 7504], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7501, 7504], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 207,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 207,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [7519, 7584], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 228,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 228,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [8115, 8196], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 242,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 242,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [8490, 8582], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 250,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 250,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [8844, 8909], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 257,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 257,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [9052, 9095], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 264,
        "column": 23,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 264,
        "endColumn": 36
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 267,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 267,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [9373, 9429], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 277,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 277,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [9791, 9850], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 290,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 290,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [10277, 10362], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 305,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 305,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [10774, 10840], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 320,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 320,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [11250, 11327], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 330,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 330,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [11640, 11705], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 342,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 342,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [11954, 12010], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 366,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 366,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [12729, 12874], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 381,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 381,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [13197, 13279], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 392,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 392,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [13714, 13801], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 402,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 402,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [14077, 14131], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 419,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 419,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [14773, 14938], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 430,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 430,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [15192, 15374], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 449,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 449,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [15769, 15838], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 464,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 464,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [16196, 16290], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 487,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 487,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [17015, 17100], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 496,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 496,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [17314, 17382], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 506,
        "column": 81,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 506,
        "endColumn": 84,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17791, 17794], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17791, 17794], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 510,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 510,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 510,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 510,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 526,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 526,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18323, 18326], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18323, 18326], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 536,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 536,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [18586, 18668], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 554,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 554,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [19061, 19110], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 576,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 576,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [19704, 19757], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 590,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 590,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20242, 20245], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20242, 20245], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 592,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 592,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [20350, 20557], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 603,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 603,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [20605, 20689], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 614,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 614,
        "endColumn": 26,
        "suggestions": [
          {
            "fix": { "range": [21061, 21113], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 59,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { defineStore } from 'pinia'\nimport { ref, computed, watch, nextTick } from 'vue'\n\nimport type { Emoji, EmojiGroup, AppSettings } from '../types/emoji'\nimport { defaultEmojiGroups, defaultSettings } from '../types/emoji'\nimport { newStorageHelpers } from '../utils/newStorage'\n\nexport const useEmojiStore = defineStore('emojiExtension', () => {\n  // --- State ---\n  const groups = ref<EmojiGroup[]>([])\n  const settings = ref<AppSettings>(defaultSettings)\n  const favorites = ref<Set<string>>(new Set())\n  const activeGroupId = ref<string>('nachoneko')\n  const searchQuery = ref<string>(' ')\n  const isLoading = ref(true)\n  const isSaving = ref(false)\n\n  // --- Computed ---\n  const activeGroup = computed(\n    () => groups.value.find(g => g.id === activeGroupId.value) || groups.value[0]\n  )\n\n  const filteredEmojis = computed(() => {\n    if (!activeGroup.value) return []\n\n    let emojis = activeGroup.value.emojis\n\n    if (searchQuery.value) {\n      const query = searchQuery.value.toLowerCase().trim()\n      if (query) {\n        emojis = emojis.filter(emoji => emoji.name.toLowerCase().includes(query))\n      }\n    }\n\n    return emojis\n  })\n\n  const sortedGroups = computed(() => {\n    const allGroups = [...groups.value]\n    const favoritesGroup = allGroups.find(g => g.id === 'favorites')\n    const otherGroups = allGroups\n      .filter(g => g.id !== 'favorites')\n      .sort((a, b) => a.order - b.order)\n\n    // Always put favorites first if it exists\n    return favoritesGroup ? [favoritesGroup, ...otherGroups] : otherGroups\n  })\n\n  // --- Save control (batching) ---\n  let batchDepth = 0\n  const pendingSave = ref(false)\n\n  const beginBatch = () => {\n    batchDepth++\n  }\n\n  const endBatch = async () => {\n    if (batchDepth > 0) batchDepth--\n    if (batchDepth === 0 && pendingSave.value && !isSaving.value && !isLoading.value) {\n      pendingSave.value = false\n      await saveData()\n    }\n  }\n\n  const maybeSave = () => {\n    if (isLoading.value || isSaving.value || batchDepth > 0) {\n      pendingSave.value = true\n      return\n    }\n    // fire-and-forget; outer callers need not await persistence\n    void saveData()\n  }\n\n  // --- Actions ---\n\n  const loadData = async () => {\n    console.log('[EmojiStore] Starting loadData with new storage system')\n    isLoading.value = true\n    try {\n      // Load data using new storage system with conflict resolution\n      console.log('[EmojiStore] Loading data from new storage system')\n      const [loadedGroups, loadedSettings, loadedFavorites] = await Promise.allSettled([\n        newStorageHelpers.getAllEmojiGroups(),\n        newStorageHelpers.getSettings(),\n        newStorageHelpers.getFavorites()\n      ])\n\n      // Extract successful results\n      const groupsData = loadedGroups.status === 'fulfilled' ? loadedGroups.value : null\n      const settingsData = loadedSettings.status === 'fulfilled' ? loadedSettings.value : null\n      const favoritesData = loadedFavorites.status === 'fulfilled' ? loadedFavorites.value : null\n\n      // Log any loading errors but don't fail completely\n      if (loadedGroups.status === 'rejected') {\n        console.error('[EmojiStore] Failed to load groups:', loadedGroups.reason)\n      }\n      if (loadedSettings.status === 'rejected') {\n        console.error('[EmojiStore] Failed to load settings:', loadedSettings.reason)\n      }\n      if (loadedFavorites.status === 'rejected') {\n        console.error('[EmojiStore] Failed to load favorites:', loadedFavorites.reason)\n      }\n\n      // Detailed data loading debug info\n      console.log('[EmojiStore] Raw loaded data:')\n      console.log('  - loadedGroups:', groupsData)\n      console.log('  - loadedSettings:', settingsData)\n      console.log('  - loadedFavorites:', favoritesData)\n\n      // Summarize loaded data to avoid huge console dumps\n      console.log('[EmojiStore] Data loaded summary:', {\n        groupsCount: groupsData?.length || 0,\n        groupsValid: Array.isArray(groupsData),\n        settingsLastModified: settingsData?.lastModified,\n        favoritesCount: favoritesData?.length || 0\n      })\n\n      groups.value =\n        groupsData && groupsData.length > 0\n          ? groupsData\n          : JSON.parse(JSON.stringify(defaultEmojiGroups))\n      settings.value = { ...defaultSettings, ...settingsData }\n      favorites.value = new Set(favoritesData || [])\n\n      console.log('[EmojiStore] Final groups after assignment:', {\n        count: groups.value?.length || 0,\n        groupIds: groups.value?.map((g: any) => g.id) || []\n      })\n\n      // If we used default data, save it to storage for next time (with error handling)\n      if (!groupsData || groupsData.length === 0) {\n        console.log('[EmojiStore] No groups loaded, saving default groups to storage')\n        newStorageHelpers.setAllEmojiGroups(groups.value).catch(error => {\n          console.error('[EmojiStore] Failed to save default groups:', error)\n        })\n      }\n      if (!settingsData || Object.keys(settingsData).length === 0) {\n        console.log('[EmojiStore] No settings loaded, saving default settings to storage')\n        newStorageHelpers.setSettings(settings.value).catch(error => {\n          console.error('[EmojiStore] Failed to save default settings:', error)\n        })\n      }\n\n      activeGroupId.value = settings.value.defaultGroup || 'nachoneko'\n\n      console.log('[EmojiStore] LoadData completed successfully')\n    } catch (error) {\n      const e: any = error\n      console.error('[EmojiStore] Failed to load initial data:', e?.stack || e)\n      // Fallback to defaults in case of error\n      groups.value = JSON.parse(JSON.stringify(defaultEmojiGroups))\n      settings.value = { ...defaultSettings }\n      favorites.value = new Set()\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const saveData = async () => {\n    if (isLoading.value || isSaving.value || batchDepth > 0) {\n      console.log(\n        '[EmojiStore] SaveData deferred - loading:',\n        isLoading.value,\n        'saving:',\n        isSaving.value,\n        'batch:',\n        batchDepth\n      )\n      pendingSave.value = true\n      return\n    }\n\n    console.log('[EmojiStore] Starting saveData with new storage system')\n    isSaving.value = true\n    try {\n      await nextTick()\n\n      // Update timestamp for sync comparison\n      const updatedSettings = { ...settings.value, lastModified: Date.now() }\n      settings.value = updatedSettings\n\n      // Avoid dumping whole data; show a concise summary\n      console.log('[EmojiStore] Saving data summary:', {\n        groupsCount: groups.value.length,\n        settingsLastModified: updatedSettings.lastModified,\n        favoritesCount: favorites.value.size\n      })\n\n      // Use new storage system with progressive writes and better error handling\n      const savePromises = [\n        newStorageHelpers.setAllEmojiGroups(groups.value).catch(error => {\n          console.error('[EmojiStore] Failed to save groups:', error)\n          // Don't throw, just log - partial saves are better than complete failure\n        }),\n        newStorageHelpers.setSettings(updatedSettings).catch(error => {\n          console.error('[EmojiStore] Failed to save settings:', error)\n        }),\n        newStorageHelpers.setFavorites(Array.from(favorites.value)).catch(error => {\n          console.error('[EmojiStore] Failed to save favorites:', error)\n        })\n      ]\n\n      await Promise.allSettled(savePromises)\n      console.log('[EmojiStore] SaveData completed successfully')\n    } catch (error) {\n      const e: any = error\n      console.error('[EmojiStore] Failed to save data:', e?.stack || e)\n    } finally {\n      isSaving.value = false\n      // Check if there's a pending save that was deferred\n      if (pendingSave.value) {\n        pendingSave.value = false\n        setTimeout(() => saveData(), 100) // Retry after a short delay\n      }\n    }\n  }\n\n  // --- Group Management ---\n  const createGroup = (name: string, icon: string) => {\n    const newGroup: EmojiGroup = {\n      id: `group-${Date.now()}`,\n      name,\n      icon,\n      order: groups.value.length,\n      emojis: []\n    }\n    groups.value.push(newGroup)\n    console.log('[EmojiStore] createGroup', { id: newGroup.id, name: newGroup.name })\n    maybeSave()\n    return newGroup\n  }\n\n  const createGroupWithoutSave = (name: string, icon: string) => {\n    const newGroup: EmojiGroup = {\n      id: `group-${Date.now()}`,\n      name,\n      icon,\n      order: groups.value.length,\n      emojis: []\n    }\n    groups.value.push(newGroup)\n    console.log('[EmojiStore] createGroupWithoutSave', { id: newGroup.id, name: newGroup.name })\n    return newGroup\n  }\n\n  const updateGroup = (groupId: string, updates: Partial<EmojiGroup>) => {\n    const index = groups.value.findIndex(g => g.id === groupId)\n    if (index !== -1) {\n      groups.value[index] = { ...groups.value[index], ...updates }\n      console.log('[EmojiStore] updateGroup', { id: groupId, updates })\n      maybeSave()\n    }\n  }\n\n  const deleteGroup = (groupId: string) => {\n    if (groupId === 'favorites' || groupId === 'nachoneko') {\n      console.warn('Cannot delete system groups')\n      return\n    }\n\n    // Remove from new storage system\n    newStorageHelpers\n      .removeEmojiGroup(groupId)\n      .catch(error => console.error('[EmojiStore] Failed to delete group from storage:', error))\n\n    groups.value = groups.value.filter(g => g.id !== groupId)\n    console.log('[EmojiStore] deleteGroup', { id: groupId })\n    if (activeGroupId.value === groupId) {\n      activeGroupId.value = groups.value[0]?.id || 'nachoneko'\n    }\n    maybeSave()\n  }\n\n  const reorderGroups = async (sourceGroupId: string, targetGroupId: string) => {\n    // Prevent reordering if either source or target is favorites\n    if (sourceGroupId === 'favorites' || targetGroupId === 'favorites') {\n      console.warn('[EmojiStore] Cannot reorder favorites group')\n      return\n    }\n\n    const sourceIndex = groups.value.findIndex(g => g.id === sourceGroupId)\n    const targetIndex = groups.value.findIndex(g => g.id === targetGroupId)\n\n    if (sourceIndex !== -1 && targetIndex !== -1) {\n      const [removed] = groups.value.splice(sourceIndex, 1)\n      groups.value.splice(targetIndex, 0, removed)\n      groups.value.forEach((group, index) => {\n        group.order = index\n      })\n      console.log('[EmojiStore] reorderGroups', { from: sourceGroupId, to: targetGroupId })\n      await saveData()\n    }\n  }\n\n  // --- Emoji Management ---\n  const addEmoji = (groupId: string, emoji: Omit<Emoji, 'id' | 'groupId'>) => {\n    const group = groups.value.find(g => g.id === groupId)\n    if (group) {\n      const newEmoji: Emoji = {\n        ...emoji,\n        id: `emoji-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,\n        groupId\n      }\n      group.emojis.push(newEmoji)\n      console.log('[EmojiStore] addEmoji', { id: newEmoji.id, groupId })\n      maybeSave()\n      return newEmoji\n    }\n  }\n\n  const addEmojiWithoutSave = (groupId: string, emoji: Omit<Emoji, 'id' | 'groupId'>) => {\n    const group = groups.value.find(g => g.id === groupId)\n    if (group) {\n      const newEmoji: Emoji = {\n        ...emoji,\n        id: `emoji-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,\n        groupId\n      }\n      group.emojis.push(newEmoji)\n      console.log('[EmojiStore] addEmojiWithoutSave', { id: newEmoji.id, groupId })\n      return newEmoji\n    }\n  }\n\n  const updateEmoji = (emojiId: string, updates: Partial<Emoji>) => {\n    for (const group of groups.value) {\n      const index = group.emojis.findIndex(e => e.id === emojiId)\n      if (index !== -1) {\n        group.emojis[index] = { ...group.emojis[index], ...updates }\n        console.log('[EmojiStore] updateEmoji', { id: emojiId, updates })\n        maybeSave()\n        break\n      }\n    }\n  }\n\n  const deleteEmoji = (emojiId: string) => {\n    for (const group of groups.value) {\n      group.emojis = group.emojis.filter(e => e.id !== emojiId)\n    }\n    favorites.value.delete(emojiId)\n    console.log('[EmojiStore] deleteEmoji', { id: emojiId })\n    maybeSave()\n  }\n\n  const moveEmoji = (\n    sourceGroupId: string,\n    sourceIndex: number,\n    targetGroupId: string,\n    targetIndex: number\n  ) => {\n    const sourceGroup = groups.value.find(g => g.id === sourceGroupId)\n    const targetGroup = groups.value.find(g => g.id === targetGroupId)\n\n    if (sourceGroup && targetGroup && sourceIndex >= 0 && sourceIndex < sourceGroup.emojis.length) {\n      const [emoji] = sourceGroup.emojis.splice(sourceIndex, 1)\n      emoji.groupId = targetGroupId\n\n      if (targetIndex >= 0 && targetIndex <= targetGroup.emojis.length) {\n        targetGroup.emojis.splice(targetIndex, 0, emoji)\n      } else {\n        targetGroup.emojis.push(emoji)\n      }\n\n      maybeSave()\n      console.log('[EmojiStore] moveEmoji', {\n        from: sourceGroupId,\n        to: targetGroupId,\n        sourceIndex,\n        targetIndex\n      })\n    }\n  }\n\n  const removeEmojiFromGroup = (groupId: string, index: number) => {\n    const group = groups.value.find(g => g.id === groupId)\n    if (group && index >= 0 && index < group.emojis.length) {\n      const emoji = group.emojis[index]\n      group.emojis.splice(index, 1)\n      favorites.value.delete(emoji.id)\n      console.log('[EmojiStore] removeEmojiFromGroup', { groupId, index, id: emoji.id })\n      maybeSave()\n    }\n  }\n\n  const updateEmojiInGroup = (groupId: string, index: number, updatedEmoji: Partial<Emoji>) => {\n    const group = groups.value.find(g => g.id === groupId)\n    if (group && index >= 0 && index < group.emojis.length) {\n      const currentEmoji = group.emojis[index]\n      // Update the emoji while preserving the id and other metadata\n      group.emojis[index] = { ...currentEmoji, ...updatedEmoji }\n      console.log('[EmojiStore] updateEmojiInGroup', { groupId, index, id: currentEmoji.id })\n      maybeSave()\n    }\n  }\n\n  // --- Favorites Management ---\n  const addToFavorites = async (emoji: Emoji) => {\n    // Check if emoji already exists in favorites group\n    const favoritesGroup = groups.value.find(g => g.id === 'favorites')\n    if (!favoritesGroup) {\n      console.warn('[EmojiStore] Favorites group not found')\n      return\n    }\n\n    const now = Date.now()\n    const existingEmojiIndex = favoritesGroup.emojis.findIndex(e => e.url === emoji.url)\n\n    if (existingEmojiIndex !== -1) {\n      // Emoji already exists in favorites, update usage tracking\n      const existingEmoji = favoritesGroup.emojis[existingEmojiIndex]\n      const lastUsed = existingEmoji.lastUsed || 0\n      const timeDiff = now - lastUsed\n      const twelveHours = 12 * 60 * 60 * 1000 // 12 hours in milliseconds\n\n      if (timeDiff < twelveHours) {\n        // Less than 12 hours, only increment count\n        existingEmoji.usageCount = (existingEmoji.usageCount || 0) + 1\n        console.log(\n          '[EmojiStore] Updated usage count for existing emoji:',\n          emoji.name,\n          'count:',\n          existingEmoji.usageCount\n        )\n      } else {\n        // More than 12 hours, apply decay and update timestamp\n        const currentCount = existingEmoji.usageCount || 1\n        existingEmoji.usageCount = Math.floor(currentCount * 0.8) + 1\n        existingEmoji.lastUsed = now\n        console.log(\n          '[EmojiStore] Applied usage decay and updated timestamp for emoji:',\n          emoji.name,\n          'new count:',\n          existingEmoji.usageCount\n        )\n      }\n    } else {\n      // Add emoji to favorites group with initial usage tracking\n      const favoriteEmoji: Emoji = {\n        ...emoji,\n        id: `fav-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,\n        groupId: 'favorites',\n        usageCount: 1,\n        lastUsed: now,\n        addedAt: now\n      }\n\n      favoritesGroup.emojis.push(favoriteEmoji) // Add new emoji\n      console.log('[EmojiStore] Added new emoji to favorites:', emoji.name)\n    }\n\n    // Sort favorites by lastUsed timestamp (most recent first)\n    favoritesGroup.emojis.sort((a, b) => (b.lastUsed || 0) - (a.lastUsed || 0))\n\n    maybeSave()\n  }\n\n  const toggleFavorite = (emojiId: string) => {\n    if (favorites.value.has(emojiId)) {\n      favorites.value.delete(emojiId)\n    } else {\n      favorites.value.add(emojiId)\n    }\n    console.log('[EmojiStore] toggleFavorite', { id: emojiId, now: favorites.value.has(emojiId) })\n    maybeSave()\n  }\n\n  const findEmojiById = (emojiId: string): Emoji | undefined => {\n    for (const group of groups.value) {\n      const emoji = group.emojis.find(e => e.id === emojiId)\n      if (emoji) return emoji\n    }\n  }\n\n  // --- One-click Add Emoji from Web ---\n  const addEmojiFromWeb = (emojiData: { name: string; url: string }) => {\n    const ungroupedGroup = groups.value.find(g => g.id === 'ungrouped')\n    if (ungroupedGroup) {\n      const newEmoji: Emoji = {\n        id: `emoji-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,\n        packet: Date.now(),\n        name: emojiData.name,\n        url: emojiData.url,\n        groupId: 'ungrouped'\n      }\n      ungroupedGroup.emojis.push(newEmoji)\n      console.log('[EmojiStore] addEmojiFromWeb', { id: newEmoji.id, name: newEmoji.name })\n      maybeSave()\n      return newEmoji\n    }\n  }\n\n  // --- Settings Management ---\n  const updateSettings = (newSettings: Partial<AppSettings>) => {\n    settings.value = { ...settings.value, ...newSettings }\n    console.log('[EmojiStore] updateSettings', { updates: newSettings })\n    maybeSave()\n    // attempt to notify background to sync to content scripts\n    void syncSettingsToBackground()\n  }\n\n  // Notify background to sync settings across contexts (content scripts)\n  // Use a separate function so we can call it after persistence if needed\n  const syncSettingsToBackground = async () => {\n    try {\n      const chromeAPI = typeof chrome !== 'undefined' ? chrome : (globalThis as any).chrome\n      if (chromeAPI && chromeAPI.runtime && chromeAPI.runtime.sendMessage) {\n        chromeAPI.runtime.sendMessage({ type: 'SYNC_SETTINGS', settings: settings.value })\n      }\n    } catch (e) {\n      // ignore\n    }\n  }\n\n  // --- Import/Export ---\n  const exportConfiguration = () => {\n    return {\n      groups: groups.value,\n      settings: settings.value,\n      favorites: Array.from(favorites.value),\n      exportDate: new Date().toISOString(),\n      version: '3.0'\n    }\n  }\n\n  const importConfiguration = (config: any) => {\n    if (config.groups) {\n      groups.value = config.groups\n    }\n    if (config.settings) {\n      settings.value = { ...defaultSettings, ...config.settings }\n    }\n    if (config.favorites) {\n      favorites.value = new Set(config.favorites)\n    }\n    console.log('[EmojiStore] importConfiguration', { groups: config.groups?.length })\n    maybeSave()\n  }\n\n  const resetToDefaults = async () => {\n    await newStorageHelpers.resetToDefaults()\n    await loadData() // Reload store state from storage\n  }\n\n  const forceSync = async () => {\n    try {\n      await newStorageHelpers.backupToSync(\n        groups.value,\n        settings.value,\n        Array.from(favorites.value)\n      )\n      return true\n    } catch (error) {\n      console.error('Failed to sync to chrome:', error)\n      return false\n    }\n  }\n\n  // --- Synchronization and Persistence ---\n\n  // Watch for local changes and persist them (with better debouncing)\n  let saveTimeout: NodeJS.Timeout | null = null\n  const SAVE_DEBOUNCE_DELAY = 500 // 500ms debounce\n\n  watch(\n    [groups, settings, favorites],\n    () => {\n      if (!isLoading.value && !isUpdatingFromStorage && !isSaving.value) {\n        // Clear existing timeout\n        if (saveTimeout) {\n          clearTimeout(saveTimeout)\n        }\n\n        // Debounce saves to prevent continuous writes\n        saveTimeout = setTimeout(() => {\n          console.log('[EmojiStore] Triggering debounced save')\n          maybeSave()\n        }, SAVE_DEBOUNCE_DELAY)\n      }\n    },\n    { deep: true }\n  )\n\n  // Listen for changes from other extension contexts (e.g., options page)\n  let isUpdatingFromStorage = false\n\n  // Note: The new storage system handles cross-context synchronization internally\n  // We'll add a simple listener for backward compatibility\n  if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.onChanged) {\n    chrome.storage.onChanged.addListener((changes: any, areaName: string) => {\n      if (isSaving.value || isLoading.value || isUpdatingFromStorage) {\n        console.log(\n          '[EmojiStore] Ignoring storage change - save:',\n          isSaving.value,\n          'load:',\n          isLoading.value,\n          'updating:',\n          isUpdatingFromStorage\n        )\n        return // Prevent loops\n      }\n\n      console.log('[EmojiStore] Storage change detected:', areaName, Object.keys(changes))\n\n      // Simple reload on storage changes since new system handles conflict resolution\n      if (areaName === 'local' || areaName === 'sync') {\n        isUpdatingFromStorage = true\n        setTimeout(async () => {\n          try {\n            await loadData()\n          } finally {\n            setTimeout(() => {\n              isUpdatingFromStorage = false\n              console.log('[EmojiStore] Storage update completed')\n            }, 200)\n          }\n        }, 100)\n      }\n    })\n  }\n\n  return {\n    // State\n    groups,\n    settings,\n    activeGroupId,\n    searchQuery,\n    isLoading,\n    isSaving,\n    favorites,\n\n    // Computed\n    activeGroup,\n    filteredEmojis,\n    sortedGroups,\n\n    // Actions\n    loadData,\n    saveData,\n    createGroup,\n    createGroupWithoutSave,\n    updateGroup,\n    deleteGroup,\n    reorderGroups,\n    addEmoji,\n    addEmojiWithoutSave,\n    updateEmoji,\n    deleteEmoji,\n    moveEmoji,\n    removeEmojiFromGroup,\n    updateEmojiInGroup,\n    addToFavorites,\n    toggleFavorite,\n    findEmojiById,\n    updateSettings,\n    exportConfiguration,\n    importConfiguration,\n    resetToDefaults,\n    forceSync,\n    // expose batching helpers for bulk operations\n    beginBatch,\n    endBatch,\n    // one-click add from web\n    addEmojiFromWeb\n  }\n})\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\tenor\\Tenor.vue",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 66,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 66,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1670, 1723], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 80,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 80,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2045, 2092], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 94,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 94,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2421, 2469], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 133,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 133,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3596, 3634], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 170,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 170,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [4717, 4758], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 217,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 217,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [5958, 6011], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 229,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 229,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [6260, 6298], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script setup lang=\"ts\">\nimport { ref, onMounted, computed } from 'vue'\nimport { Dropdown as ADropdown, Menu as AMenu, Button as AButton } from 'ant-design-vue'\nimport { DownOutlined } from '@ant-design/icons-vue'\n\nimport { useEmojiStore } from '../stores/emojiStore'\n\ntype TenorGif = {\n  id: string\n  content_description?: string\n  media_formats: {\n    tinygif?: { url: string }\n    gif?: { url: string }\n  }\n}\n\nconst emojiStore = useEmojiStore()\n\n// State\nconst tenorApiKey = ref('')\nconst inputApiKey = ref('')\nconst searchQuery = ref('')\nconst searchResults = ref<TenorGif[]>([])\nconst selectedGifs = ref(new Set<string>())\nconst isSearching = ref(false)\nconst isLoadingMore = ref(false)\nconst isImporting = ref(false)\nconst hasSearched = ref(false)\nconst hasMore = ref(false)\nconst nextPos = ref('')\n\n// Search options\nconst searchLimit = ref(12)\nconst contentFilter = ref('high')\n\nconst onSearchLimitSelect = (info: { key: string | number }) => {\n  searchLimit.value = Number(String(info.key))\n}\n\nconst onContentFilterSelect = (info: { key: string | number }) => {\n  contentFilter.value = String(info.key)\n}\n\n// Group selection\nconst showGroupModal = ref(false)\nconst selectedGroupId = ref('')\n\n// Messages\nconst message = ref({ text: '', type: 'success' as 'success' | 'error' })\n\n// Computed\nconst availableGroups = computed(() => {\n  return emojiStore.groups.filter(g => g.id !== 'favorites')\n})\n\n// Load API key from storage\nonMounted(async () => {\n  await emojiStore.loadData()\n\n  try {\n    const result = await chrome.storage.local.get(['tenorApiKey'])\n    if (result.tenorApiKey) {\n      tenorApiKey.value = result.tenorApiKey\n    }\n  } catch (error) {\n    console.error('Failed to load Tenor API key:', error)\n  }\n})\n\n// Methods\nconst saveApiKey = async () => {\n  if (!inputApiKey.value.trim()) return\n\n  try {\n    await chrome.storage.local.set({ tenorApiKey: inputApiKey.value.trim() })\n    tenorApiKey.value = inputApiKey.value.trim()\n    inputApiKey.value = ''\n    showMessage('API Key 已保存', 'success')\n  } catch (error) {\n    console.error('Failed to save API key:', error)\n    showMessage('API Key 保存失败', 'error')\n  }\n}\n\nconst clearApiKey = async () => {\n  try {\n    await chrome.storage.local.remove(['tenorApiKey'])\n    tenorApiKey.value = ''\n    searchResults.value = []\n    selectedGifs.value.clear()\n    hasSearched.value = false\n    showMessage('API Key 已清除', 'success')\n  } catch (error) {\n    console.error('Failed to clear API key:', error)\n    showMessage('API Key 清除失败', 'error')\n  }\n}\n\nconst searchGifs = async () => {\n  if (!searchQuery.value.trim() || !tenorApiKey.value || isSearching.value) return\n\n  isSearching.value = true\n  hasSearched.value = true\n  searchResults.value = []\n  selectedGifs.value.clear()\n  nextPos.value = ''\n\n  try {\n    const url = new URL('https://tenor.googleapis.com/v2/search')\n    url.searchParams.set('q', searchQuery.value.trim())\n    url.searchParams.set('key', tenorApiKey.value)\n    url.searchParams.set('limit', searchLimit.value.toString())\n    url.searchParams.set('contentfilter', contentFilter.value)\n    url.searchParams.set('media_filter', 'tinygif,gif')\n\n    const response = await fetch(url.toString())\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n    }\n\n    const data = await response.json()\n\n    if (data.results && Array.isArray(data.results)) {\n      searchResults.value = data.results\n      nextPos.value = data.next || ''\n      hasMore.value = !!data.next\n    } else {\n      searchResults.value = []\n      hasMore.value = false\n    }\n  } catch (error) {\n    console.error('Search failed:', error)\n    showMessage('搜索失败，请检查 API Key 或网络连接', 'error')\n    searchResults.value = []\n    hasMore.value = false\n  } finally {\n    isSearching.value = false\n  }\n}\n\nconst loadMore = async () => {\n  if (!nextPos.value || isLoadingMore.value) return\n\n  isLoadingMore.value = true\n\n  try {\n    const url = new URL('https://tenor.googleapis.com/v2/search')\n    url.searchParams.set('q', searchQuery.value.trim())\n    url.searchParams.set('key', tenorApiKey.value)\n    url.searchParams.set('limit', searchLimit.value.toString())\n    url.searchParams.set('contentfilter', contentFilter.value)\n    url.searchParams.set('media_filter', 'tinygif,gif')\n    url.searchParams.set('pos', nextPos.value)\n\n    const response = await fetch(url.toString())\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n    }\n\n    const data = await response.json()\n\n    if (data.results && Array.isArray(data.results)) {\n      searchResults.value.push(...data.results)\n      nextPos.value = data.next || ''\n      hasMore.value = !!data.next\n    }\n  } catch (error) {\n    console.error('Load more failed:', error)\n    showMessage('加载更多失败', 'error')\n  } finally {\n    isLoadingMore.value = false\n  }\n}\n\nconst toggleSelection = (gif: TenorGif) => {\n  if (selectedGifs.value.has(gif.id)) {\n    selectedGifs.value.delete(gif.id)\n  } else {\n    selectedGifs.value.add(gif.id)\n  }\n}\n\nconst importSelected = () => {\n  if (selectedGifs.value.size === 0) return\n\n  if (availableGroups.value.length > 0) {\n    selectedGroupId.value = availableGroups.value[0].id\n  }\n  showGroupModal.value = true\n}\n\nconst confirmImport = async () => {\n  if (!selectedGroupId.value || selectedGifs.value.size === 0) return\n\n  isImporting.value = true\n\n  try {\n    const gifsToImport = searchResults.value.filter(gif => selectedGifs.value.has(gif.id))\n    let successCount = 0\n\n    for (const gif of gifsToImport) {\n      try {\n        const emoji = {\n          packet: Date.now(),\n          name: gif.content_description || `tenor-${gif.id}`,\n          url:\n            (gif.media_formats.gif && gif.media_formats.gif.url) ||\n            (gif.media_formats.tinygif && gif.media_formats.tinygif.url) ||\n            ''\n        }\n\n        emojiStore.addEmoji(selectedGroupId.value, emoji)\n        successCount++\n      } catch (error) {\n        console.error('Failed to import GIF:', gif.id, error)\n      }\n    }\n\n    if (successCount > 0) {\n      showMessage(`成功导入 ${successCount} 个 GIF`, 'success')\n      selectedGifs.value.clear()\n      showGroupModal.value = false\n    } else {\n      showMessage('导入失败', 'error')\n    }\n  } catch (error) {\n    console.error('Import failed:', error)\n    showMessage('导入失败', 'error')\n  } finally {\n    isImporting.value = false\n  }\n}\n\nconst showMessage = (text: string, type: 'success' | 'error' = 'success') => {\n  message.value = { text, type }\n  setTimeout(() => {\n    message.value.text = ''\n  }, 3000)\n}\n</script>\n\n<template>\n  <div class=\"min-h-screen bg-gray-50\">\n    <!-- Header -->\n    <header class=\"bg-white shadow-sm border-b\">\n      <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div class=\"flex justify-between items-center py-6\">\n          <div>\n            <h1 class=\"text-2xl font-bold text-gray-900\">Tenor GIF 搜索</h1>\n            <p class=\"text-sm text-gray-600\">搜索并导入 Tenor GIF 表情到你的收藏</p>\n          </div>\n        </div>\n      </div>\n    </header>\n\n    <!-- Main Content -->\n    <main class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <!-- API Key Setup -->\n      <div v-if=\"!tenorApiKey\" class=\"bg-white rounded-lg shadow-sm border p-6 mb-8\">\n        <h2 class=\"text-lg font-semibold text-gray-900 mb-4\">配置 Tenor API</h2>\n        <p class=\"text-sm text-gray-600 mb-4\">\n          请先设置你的 Tenor API Key。你可以在\n          <a\n            href=\"https://developers.google.com/tenor/guides/quickstart\"\n            target=\"_blank\"\n            class=\"text-blue-600 hover:text-blue-800 underline\"\n          >\n            Tenor 开发者中心\n          </a>\n          申请免费的 API Key。\n        </p>\n\n        <div class=\"space-y-4\">\n          <div>\n            <label for=\"api-key\" class=\"block text-sm font-medium text-gray-700\">\n              Tenor API Key\n            </label>\n            <input\n              id=\"api-key\"\n              v-model=\"inputApiKey\"\n              type=\"text\"\n              class=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n              placeholder=\"输入你的 Tenor API Key\"\n            />\n          </div>\n          <button\n            @click=\"saveApiKey\"\n            :disabled=\"!inputApiKey.trim()\"\n            class=\"px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\n          >\n            保存 API Key\n          </button>\n        </div>\n      </div>\n\n      <!-- Search Interface -->\n      <div v-else class=\"space-y-6\">\n        <!-- API Key Management -->\n        <div class=\"bg-white rounded-lg shadow-sm border p-4\">\n          <div class=\"flex justify-between items-center\">\n            <div>\n              <h3 class=\"text-sm font-medium text-gray-900\">API Key 已配置</h3>\n              <p class=\"text-xs text-gray-500\">Key: {{ tenorApiKey.substring(0, 8) }}...</p>\n            </div>\n            <button\n              @click=\"clearApiKey\"\n              class=\"px-3 py-1 text-sm text-red-600 hover:bg-red-50 rounded transition-colors\"\n            >\n              重新配置\n            </button>\n          </div>\n        </div>\n\n        <!-- Search Bar -->\n        <div class=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div class=\"flex gap-4\">\n            <input\n              v-model=\"searchQuery\"\n              @keyup.enter=\"searchGifs\"\n              type=\"text\"\n              placeholder=\"搜索 GIF...\"\n              class=\"flex-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n            />\n            <button\n              @click=\"searchGifs\"\n              :disabled=\"isSearching || !searchQuery.trim()\"\n              class=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\n            >\n              {{ isSearching ? '搜索中...' : '搜索' }}\n            </button>\n          </div>\n\n          <!-- Advanced Options -->\n          <div class=\"mt-4 flex gap-4 text-sm\">\n            <div class=\"flex items-center\">\n              <ADropdown>\n                <template #overlay>\n                  <AMenu @click=\"info => onSearchLimitSelect(info)\">\n                    <AMenu.Item key=\"12\">12 个结果</AMenu.Item>\n                    <AMenu.Item key=\"24\">24 个结果</AMenu.Item>\n                    <AMenu.Item key=\"48\">48 个结果</AMenu.Item>\n                  </AMenu>\n                </template>\n                <AButton>\n                  {{ searchLimit }} 个结果\n                  <DownOutlined />\n                </AButton>\n              </ADropdown>\n            </div>\n\n            <div class=\"flex items-center\">\n              <ADropdown>\n                <template #overlay>\n                  <AMenu @click=\"info => onContentFilterSelect(info)\">\n                    <AMenu.Item key=\"high\">高安全级别</AMenu.Item>\n                    <AMenu.Item key=\"medium\">中等安全级别</AMenu.Item>\n                    <AMenu.Item key=\"low\">低安全级别</AMenu.Item>\n                    <AMenu.Item key=\"off\">关闭过滤</AMenu.Item>\n                  </AMenu>\n                </template>\n                <AButton>\n                  {{ contentFilter }}\n                  <DownOutlined />\n                </AButton>\n              </ADropdown>\n            </div>\n          </div>\n        </div>\n\n        <!-- Search Results -->\n        <div v-if=\"searchResults.length > 0\" class=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div class=\"flex justify-between items-center mb-4\">\n            <h3 class=\"text-lg font-semibold text-gray-900\">搜索结果</h3>\n            <div v-if=\"selectedGifs.size > 0\" class=\"flex gap-2\">\n              <span class=\"text-sm text-gray-600\">已选择 {{ selectedGifs.size }} 个</span>\n              <button\n                @click=\"importSelected\"\n                class=\"px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700 transition-colors\"\n              >\n                导入选中\n              </button>\n            </div>\n          </div>\n\n          <div class=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            <div\n              v-for=\"gif in searchResults\"\n              :key=\"gif.id\"\n              class=\"relative group cursor-pointer\"\n              @click=\"toggleSelection(gif)\"\n            >\n              <div\n                class=\"aspect-square bg-gray-100 rounded-lg overflow-hidden\"\n                :class=\"{\n                  'ring-2 ring-blue-500': selectedGifs.has(gif.id),\n                  'ring-1 ring-gray-200': !selectedGifs.has(gif.id)\n                }\"\n              >\n                <img\n                  :src=\"gif.media_formats?.tinygif?.url || gif.media_formats?.gif?.url || ''\"\n                  :alt=\"gif.content_description\"\n                  class=\"w-full h-full object-cover\"\n                  loading=\"lazy\"\n                />\n              </div>\n\n              <!-- Selection indicator -->\n              <div\n                v-if=\"selectedGifs.has(gif.id)\"\n                class=\"absolute top-2 right-2 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs\"\n              >\n                ✓\n              </div>\n\n              <!-- GIF info -->\n              <div class=\"mt-2\">\n                <p class=\"text-xs text-gray-600 truncate\" :title=\"gif.content_description\">\n                  {{ gif.content_description || 'Untitled' }}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <!-- Load More -->\n          <div v-if=\"hasMore\" class=\"mt-6 text-center\">\n            <button\n              @click=\"loadMore\"\n              :disabled=\"isLoadingMore\"\n              class=\"px-6 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:bg-gray-100 disabled:cursor-not-allowed transition-colors\"\n            >\n              {{ isLoadingMore ? '加载中...' : '加载更多' }}\n            </button>\n          </div>\n        </div>\n\n        <!-- No Results -->\n        <div\n          v-else-if=\"hasSearched && !isSearching\"\n          class=\"bg-white rounded-lg shadow-sm border p-6 text-center\"\n        >\n          <p class=\"text-gray-500\">未找到相关 GIF，请尝试其他关键词</p>\n        </div>\n      </div>\n    </main>\n\n    <!-- Group Selection Modal -->\n    <div\n      v-if=\"showGroupModal\"\n      class=\"fixed inset-0 z-50 overflow-y-auto\"\n      aria-labelledby=\"modal-title\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n    >\n      <div\n        class=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\"\n      >\n        <div\n          class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n          @click=\"showGroupModal = false\"\n        ></div>\n\n        <div\n          class=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6\"\n        >\n          <div>\n            <h3 class=\"text-lg leading-6 font-medium text-gray-900 mb-4\">选择目标分组</h3>\n\n            <div class=\"space-y-2 max-h-60 overflow-y-auto\">\n              <label\n                v-for=\"group in availableGroups\"\n                :key=\"group.id\"\n                class=\"flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\"\n              >\n                <input type=\"radio\" :value=\"group.id\" v-model=\"selectedGroupId\" class=\"mr-3\" />\n                <div class=\"flex items-center gap-2\">\n                  <span class=\"text-lg\">{{ group.icon }}</span>\n                  <span class=\"font-medium\">{{ group.name }}</span>\n                  <span class=\"text-sm text-gray-500\">\n                    ({{ group.emojis?.length || 0 }} 个表情)\n                  </span>\n                </div>\n              </label>\n            </div>\n\n            <div class=\"mt-6 flex gap-3\">\n              <button\n                @click=\"confirmImport\"\n                :disabled=\"!selectedGroupId || isImporting\"\n                class=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\n              >\n                {{ isImporting ? '导入中...' : `导入 ${selectedGifs.size} 个 GIF` }}\n              </button>\n              <button\n                @click=\"showGroupModal = false\"\n                class=\"px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors\"\n              >\n                取消\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Success/Error Messages -->\n    <div\n      v-if=\"message.text\"\n      class=\"fixed top-4 right-4 max-w-sm w-full bg-white border border-gray-200 rounded-lg shadow-lg z-50\"\n      :class=\"{\n        'border-green-200 bg-green-50': message.type === 'success',\n        'border-red-200 bg-red-50': message.type === 'error'\n      }\"\n    >\n      <div class=\"p-4\">\n        <div class=\"flex\">\n          <div class=\"flex-shrink-0\">\n            <span\n              class=\"w-5 h-5 flex items-center justify-center rounded-full text-sm\"\n              :class=\"{\n                'bg-green-100 text-green-600': message.type === 'success',\n                'bg-red-100 text-red-600': message.type === 'error'\n              }\"\n            >\n              {{ message.type === 'success' ? '✓' : '✕' }}\n            </span>\n          </div>\n          <div class=\"ml-3\">\n            <p\n              class=\"text-sm font-medium\"\n              :class=\"{\n                'text-green-800': message.type === 'success',\n                'text-red-800': message.type === 'error'\n              }\"\n            >\n              {{ message.text }}\n            </p>\n          </div>\n          <div class=\"ml-auto pl-3\">\n            <button\n              @click=\"message.text = ''\"\n              class=\"inline-flex text-gray-400 hover:text-gray-600\"\n            >\n              <span class=\"sr-only\">关闭</span>\n              ✕\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\tenor\\main.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\types\\defaultEmojiGroups.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\types\\emoji.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [921, 924], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [921, 924], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 98,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 98,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export interface EmojiGroup {\n  id: string\n  name: string\n  icon: string\n  order: number\n  emojis: Emoji[]\n}\n\nexport interface Emoji {\n  id: string\n  packet: number\n  name: string\n  url: string\n  displayUrl?: string // Optional display URL, different from output URL\n  width?: number\n  height?: number\n  groupId: string\n  // Favorites usage tracking fields\n  usageCount?: number\n  lastUsed?: number // timestamp\n  addedAt?: number // timestamp when first added to favorites\n}\n\nexport interface AppSettings {\n  imageScale: number // 5 to 150\n  defaultGroup: string\n  showSearchBar: boolean\n  gridColumns: number // 2 to 8\n  outputFormat: 'markdown' | 'html' // 输出格式选择\n  forceMobileMode?: boolean // 强制移动模式\n  lastModified?: number // timestamp for sync comparison\n}\n\nexport interface DefaultEmojiData {\n  groups: EmojiGroup[]\n  settings: AppSettings\n}\n\n// Emoji validation function\nexport function validateEmojiArray(data: any[]): {\n  valid: boolean\n  errors: string[]\n} {\n  const errors: string[] = []\n\n  if (!Array.isArray(data)) {\n    return { valid: false, errors: ['数据必须是数组格式'] }\n  }\n\n  if (data.length === 0) {\n    return { valid: false, errors: ['数组不能为空'] }\n  }\n\n  data.forEach((emoji, index) => {\n    const prefix = `第${index + 1}个表情`\n\n    // 检查必需字段\n    if (!emoji.id || typeof emoji.id !== 'string') {\n      errors.push(`${prefix}: id字段必须是非空字符串`)\n    }\n\n    if (!emoji.name || typeof emoji.name !== 'string') {\n      errors.push(`${prefix}: name字段必须是非空字符串`)\n    }\n\n    if (!emoji.url || typeof emoji.url !== 'string') {\n      errors.push(`${prefix}: url字段必须是非空字符串`)\n    } else if (!isValidUrl(emoji.url)) {\n      errors.push(`${prefix}: url格式无效`)\n    }\n\n    if (!emoji.groupId || typeof emoji.groupId !== 'string') {\n      errors.push(`${prefix}: groupId字段必须是非空字符串`)\n    }\n\n    // 检查packet字段\n    if (emoji.packet !== undefined && (!Number.isInteger(emoji.packet) || emoji.packet < 0)) {\n      errors.push(`${prefix}: packet字段必须是非负整数`)\n    }\n\n    // 检查可选的width和height字段\n    if (emoji.width !== undefined && (!Number.isInteger(emoji.width) || emoji.width <= 0)) {\n      errors.push(`${prefix}: width字段必须是正整数`)\n    }\n\n    if (emoji.height !== undefined && (!Number.isInteger(emoji.height) || emoji.height <= 0)) {\n      errors.push(`${prefix}: height字段必须是正整数`)\n    }\n  })\n\n  return { valid: errors.length === 0, errors }\n}\n\nfunction isValidUrl(string: string): boolean {\n  try {\n    new URL(string)\n    return true\n  } catch (_) {\n    return false\n  }\n}\n\n// Default emoji data loaded from JSON\nimport { defaultEmojiGroups } from './defaultEmojiGroups'\n\nconst defaultSettings: AppSettings = {\n  imageScale: 100,\n  defaultGroup: 'nachoneko',\n  showSearchBar: true,\n  gridColumns: 4,\n  outputFormat: 'markdown', // 默认使用markdown格式\n  forceMobileMode: false // 默认不强制移动模式\n}\n\nexport { defaultEmojiGroups, defaultSettings }\n\n// Legacy support - export flat emoji list for backward compatibility\nexport const defaultEmojiSet = defaultEmojiGroups\n  .flatMap(group => group.emojis)\n  .map(emoji => ({\n    packet: emoji.packet,\n    name: emoji.name,\n    url: emoji.url,\n    width: emoji.width,\n    height: emoji.height\n  }))\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\types\\imageGenerator.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_request' is defined but never used.",
        "line": 32,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_request" },
            "fix": { "range": [662, 687], "text": "" },
            "desc": "Remove unused variable '_request'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_key' is defined but never used.",
        "line": 33,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_key" },
            "fix": { "range": [720, 732], "text": "" },
            "desc": "Remove unused variable '_key'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_url' is defined but never used.",
        "line": 35,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_url" },
            "fix": { "range": [780, 793], "text": "" },
            "desc": "Remove unused variable '_url'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_filename' is defined but never used.",
        "line": 35,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_filename" },
            "fix": { "range": [792, 811], "text": "" },
            "desc": "Remove unused variable '_filename'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_url' is defined but never used.",
        "line": 36,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_url" },
            "fix": { "range": [847, 859], "text": "" },
            "desc": "Remove unused variable '_url'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_model' is defined but never used.",
        "line": 37,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_model" },
            "fix": { "range": [888, 902], "text": "" },
            "desc": "Remove unused variable '_model'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\userscript\\userscript-main.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 39,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 39,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [1092, 1168], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 48,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 48,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1520, 1606], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 57,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 57,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [1889, 1967], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 66,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 66,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [2234, 2304], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 70,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 70,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [2328, 2403], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 75,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 75,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2518, 2521], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2518, 2521], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 76,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 76,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [2527, 2594], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 82,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 82,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2833, 2856], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 136,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 136,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 19
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 141,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 141,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [5237, 5283], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 298,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 298,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10840, 10843], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10840, 10843], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 388,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 388,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [13622, 13693], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 391,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 391,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [13724, 13813], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-alert",
        "severity": 1,
        "message": "Unexpected alert.",
        "line": 476,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "unexpected",
        "endLine": 476,
        "endColumn": 27
      },
      {
        "ruleId": "no-alert",
        "severity": 1,
        "message": "Unexpected alert.",
        "line": 492,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "unexpected",
        "endLine": 492,
        "endColumn": 34
      },
      {
        "ruleId": "no-alert",
        "severity": 1,
        "message": "Unexpected alert.",
        "line": 497,
        "column": 7,
        "nodeType": "CallExpression",
        "messageId": "unexpected",
        "endLine": 497,
        "endColumn": 50
      },
      {
        "ruleId": "no-alert",
        "severity": 1,
        "message": "Unexpected alert.",
        "line": 513,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "unexpected",
        "endLine": 513,
        "endColumn": 36
      },
      {
        "ruleId": "no-alert",
        "severity": 1,
        "message": "Unexpected alert.",
        "line": 518,
        "column": 9,
        "nodeType": "CallExpression",
        "messageId": "unexpected",
        "endLine": 518,
        "endColumn": 35
      },
      {
        "ruleId": "no-alert",
        "severity": 1,
        "message": "Unexpected alert.",
        "line": 532,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "unexpected",
        "endLine": 532,
        "endColumn": 68
      },
      {
        "ruleId": "no-alert",
        "severity": 1,
        "message": "Unexpected alert.",
        "line": 662,
        "column": 5,
        "nodeType": "CallExpression",
        "messageId": "unexpected",
        "endLine": 662,
        "endColumn": 19
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 765,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 765,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [26549, 26626], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 771,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 771,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [26728, 26812], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 881,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 881,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [30506, 30579], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 975,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 975,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [33562, 33621], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 990,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 990,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [33912, 33988], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 1001,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 1001,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [34187, 34331], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 1006,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 1006,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [34393, 34486], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 1021,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 1021,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [34852, 34932], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 1030,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 1030,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [35042, 35112], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 1033,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 1033,
        "endColumn": 14,
        "suggestions": [
          {
            "fix": { "range": [35151, 35237], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 29,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Main userscript entry point - adapted from content script\nimport {\n  loadDataFromLocalStorage,\n  addEmojiToUserscript,\n  exportUserscriptData,\n  importUserscriptData,\n  syncFromManager,\n  saveDataToLocalStorage,\n  type UserscriptStorage\n} from './userscript-storage'\n\n// Global state for userscript\nconst userscriptState: UserscriptStorage = {\n  emojiGroups: [],\n  settings: {\n    imageScale: 30,\n    gridColumns: 4,\n    outputFormat: 'markdown',\n    forceMobileMode: false,\n    defaultGroup: 'nachoneko',\n    showSearchBar: true\n  }\n}\n\n// Initialize from localStorage\nfunction initializeUserscriptData() {\n  const data = loadDataFromLocalStorage()\n  userscriptState.emojiGroups = data.emojiGroups\n  userscriptState.settings = data.settings\n}\n\n// Check if current page should have emoji injection (copied from content script)\nfunction shouldInjectEmoji(): boolean {\n  // Check for discourse meta tags\n  const discourseMetaTags = document.querySelectorAll(\n    'meta[name*=\"discourse\"], meta[content*=\"discourse\"], meta[property*=\"discourse\"]'\n  )\n  if (discourseMetaTags.length > 0) {\n    console.log('[Emoji Extension Userscript] Discourse detected via meta tags')\n    return true\n  }\n\n  // Check for common forum/discussion platforms\n  const generatorMeta = document.querySelector('meta[name=\"generator\"]')\n  if (generatorMeta) {\n    const content = generatorMeta.getAttribute('content')?.toLowerCase() || ''\n    if (content.includes('discourse') || content.includes('flarum') || content.includes('phpbb')) {\n      console.log('[Emoji Extension Userscript] Forum platform detected via generator meta')\n      return true\n    }\n  }\n\n  // Check current domain - allow linux.do and other known sites\n  const hostname = window.location.hostname.toLowerCase()\n  const allowedDomains = ['linux.do', 'meta.discourse.org']\n  if (allowedDomains.some(domain => hostname.includes(domain))) {\n    console.log('[Emoji Extension Userscript] Allowed domain detected:', hostname)\n    return true\n  }\n\n  // Check for editor elements that suggest a discussion platform\n  const editors = document.querySelectorAll(\n    'textarea.d-editor-input, .ProseMirror.d-editor-input, .composer-input, .reply-area textarea'\n  )\n  if (editors.length > 0) {\n    console.log('[Emoji Extension Userscript] Discussion editor detected')\n    return true\n  }\n\n  console.log('[Emoji Extension Userscript] No compatible platform detected')\n  return false\n}\n\n// Insert emoji into editor (adapted from content script)\nfunction insertEmojiIntoEditor(emoji: any) {\n  console.log('[Emoji Extension Userscript] Inserting emoji:', emoji)\n\n  const textarea = document.querySelector('textarea.d-editor-input') as HTMLTextAreaElement | null\n  const proseMirror = document.querySelector('.ProseMirror.d-editor-input') as HTMLElement | null\n\n  if (!textarea && !proseMirror) {\n    console.error('找不到输入框')\n    return\n  }\n\n  // Extract dimensions from URL or use defaults\n  const dimensionMatch = emoji.url?.match(/_(\\d{3,})x(\\d{3,})\\./)\n  let width = '500'\n  let height = '500'\n\n  if (dimensionMatch) {\n    width = dimensionMatch[1]\n    height = dimensionMatch[2]\n  } else if (emoji.width && emoji.height) {\n    width = emoji.width.toString()\n    height = emoji.height.toString()\n  }\n\n  const scale = userscriptState.settings?.imageScale || 30\n  const outputFormat = userscriptState.settings?.outputFormat || 'markdown'\n\n  if (textarea) {\n    let insertText = ''\n\n    if (outputFormat === 'html') {\n      const scaledWidth = Math.max(1, Math.round(Number(width) * (scale / 100)))\n      const scaledHeight = Math.max(1, Math.round(Number(height) * (scale / 100)))\n      insertText = `<img src=\"${emoji.url}\" title=\":${emoji.name}:\" class=\"emoji only-emoji\" alt=\":${emoji.name}:\" loading=\"lazy\" width=\"${scaledWidth}\" height=\"${scaledHeight}\" style=\"aspect-ratio: ${scaledWidth} / ${scaledHeight};\"> `\n    } else {\n      insertText = `![${emoji.name}|${width}x${height},${scale}%](${emoji.url}) `\n    }\n\n    const selectionStart = textarea.selectionStart\n    const selectionEnd = textarea.selectionEnd\n    textarea.value =\n      textarea.value.substring(0, selectionStart) +\n      insertText +\n      textarea.value.substring(selectionEnd, textarea.value.length)\n    textarea.selectionStart = textarea.selectionEnd = selectionStart + insertText.length\n    textarea.focus()\n\n    // Trigger input event\n    const inputEvent = new Event('input', { bubbles: true, cancelable: true })\n    textarea.dispatchEvent(inputEvent)\n  } else if (proseMirror) {\n    const imgWidth = Number(width) || 500\n    const scaledWidth = Math.max(1, Math.round(imgWidth * (scale / 100)))\n    const htmlContent = `<img src=\"${emoji.url}\" alt=\"${emoji.name}\" width=\"${width}\" height=\"${height}\" data-scale=\"${scale}\" style=\"width: ${scaledWidth}px\">`\n\n    try {\n      // Try clipboard approach first\n      const dataTransfer = new DataTransfer()\n      dataTransfer.setData('text/html', htmlContent)\n      const pasteEvent = new ClipboardEvent('paste', { clipboardData: dataTransfer, bubbles: true })\n      proseMirror.dispatchEvent(pasteEvent)\n    } catch (error) {\n      try {\n        // Fallback to execCommand\n        document.execCommand('insertHTML', false, htmlContent)\n      } catch (fallbackError) {\n        console.error('无法向富文本编辑器中插入表情', fallbackError)\n      }\n    }\n  }\n}\n\n// Find toolbars where we can inject buttons (copied from injector.ts)\nconst toolbarSelectors = ['.d-editor-button-bar[role=\"toolbar\"]', '.chat-composer__inner-container']\n\nfunction findAllToolbars(): HTMLElement[] {\n  const toolbars: HTMLElement[] = []\n  for (const selector of toolbarSelectors) {\n    const elements = document.querySelectorAll(selector)\n    toolbars.push(...(Array.from(elements) as HTMLElement[]))\n  }\n  return toolbars\n}\n\n// Check if URL is an image\nfunction isImageUrl(url: string): boolean {\n  if (!url || typeof url !== 'string') return false\n  try {\n    const pathname = new URL(url).pathname.toLowerCase()\n    return /\\.(jpg|jpeg|png|gif|bmp|webp|svg|ico)(\\?.*)?$/i.test(pathname)\n  } catch {\n    return false\n  }\n}\n\n// Create emoji picker (simplified version)\nasync function createEmojiPicker(): Promise<HTMLElement> {\n  const groups = userscriptState.emojiGroups\n  const picker = document.createElement('div')\n  picker.className = 'fk-d-menu -animated -expanded'\n  picker.setAttribute('data-identifier', 'emoji-picker')\n  picker.setAttribute('role', 'dialog')\n  picker.style.cssText = 'max-width: 400px; visibility: visible; z-index: 999999;'\n\n  const innerContent = document.createElement('div')\n  innerContent.className = 'fk-d-menu__inner-content'\n\n  const emojiPicker = document.createElement('div')\n  emojiPicker.className = 'emoji-picker'\n\n  // Filter container\n  const filterContainer = document.createElement('div')\n  filterContainer.className = 'emoji-picker__filter-container'\n\n  const filterInputContainer = document.createElement('div')\n  filterInputContainer.className = 'emoji-picker__filter filter-input-container'\n\n  const filterInput = document.createElement('input')\n  filterInput.className = 'filter-input'\n  filterInput.placeholder = '按表情符号名称搜索…'\n  filterInput.type = 'text'\n  filterInputContainer.appendChild(filterInput)\n  filterContainer.appendChild(filterInputContainer)\n\n  // Content\n  const content = document.createElement('div')\n  content.className = 'emoji-picker__content'\n\n  const sectionsNav = document.createElement('div')\n  sectionsNav.className = 'emoji-picker__sections-nav'\n\n  // Add management button at the start of sections nav\n  const managementButton = document.createElement('button')\n  managementButton.className = 'btn no-text btn-flat emoji-picker__section-btn management-btn'\n  managementButton.setAttribute('tabindex', '-1')\n  managementButton.type = 'button'\n  managementButton.innerHTML = '⚙️'\n  managementButton.title = '管理表情 - 点击打开完整管理界面'\n  managementButton.style.borderRight = '1px solid #ddd'\n\n  managementButton.addEventListener('click', () => {\n    openManagementInterface()\n  })\n  sectionsNav.appendChild(managementButton)\n\n  // Add settings button\n  const settingsButton = document.createElement('button')\n  settingsButton.className = 'btn no-text btn-flat emoji-picker__section-btn settings-btn'\n  settingsButton.setAttribute('tabindex', '-1')\n  settingsButton.type = 'button'\n  settingsButton.innerHTML = '🔧'\n  settingsButton.title = '设置'\n  settingsButton.style.borderRight = '1px solid #ddd'\n\n  settingsButton.addEventListener('click', () => {\n    showSettingsModal()\n  })\n  sectionsNav.appendChild(settingsButton)\n\n  const scrollableContent = document.createElement('div')\n  scrollableContent.className = 'emoji-picker__scrollable-content'\n\n  const sections = document.createElement('div')\n  sections.className = 'emoji-picker__sections'\n  sections.setAttribute('role', 'button')\n\n  // Create sections for each group\n  groups.forEach((group, index) => {\n    if (!group?.emojis?.length) return\n\n    // Section navigation button\n    const navButton = document.createElement('button')\n    navButton.className = `btn no-text btn-flat emoji-picker__section-btn ${index === 0 ? 'active' : ''}`\n    navButton.setAttribute('tabindex', '-1')\n    navButton.setAttribute('data-section', group.id)\n    navButton.type = 'button'\n\n    const icon = group.icon || '📁'\n    if (isImageUrl(icon)) {\n      const img = document.createElement('img')\n      img.src = icon\n      img.alt = group.name || ''\n      img.className = 'emoji-group-icon'\n      img.style.width = '18px'\n      img.style.height = '18px'\n      img.style.objectFit = 'contain'\n      navButton.appendChild(img)\n    } else {\n      navButton.textContent = String(icon)\n    }\n\n    navButton.title = group.name\n    navButton.addEventListener('click', () => {\n      sectionsNav\n        .querySelectorAll('.emoji-picker__section-btn')\n        .forEach(btn => btn.classList.remove('active'))\n      navButton.classList.add('active')\n      const section = sections.querySelector(`[data-section=\"${group.id}\"]`)\n      if (section) {\n        section.scrollIntoView({ behavior: 'smooth', block: 'start' })\n      }\n    })\n    sectionsNav.appendChild(navButton)\n\n    // Section content\n    const section = document.createElement('div')\n    section.className = 'emoji-picker__section'\n    section.setAttribute('data-section', group.id)\n    section.setAttribute('role', 'region')\n    section.setAttribute('aria-label', group.name)\n\n    const titleContainer = document.createElement('div')\n    titleContainer.className = 'emoji-picker__section-title-container'\n\n    const title = document.createElement('h2')\n    title.className = 'emoji-picker__section-title'\n    title.textContent = group.name\n    titleContainer.appendChild(title)\n\n    const emojisContainer = document.createElement('div')\n    emojisContainer.className = 'emoji-picker__section-emojis'\n\n    let validEmojis = 0\n    group.emojis.forEach((emoji: any) => {\n      if (!emoji || typeof emoji !== 'object' || !emoji.url || !emoji.name) return\n\n      const img = document.createElement('img')\n      img.width = 32\n      img.height = 32\n      img.className = 'emoji'\n      img.src = emoji.url\n      img.setAttribute('tabindex', '0')\n      img.setAttribute('data-emoji', emoji.name)\n      img.alt = emoji.name\n      img.title = `:${emoji.name}:`\n      img.loading = 'lazy'\n\n      img.addEventListener('click', () => {\n        insertEmojiIntoEditor(emoji)\n        picker.remove()\n      })\n\n      img.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault()\n          insertEmojiIntoEditor(emoji)\n          picker.remove()\n        }\n      })\n\n      emojisContainer.appendChild(img)\n      validEmojis++\n    })\n\n    if (validEmojis === 0) {\n      const emptyMessage = document.createElement('div')\n      emptyMessage.textContent = `${group.name} 组暂无有效表情`\n      emptyMessage.style.cssText = 'padding: 20px; text-align: center; color: #999;'\n      emojisContainer.appendChild(emptyMessage)\n    }\n\n    section.appendChild(titleContainer)\n    section.appendChild(emojisContainer)\n    sections.appendChild(section)\n  })\n\n  // Filter functionality\n  filterInput.addEventListener('input', e => {\n    const query = ((e.target as HTMLInputElement).value || '').toLowerCase()\n    sections.querySelectorAll('img').forEach(img => {\n      const emojiName = img.getAttribute('data-emoji')?.toLowerCase() || ''\n      img.style.display = query === '' || emojiName.includes(query) ? '' : 'none'\n    })\n\n    sections.querySelectorAll('.emoji-picker__section').forEach(section => {\n      const visibleImages = section.querySelectorAll('img:not([style*=\"none\"])')\n      const titleContainer = section.querySelector(\n        '.emoji-picker__section-title-container'\n      ) as HTMLElement | null\n      if (titleContainer) {\n        titleContainer.style.display = visibleImages.length > 0 ? '' : 'none'\n      }\n    })\n  })\n\n  scrollableContent.appendChild(sections)\n  content.appendChild(sectionsNav)\n  content.appendChild(scrollableContent)\n  emojiPicker.appendChild(filterContainer)\n  emojiPicker.appendChild(content)\n  innerContent.appendChild(emojiPicker)\n  picker.appendChild(innerContent)\n\n  return picker\n}\n\n// Open management interface\nfunction openManagementInterface() {\n  // Check if we can access the manager in the same domain\n  try {\n    const managerUrl = window.location.origin + '/emoji-manager.html'\n\n    // Try to open in a new tab\n    const newWindow = window.open(\n      managerUrl,\n      'emojiManager',\n      'width=1200,height=800,scrollbars=yes,resizable=yes'\n    )\n\n    if (!newWindow) {\n      // Fallback: Show instructions modal\n      showManagementModal()\n    } else {\n      console.log('[Emoji Extension Userscript] Opened management interface')\n    }\n  } catch (error) {\n    console.error('[Emoji Extension Userscript] Failed to open management interface:', error)\n    showManagementModal()\n  }\n}\n\n// Show management modal with instructions and data operations\nfunction showManagementModal() {\n  const modal = document.createElement('div')\n  modal.style.cssText = `\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.8);\n    z-index: 999999;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  `\n\n  const content = document.createElement('div')\n  content.style.cssText = `\n    background: white;\n    border-radius: 8px;\n    padding: 24px;\n    max-width: 600px;\n    max-height: 80vh;\n    overflow-y: auto;\n    position: relative;\n  `\n\n  content.innerHTML = `\n    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;\">\n      <h2 style=\"margin: 0; color: #333;\">表情管理</h2>\n      <button id=\"closeModal\" style=\"background: none; border: none; font-size: 24px; cursor: pointer; color: #999;\">×</button>\n    </div>\n    \n    <div style=\"margin-bottom: 20px;\">\n      <h3 style=\"color: #555;\">快速操作</h3>\n      <div style=\"display: flex; gap: 8px; margin-bottom: 16px;\">\n        <button id=\"exportBtn\" style=\"padding: 8px 16px; background: #1890ff; color: white; border: none; border-radius: 4px; cursor: pointer;\">导出数据</button>\n        <button id=\"syncBtn\" style=\"padding: 8px 16px; background: #52c41a; color: white; border: none; border-radius: 4px; cursor: pointer;\">同步管理器数据</button>\n        <button id=\"importBtn\" style=\"padding: 8px 16px; background: #722ed1; color: white; border: none; border-radius: 4px; cursor: pointer;\">导入数据</button>\n      </div>\n    </div>\n    \n    <div style=\"background: #f5f5f5; padding: 16px; border-radius: 4px; margin-bottom: 16px;\">\n      <h3 style=\"color: #555; margin-top: 0;\">完整管理界面</h3>\n      <p style=\"margin: 8px 0; color: #666;\">\n        要使用完整的表情管理功能，请：<br>\n        1. 下载并保存管理界面文件<br>\n        2. 在浏览器中打开该文件<br>\n        3. 在管理界面中编辑表情后，点击\"同步到用户脚本\"\n      </p>\n      <button id=\"downloadManager\" style=\"padding: 8px 16px; background: #fa8c16; color: white; border: none; border-radius: 4px; cursor: pointer;\">下载管理界面</button>\n    </div>\n    \n    <div id=\"importSection\" style=\"display: none; background: #f0f8ff; padding: 16px; border-radius: 4px;\">\n      <h3 style=\"color: #555; margin-top: 0;\">导入数据</h3>\n      <textarea id=\"importData\" style=\"width: 100%; height: 150px; border: 1px solid #ddd; border-radius: 4px; padding: 8px; font-family: monospace; font-size: 12px;\" placeholder=\"粘贴要导入的JSON数据...\"></textarea>\n      <div style=\"margin-top: 8px;\">\n        <button id=\"confirmImport\" style=\"padding: 8px 16px; background: #52c41a; color: white; border: none; border-radius: 4px; cursor: pointer;\">确认导入</button>\n        <button id=\"cancelImport\" style=\"padding: 8px 16px; background: #d9d9d9; color: #666; border: none; border-radius: 4px; cursor: pointer; margin-left: 8px;\">取消</button>\n      </div>\n    </div>\n    \n    <div style=\"background: #fff2e8; padding: 12px; border-radius: 4px; border-left: 4px solid #fa8c16; font-size: 14px; color: #595959;\">\n      <strong>提示：</strong>当前数据包含 ${userscriptState.emojiGroups.length} 个分组，共 ${userscriptState.emojiGroups.reduce((acc, g) => acc + (g.emojis?.length || 0), 0)} 个表情\n    </div>\n  `\n\n  modal.appendChild(content)\n  document.body.appendChild(modal)\n\n  // Event listeners\n  content.querySelector('#closeModal')?.addEventListener('click', () => {\n    modal.remove()\n  })\n\n  content.querySelector('#exportBtn')?.addEventListener('click', () => {\n    const data = exportUserscriptData()\n    navigator.clipboard\n      .writeText(data)\n      .then(() => {\n        alert('数据已复制到剪贴板')\n      })\n      .catch(() => {\n        // Fallback: show in text area\n        const textarea = document.createElement('textarea')\n        textarea.value = data\n        textarea.style.cssText =\n          'width: 100%; height: 200px; margin: 8px 0; font-family: monospace; font-size: 12px;'\n        content.appendChild(textarea)\n        textarea.select()\n      })\n  })\n\n  content.querySelector('#syncBtn')?.addEventListener('click', () => {\n    const synced = syncFromManager()\n    if (synced) {\n      alert('数据同步成功！请刷新页面以查看更新。')\n      modal.remove()\n      // Reload userscript data\n      initializeUserscriptData()\n    } else {\n      alert('未找到管理器数据。请先在管理界面中操作，然后点击\"同步到用户脚本\"。')\n    }\n  })\n\n  content.querySelector('#importBtn')?.addEventListener('click', () => {\n    const importSection = content.querySelector('#importSection') as HTMLElement | null\n    if (importSection) {\n      importSection.style.display = importSection.style.display === 'none' ? 'block' : 'none'\n    }\n  })\n\n  content.querySelector('#confirmImport')?.addEventListener('click', () => {\n    const textarea = content.querySelector('#importData') as HTMLTextAreaElement\n    if (textarea && textarea.value.trim()) {\n      const success = importUserscriptData(textarea.value.trim())\n      if (success) {\n        alert('数据导入成功！请刷新页面以查看更新。')\n        modal.remove()\n        // Reload userscript data\n        initializeUserscriptData()\n      } else {\n        alert('数据导入失败，请检查格式是否正确。')\n      }\n    }\n  })\n\n  content.querySelector('#cancelImport')?.addEventListener('click', () => {\n    const importSection = content.querySelector('#importSection') as HTMLElement | null\n    if (importSection) {\n      importSection.style.display = 'none'\n    }\n  })\n\n  content.querySelector('#downloadManager')?.addEventListener('click', () => {\n    // We can't download the file directly in userscript, so show instructions\n    alert('请访问 GitHub 仓库下载 emoji-manager.html 文件，或者联系开发者获取完整管理界面。')\n  })\n\n  // Close on outside click\n  modal.addEventListener('click', e => {\n    if (e.target === modal) {\n      modal.remove()\n    }\n  })\n}\n\n// Show settings modal\nfunction showSettingsModal() {\n  const modal = document.createElement('div')\n  modal.style.cssText = `\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.8);\n    z-index: 999999;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  `\n\n  const content = document.createElement('div')\n  content.style.cssText = `\n    background: white;\n    border-radius: 8px;\n    padding: 24px;\n    max-width: 500px;\n    max-height: 80vh;\n    overflow-y: auto;\n    position: relative;\n  `\n\n  content.innerHTML = `\n    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;\">\n      <h2 style=\"margin: 0; color: #333;\">设置</h2>\n      <button id=\"closeModal\" style=\"background: none; border: none; font-size: 24px; cursor: pointer; color: #999;\">×</button>\n    </div>\n    \n    <div style=\"margin-bottom: 16px;\">\n      <label style=\"display: block; margin-bottom: 8px; color: #555; font-weight: 500;\">图片缩放比例: <span id=\"scaleValue\">${userscriptState.settings.imageScale}%</span></label>\n      <input type=\"range\" id=\"scaleSlider\" min=\"5\" max=\"150\" step=\"5\" value=\"${userscriptState.settings.imageScale}\" \n             style=\"width: 100%; margin-bottom: 8px;\">\n    </div>\n    \n    <div style=\"margin-bottom: 16px;\">\n      <label style=\"display: block; margin-bottom: 8px; color: #555; font-weight: 500;\">输出格式:</label>\n      <div style=\"display: flex; gap: 16px;\">\n        <label style=\"display: flex; align-items: center; color: #666;\">\n          <input type=\"radio\" name=\"outputFormat\" value=\"markdown\" ${userscriptState.settings.outputFormat === 'markdown' ? 'checked' : ''} style=\"margin-right: 4px;\">\n          Markdown\n        </label>\n        <label style=\"display: flex; align-items: center; color: #666;\">\n          <input type=\"radio\" name=\"outputFormat\" value=\"html\" ${userscriptState.settings.outputFormat === 'html' ? 'checked' : ''} style=\"margin-right: 4px;\">\n          HTML\n        </label>\n      </div>\n    </div>\n    \n    <div style=\"margin-bottom: 16px;\">\n      <label style=\"display: flex; align-items: center; color: #555; font-weight: 500;\">\n        <input type=\"checkbox\" id=\"showSearchBar\" ${userscriptState.settings.showSearchBar ? 'checked' : ''} style=\"margin-right: 8px;\">\n        显示搜索栏\n      </label>\n    </div>\n    \n    <div style=\"display: flex; gap: 8px; justify-content: flex-end;\">\n      <button id=\"resetSettings\" style=\"padding: 8px 16px; background: #f5f5f5; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;\">重置</button>\n      <button id=\"saveSettings\" style=\"padding: 8px 16px; background: #1890ff; color: white; border: none; border-radius: 4px; cursor: pointer;\">保存</button>\n    </div>\n  `\n\n  modal.appendChild(content)\n  document.body.appendChild(modal)\n\n  // Event listeners\n  const scaleSlider = content.querySelector('#scaleSlider') as HTMLInputElement\n  const scaleValue = content.querySelector('#scaleValue') as HTMLElement\n\n  scaleSlider?.addEventListener('input', () => {\n    if (scaleValue) {\n      scaleValue.textContent = scaleSlider.value + '%'\n    }\n  })\n\n  content.querySelector('#closeModal')?.addEventListener('click', () => {\n    modal.remove()\n  })\n\n  content.querySelector('#resetSettings')?.addEventListener('click', () => {\n    ;(async () => {\n      const { requestConfirmation } = await import('../utils/confirmService')\n      const ok = await requestConfirmation('重置设置', '确定要重置所有设置吗？')\n      if (ok) {\n        userscriptState.settings = {\n          imageScale: 30,\n          gridColumns: 4,\n          outputFormat: 'markdown',\n          forceMobileMode: false,\n          defaultGroup: 'nachoneko',\n          showSearchBar: true\n        }\n        modal.remove()\n      }\n    })()\n  })\n\n  content.querySelector('#saveSettings')?.addEventListener('click', () => {\n    // Update settings\n    userscriptState.settings.imageScale = parseInt(scaleSlider?.value || '30')\n\n    const outputFormat = content.querySelector(\n      'input[name=\"outputFormat\"]:checked'\n    ) as HTMLInputElement\n    if (outputFormat) {\n      userscriptState.settings.outputFormat = outputFormat.value as 'markdown' | 'html'\n    }\n\n    const showSearchBar = content.querySelector('#showSearchBar') as HTMLInputElement\n    if (showSearchBar) {\n      userscriptState.settings.showSearchBar = showSearchBar.checked\n    }\n\n    // Save to localStorage\n    saveDataToLocalStorage({ settings: userscriptState.settings })\n    alert('设置已保存')\n\n    modal.remove()\n  })\n\n  // Close on outside click\n  modal.addEventListener('click', e => {\n    if (e.target === modal) {\n      modal.remove()\n    }\n  })\n}\n\nlet currentPicker: HTMLElement | null = null\n\nfunction closeCurrentPicker() {\n  if (currentPicker) {\n    currentPicker.remove()\n    currentPicker = null\n  }\n}\n\n// Inject emoji button into toolbar\nfunction injectEmojiButton(toolbar: HTMLElement) {\n  if (toolbar.querySelector('.emoji-extension-button')) {\n    return // Already injected\n  }\n\n  const isChatComposer = toolbar.classList.contains('chat-composer__inner-container')\n\n  const button = document.createElement('button')\n  button.classList.add(\n    'btn',\n    'no-text',\n    'btn-icon',\n    'toolbar__button',\n    'nacho-emoji-picker-button',\n    'emoji-extension-button'\n  )\n\n  if (isChatComposer) {\n    button.classList.add(\n      'fk-d-menu__trigger',\n      'emoji-picker-trigger',\n      'chat-composer-button',\n      'btn-transparent',\n      '-emoji'\n    )\n    button.setAttribute('aria-expanded', 'false')\n    button.setAttribute('data-identifier', 'emoji-picker')\n    button.setAttribute('data-trigger', '')\n  }\n\n  button.title = '表情包'\n  button.type = 'button'\n  button.innerHTML = '🐈‍⬛'\n\n  button.addEventListener('click', async e => {\n    e.stopPropagation()\n\n    if (currentPicker) {\n      closeCurrentPicker()\n      return\n    }\n\n    currentPicker = await createEmojiPicker()\n    document.body.appendChild(currentPicker)\n\n    // Position the picker\n    const buttonRect = button.getBoundingClientRect()\n    if (currentPicker) {\n      currentPicker.style.position = 'fixed'\n      currentPicker.style.top = buttonRect.bottom + 5 + 'px'\n      currentPicker.style.left = buttonRect.left + 'px'\n    }\n\n    // Close on outside click\n    setTimeout(() => {\n      const handleClick = (e: Event) => {\n        if (currentPicker && !currentPicker.contains(e.target as Node) && e.target !== button) {\n          closeCurrentPicker()\n          document.removeEventListener('click', handleClick)\n        }\n      }\n      document.addEventListener('click', handleClick)\n    }, 100)\n  })\n\n  try {\n    // Try to insert in the right place\n    if (isChatComposer) {\n      const existingEmojiTrigger = toolbar.querySelector(\n        '.emoji-picker-trigger:not(.emoji-extension-button)'\n      )\n      if (existingEmojiTrigger) {\n        toolbar.insertBefore(button, existingEmojiTrigger)\n      } else {\n        toolbar.appendChild(button)\n      }\n    } else {\n      toolbar.appendChild(button)\n    }\n  } catch (error) {\n    console.error('[Emoji Extension Userscript] Failed to inject button:', error)\n  }\n}\n\n// Initialize one-click add functionality for image lightboxes\nfunction initOneClickAdd() {\n  console.log('[Emoji Extension Userscript] Initializing one-click add functionality')\n\n  function extractEmojiFromImage(img: HTMLImageElement, titleElement: HTMLElement) {\n    const url = img.src\n    if (!url || !url.startsWith('http')) return null\n\n    let name = ''\n    const titleText = titleElement.textContent || ''\n    const parts = titleText.split('·')\n    if (parts.length > 0) {\n      name = parts[0].trim()\n    }\n\n    if (!name || name.length < 2) {\n      name = img.alt || img.title || extractNameFromUrl(url)\n    }\n\n    name = name.trim()\n    if (name.length === 0) {\n      name = '表情'\n    }\n\n    return { name, url }\n  }\n\n  function extractNameFromUrl(url: string): string {\n    try {\n      const filename = new URL(url).pathname.split('/').pop() || ''\n      const nameWithoutExt = filename.replace(/\\.[^/.]+$/, '')\n      const decoded = decodeURIComponent(nameWithoutExt)\n\n      if (/^[0-9a-f]{8,}$/i.test(decoded) || decoded.length < 2) {\n        return '表情'\n      }\n\n      return decoded || '表情'\n    } catch {\n      return '表情'\n    }\n  }\n\n  function createAddButton(emojiData: { name: string; url: string }) {\n    const link = document.createElement('a')\n    link.className = 'image-source-link emoji-add-link'\n    link.style.cssText = `\n      color: #ffffff;\n      text-decoration: none;\n      cursor: pointer;\n      display: inline-flex;\n      align-items: center;\n      font-size: inherit;\n      font-family: inherit;\n      background: linear-gradient(135deg, #4f46e5, #7c3aed);\n      border: 2px solid #ffffff;\n      border-radius: 6px;\n      padding: 4px 8px;\n      margin: 0 2px;\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      transition: all 0.2s ease;\n      font-weight: 600;\n    `\n\n    link.addEventListener('mouseenter', () => {\n      if (!link.innerHTML.includes('已添加') && !link.innerHTML.includes('失败')) {\n        link.style.background = 'linear-gradient(135deg, #3730a3, #5b21b6)'\n        link.style.transform = 'scale(1.05)'\n        link.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.3)'\n      }\n    })\n\n    link.addEventListener('mouseleave', () => {\n      if (!link.innerHTML.includes('已添加') && !link.innerHTML.includes('失败')) {\n        link.style.background = 'linear-gradient(135deg, #4f46e5, #7c3aed)'\n        link.style.transform = 'scale(1)'\n        link.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)'\n      }\n    })\n\n    link.innerHTML = `\n      <svg class=\"fa d-icon d-icon-plus svg-icon svg-string\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"width: 1em; height: 1em; fill: currentColor; margin-right: 4px;\">\n        <path d=\"M12 4c.55 0 1 .45 1 1v6h6c.55 0 1 .45 1 1s-.45 1-1 1h-6v6c0 .55-.45 1-1 1s-1-.45-1-1v-6H5c-.55 0-1-.45-1-1s.45-1 1-1h6V5c0-.55.45-1 1-1z\"/>\n      </svg>添加表情\n    `\n    link.title = '添加到用户表情'\n\n    link.addEventListener('click', async e => {\n      e.preventDefault()\n      e.stopPropagation()\n\n      const originalHTML = link.innerHTML\n      const originalStyle = link.style.cssText\n\n      try {\n        addEmojiToUserscript(emojiData)\n\n        link.innerHTML = `\n          <svg class=\"fa d-icon d-icon-check svg-icon svg-string\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"width: 1em; height: 1em; fill: currentColor; margin-right: 4px;\">\n            <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n          </svg>已添加\n        `\n        link.style.background = 'linear-gradient(135deg, #10b981, #059669)'\n        link.style.color = '#ffffff'\n        link.style.border = '2px solid #ffffff'\n        link.style.boxShadow = '0 2px 4px rgba(16, 185, 129, 0.3)'\n\n        setTimeout(() => {\n          link.innerHTML = originalHTML\n          link.style.cssText = originalStyle\n        }, 2000)\n      } catch (error) {\n        console.error('[Emoji Extension Userscript] Failed to add emoji:', error)\n\n        link.innerHTML = `\n          <svg class=\"fa d-icon d-icon-times svg-icon svg-string\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style=\"width: 1em; height: 1em; fill: currentColor; margin-right: 4px;\">\n            <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n          </svg>失败\n        `\n        link.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)'\n        link.style.color = '#ffffff'\n        link.style.border = '2px solid #ffffff'\n        link.style.boxShadow = '0 2px 4px rgba(239, 68, 68, 0.3)'\n\n        setTimeout(() => {\n          link.innerHTML = originalHTML\n          link.style.cssText = originalStyle\n        }, 2000)\n      }\n    })\n\n    return link\n  }\n\n  function processLightbox(lightbox: HTMLElement) {\n    if (lightbox.querySelector('.emoji-add-link')) return\n\n    const img = lightbox.querySelector('.mfp-img') as HTMLImageElement | null\n    const title = lightbox.querySelector('.mfp-title') as HTMLElement | null\n\n    if (!img || !title) return\n\n    const emojiData = extractEmojiFromImage(img, title)\n    if (!emojiData) return\n\n    const addButton = createAddButton(emojiData)\n    const sourceLink = title.querySelector('a.image-source-link')\n\n    if (sourceLink) {\n      const separator = document.createTextNode(' · ')\n      title.insertBefore(separator, sourceLink)\n      title.insertBefore(addButton, sourceLink)\n    } else {\n      title.appendChild(document.createTextNode(' · '))\n      title.appendChild(addButton)\n    }\n  }\n\n  function processAllLightboxes() {\n    document.querySelectorAll('.mfp-wrap.mfp-gallery').forEach(lightbox => {\n      if (\n        lightbox.classList.contains('mfp-wrap') &&\n        lightbox.classList.contains('mfp-gallery') &&\n        lightbox.querySelector('.mfp-img')\n      ) {\n        processLightbox(lightbox as HTMLElement)\n      }\n    })\n  }\n\n  // Initial processing\n  setTimeout(processAllLightboxes, 500)\n\n  // Watch for new lightboxes\n  const observer = new MutationObserver(mutations => {\n    let hasNewLightbox = false\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList') {\n        mutation.addedNodes.forEach(node => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            const element = node as HTMLElement\n            if (element.classList && element.classList.contains('mfp-wrap')) {\n              hasNewLightbox = true\n            }\n          }\n        })\n      }\n    })\n\n    if (hasNewLightbox) {\n      setTimeout(processAllLightboxes, 100)\n    }\n  })\n\n  observer.observe(document.body, { childList: true, subtree: true })\n\n  // Also check when page becomes visible (for tab switching)\n  document.addEventListener('visibilitychange', () => {\n    if (!document.hidden) {\n      setTimeout(processAllLightboxes, 200)\n    }\n  })\n}\n\n// Main initialization function\nasync function initializeEmojiFeature(maxAttempts: number = 10, delay: number = 1000) {\n  console.log('[Emoji Extension Userscript] Initializing...')\n\n  initializeUserscriptData()\n  initOneClickAdd()\n\n  let attempts = 0\n\n  function attemptInjection() {\n    attempts++\n\n    const toolbars = findAllToolbars()\n    let injectedCount = 0\n\n    toolbars.forEach(toolbar => {\n      if (!toolbar.querySelector('.emoji-extension-button')) {\n        console.log('[Emoji Extension Userscript] Toolbar found, injecting button.')\n        injectEmojiButton(toolbar)\n        injectedCount++\n      }\n    })\n\n    if (injectedCount > 0 || toolbars.length > 0) {\n      return // Success\n    }\n\n    if (attempts < maxAttempts) {\n      console.log(\n        `[Emoji Extension Userscript] Toolbar not found, attempt ${attempts}/${maxAttempts}. Retrying in ${delay / 1000}s.`\n      )\n      setTimeout(attemptInjection, delay)\n    } else {\n      console.error('[Emoji Extension Userscript] Failed to find toolbar after multiple attempts.')\n    }\n  }\n\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', attemptInjection)\n  } else {\n    attemptInjection()\n  }\n\n  // Periodic checks for new toolbars\n  setInterval(() => {\n    const toolbars = findAllToolbars()\n    toolbars.forEach(toolbar => {\n      if (!toolbar.querySelector('.emoji-extension-button')) {\n        console.log('[Emoji Extension Userscript] New toolbar found, injecting button.')\n        injectEmojiButton(toolbar)\n      }\n    })\n  }, 30000)\n}\n\n// Entry point\nif (shouldInjectEmoji()) {\n  console.log('[Emoji Extension Userscript] Initializing emoji feature')\n  initializeEmojiFeature()\n} else {\n  console.log('[Emoji Extension Userscript] Skipping injection - incompatible platform')\n}\n\nexport {}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\userscript\\userscript-storage.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [172, 175], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [172, 175], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [654, 657], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [654, 657], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 32,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 32,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [873, 941], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 68,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 68,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [1765, 1829], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 72,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 72,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [1849, 2055], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 80,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 80,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2118, 2188], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 115,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 115,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [2993, 3061], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 138,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 138,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3605, 3608], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3605, 3608], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 149,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 149,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3887, 3957], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 151,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 151,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3977, 4042], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 154,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 154,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [4073, 4130], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 163,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 163,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [4304, 4363], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 180,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 180,
        "endColumn": 16,
        "suggestions": [
          {
            "fix": { "range": [4763, 4817], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 183,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 183,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [4858, 4917], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 213,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 213,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5692, 5744], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 218,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 218,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [5795, 5860], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 16,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Storage adapter for userscript environment using localStorage\nimport { getDefaultEmojis } from '../content/default'\n\nexport interface UserscriptStorage {\n  emojiGroups: any[]\n  settings: {\n    imageScale: number\n    gridColumns: number\n    outputFormat: 'markdown' | 'html'\n    forceMobileMode: boolean\n    defaultGroup: string\n    showSearchBar: boolean\n  }\n}\n\nconst STORAGE_KEY = 'emoji_extension_userscript_data'\nconst SETTINGS_KEY = 'emoji_extension_userscript_settings'\n\nexport function loadDataFromLocalStorage(): UserscriptStorage {\n  try {\n    // Load emoji groups\n    const groupsData = localStorage.getItem(STORAGE_KEY)\n    let emojiGroups: any[] = []\n\n    if (groupsData) {\n      try {\n        const parsed = JSON.parse(groupsData)\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          emojiGroups = parsed\n        }\n      } catch (e) {\n        console.warn('[Userscript] Failed to parse stored emoji groups:', e)\n      }\n    }\n\n    // If no valid groups, use defaults\n    if (emojiGroups.length === 0) {\n      const defaultEmojis = getDefaultEmojis()\n      emojiGroups = [\n        {\n          id: 'default',\n          name: '默认表情',\n          icon: '😀',\n          order: 0,\n          emojis: defaultEmojis\n        }\n      ]\n    }\n\n    // Load settings\n    const settingsData = localStorage.getItem(SETTINGS_KEY)\n    let settings = {\n      imageScale: 30,\n      gridColumns: 4,\n      outputFormat: 'markdown' as const,\n      forceMobileMode: false,\n      defaultGroup: 'nachoneko',\n      showSearchBar: true\n    }\n\n    if (settingsData) {\n      try {\n        const parsed = JSON.parse(settingsData)\n        if (parsed && typeof parsed === 'object') {\n          settings = { ...settings, ...parsed }\n        }\n      } catch (e) {\n        console.warn('[Userscript] Failed to parse stored settings:', e)\n      }\n    }\n\n    console.log('[Userscript] Loaded data from localStorage:', {\n      groupsCount: emojiGroups.length,\n      emojisCount: emojiGroups.reduce((acc, g) => acc + (g.emojis?.length || 0), 0),\n      settings\n    })\n\n    return { emojiGroups, settings }\n  } catch (error) {\n    console.error('[Userscript] Failed to load from localStorage:', error)\n\n    // Return defaults on error\n    const defaultEmojis = getDefaultEmojis()\n    return {\n      emojiGroups: [\n        {\n          id: 'default',\n          name: '默认表情',\n          icon: '😀',\n          order: 0,\n          emojis: defaultEmojis\n        }\n      ],\n      settings: {\n        imageScale: 30,\n        gridColumns: 4,\n        outputFormat: 'markdown',\n        forceMobileMode: false,\n        defaultGroup: 'nachoneko',\n        showSearchBar: true\n      }\n    }\n  }\n}\n\nexport function saveDataToLocalStorage(data: Partial<UserscriptStorage>): void {\n  try {\n    if (data.emojiGroups) {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(data.emojiGroups))\n    }\n    if (data.settings) {\n      localStorage.setItem(SETTINGS_KEY, JSON.stringify(data.settings))\n    }\n  } catch (error) {\n    console.error('[Userscript] Failed to save to localStorage:', error)\n  }\n}\n\nexport function addEmojiToUserscript(emojiData: { name: string; url: string }): void {\n  try {\n    const data = loadDataFromLocalStorage()\n\n    // Find or create \"用户添加\" group\n    let userGroup = data.emojiGroups.find(g => g.id === 'user_added')\n    if (!userGroup) {\n      userGroup = {\n        id: 'user_added',\n        name: '用户添加',\n        icon: '⭐',\n        order: 999,\n        emojis: []\n      }\n      data.emojiGroups.push(userGroup)\n    }\n\n    // Check if emoji already exists\n    const exists = userGroup.emojis.some(\n      (e: any) => e.url === emojiData.url || e.name === emojiData.name\n    )\n\n    if (!exists) {\n      userGroup.emojis.push({\n        packet: Date.now(),\n        name: emojiData.name,\n        url: emojiData.url\n      })\n\n      saveDataToLocalStorage({ emojiGroups: data.emojiGroups })\n      console.log('[Userscript] Added emoji to user group:', emojiData.name)\n    } else {\n      console.log('[Userscript] Emoji already exists:', emojiData.name)\n    }\n  } catch (error) {\n    console.error('[Userscript] Failed to add emoji:', error)\n  }\n}\n\nexport function exportUserscriptData(): string {\n  try {\n    const data = loadDataFromLocalStorage()\n    return JSON.stringify(data, null, 2)\n  } catch (error) {\n    console.error('[Userscript] Failed to export data:', error)\n    return ''\n  }\n}\n\nexport function importUserscriptData(jsonData: string): boolean {\n  try {\n    const data = JSON.parse(jsonData)\n\n    if (data.emojiGroups && Array.isArray(data.emojiGroups)) {\n      saveDataToLocalStorage({ emojiGroups: data.emojiGroups })\n    }\n\n    if (data.settings && typeof data.settings === 'object') {\n      saveDataToLocalStorage({ settings: data.settings })\n    }\n\n    console.log('[Userscript] Data imported successfully')\n    return true\n  } catch (error) {\n    console.error('[Userscript] Failed to import data:', error)\n    return false\n  }\n}\n\nexport function syncFromManager(): boolean {\n  try {\n    // Try to load data from manager keys\n    const managerGroups = localStorage.getItem('emoji_extension_manager_groups')\n    const managerSettings = localStorage.getItem('emoji_extension_manager_settings')\n\n    let updated = false\n\n    if (managerGroups) {\n      const groups = JSON.parse(managerGroups)\n      if (Array.isArray(groups)) {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(groups))\n        updated = true\n      }\n    }\n\n    if (managerSettings) {\n      const settings = JSON.parse(managerSettings)\n      if (typeof settings === 'object') {\n        localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings))\n        updated = true\n      }\n    }\n\n    if (updated) {\n      console.log('[Userscript] Synced data from manager')\n    }\n\n    return updated\n  } catch (error) {\n    console.error('[Userscript] Failed to sync from manager:', error)\n    return false\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\userscript\\userscript.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\confirmService.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 2,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 2,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [79, 82], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [79, 82], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [128, 131], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [128, 131], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-alert",
        "severity": 1,
        "message": "Unexpected confirm.",
        "line": 17,
        "column": 28,
        "nodeType": "CallExpression",
        "messageId": "unexpected",
        "endLine": 17,
        "endColumn": 73,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\imageProviders\\BaseProvider.ts",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_request' is defined but never used.",
        "line": 10,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_request" },
            "fix": { "range": [370, 395], "text": "" },
            "desc": "Remove unused variable '_request'."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 40,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 40,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [1172, 1212], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 58,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 58,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [1723, 1787], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1855, 1858], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1855, 1858], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { GenerateRequest } from '@/types/imageGenerator'\n\nexport abstract class BaseProvider {\n  abstract name: string\n  abstract displayName: string\n  protected apiKey: string = ''\n\n  // Implementations must provide a typed generateImages method\n  // Use a leading underscore to avoid 'defined but never used' lint warnings in base class\n  abstract generateImages(_request: GenerateRequest): Promise<string[]>\n\n  setApiKey(key: string): void {\n    this.apiKey = key\n    localStorage.setItem(`${this.name}_api_key`, key)\n  }\n\n  loadApiKey(): string {\n    const saved = localStorage.getItem(`${this.name}_api_key`)\n    if (saved) {\n      this.apiKey = saved\n      return saved\n    }\n    return ''\n  }\n\n  async downloadImage(url: string, filename: string): Promise<void> {\n    try {\n      const response = await fetch(url)\n      const blob = await response.blob()\n\n      const downloadUrl = URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = downloadUrl\n      a.download = filename\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n      URL.revokeObjectURL(downloadUrl)\n    } catch (error) {\n      console.error('Download failed:', error)\n      throw new Error('下载失败，请稍后重试')\n    }\n  }\n\n  copyToClipboard(url: string): Promise<void> {\n    return navigator.clipboard.writeText(url).catch(() => {\n      // Fallback for older browsers\n      const textarea = document.createElement('textarea')\n      textarea.value = url\n      document.body.appendChild(textarea)\n      textarea.select()\n      document.execCommand('copy')\n      document.body.removeChild(textarea)\n    })\n  }\n\n  protected handleApiError(error: unknown, providerName: string): never {\n    console.error(`${providerName} image generation failed:`, error)\n\n    const message = typeof error === 'string' ? error : (error as any)?.message || ''\n\n    if (message.includes('401') || message.includes('API_KEY_INVALID')) {\n      throw new Error('API Key 无效，请检查您的密钥')\n    } else if (message.includes('429') || message.includes('QUOTA_EXCEEDED')) {\n      throw new Error('API 请求过于频繁或配额已用完，请稍后重试')\n    } else if (message.includes('403') || message.includes('PERMISSION_DENIED')) {\n      throw new Error('权限被拒绝，请检查 API Key 权限设置')\n    }\n\n    if (typeof error === 'string') throw new Error(error)\n    throw error as Error\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\imageProviders\\ChutesAIProvider.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1405, 1408], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1405, 1408], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 103,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 103,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3248, 3251], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3248, 3251], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { BaseProvider } from './BaseProvider'\n\nimport type { GenerateRequest } from '@/types/imageGenerator'\n\nexport class ChutesAIProvider extends BaseProvider {\n  name = 'chutesai'\n  displayName = 'Chutes AI'\n  private apiEndpoint = 'https://image.chutes.ai/generate'\n  selectedModel: string = 'neta-lumina'\n\n  setModel(model: string): void {\n    this.selectedModel = model\n    localStorage.setItem('chutesai_selected_model', model)\n  }\n\n  loadSelectedModel(): void {\n    const saved = localStorage.getItem('chutesai_selected_model')\n    if (saved) {\n      this.selectedModel = saved\n    }\n  }\n\n  getSelectedModel(): string {\n    return this.selectedModel\n  }\n\n  async generateImages(request: GenerateRequest): Promise<string[]> {\n    if (!this.apiKey) {\n      throw new Error('请先设置 Chutes AI API Token')\n    }\n\n    // Map aspect ratio to dimensions\n    const sizeMap: Record<string, { width: number; height: number }> = {\n      '1:1': { width: 1024, height: 1024 },\n      '16:9': { width: 1344, height: 768 },\n      '9:16': { width: 768, height: 1344 },\n      '4:3': { width: 1152, height: 896 },\n      '3:4': { width: 896, height: 1152 }\n    }\n\n    const size = sizeMap[request.aspectRatio] || { width: 1024, height: 1024 }\n    const stylePrompt = request.style ? ` in ${request.style} style` : ''\n    const fullPrompt = `${request.prompt}${stylePrompt}, high quality, detailed`\n\n    let requestBody: any\n\n    // Configure request based on selected model\n    if (this.selectedModel === 'neta-lumina') {\n      requestBody = {\n        model: 'neta-lumina',\n        prompt: fullPrompt,\n        cfg: 4.5,\n        seed: 0,\n        steps: 30,\n        width: Math.max(768, Math.min(2048, size.width)),\n        height: Math.max(768, Math.min(2048, size.height)),\n        sampler: 'res_multistep',\n        scheduler: 'linear_quadratic',\n        negative_prompt: 'blurry, worst quality, low quality'\n      }\n    } else if (this.selectedModel === 'chroma') {\n      requestBody = {\n        model: 'chroma',\n        prompt: fullPrompt,\n        cfg: 4.5,\n        seed: 0,\n        steps: 30,\n        width: Math.max(200, Math.min(2048, size.width)),\n        height: Math.max(200, Math.min(2048, size.height))\n      }\n    } else if (this.selectedModel === 'JuggernautXL') {\n      requestBody = {\n        model: 'JuggernautXL',\n        prompt: fullPrompt,\n        seed: null,\n        width: Math.max(128, Math.min(2048, size.width)),\n        height: Math.max(128, Math.min(2048, size.height)),\n        guidance_scale: 7.5,\n        negative_prompt: '',\n        num_inference_steps: 25\n      }\n    }\n\n    try {\n      // Generate multiple images by making multiple requests\n      const imageUrls: string[] = []\n\n      for (let i = 0; i < request.numberOfImages; i++) {\n        const response = await fetch(this.apiEndpoint, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${this.apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        })\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}))\n          throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`)\n        }\n\n        const data: any = await response.json()\n\n        if (!data.success || !data.data?.url) {\n          throw new Error(data.error || '没有生成任何图片，请尝试修改您的描述')\n        }\n\n        imageUrls.push(data.data.url)\n      }\n\n      return imageUrls\n    } catch (error: unknown) {\n      this.handleApiError(error, 'ChutesAI')\n    }\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\imageProviders\\CloudflareProvider.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2075, 2078], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2075, 2078], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 124,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 124,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3949, 3952], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3949, 3952], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 160,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 160,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [5022, 5062], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { BaseProvider } from './BaseProvider'\n\nimport type { GenerateRequest } from '@/types/imageGenerator'\n\nexport class CloudflareProvider extends BaseProvider {\n  name = 'cloudflare'\n  displayName = 'Cloudflare Workers AI'\n  private apiToken: string = ''\n  private accountId: string = ''\n  selectedModel: string = '@cf/black-forest-labs/flux-1-schnell'\n\n  setApiKey(key: string): void {\n    // For Cloudflare, we expect the key in format: \"accountId:apiToken\"\n    const parts = key.split(':')\n    if (parts.length === 2) {\n      this.accountId = parts[0]\n      this.apiToken = parts[1]\n      localStorage.setItem('cloudflare_account_id', this.accountId)\n      localStorage.setItem('cloudflare_api_token', this.apiToken)\n    } else {\n      // Assume it's just the token and account ID is stored separately\n      this.apiToken = key\n      localStorage.setItem('cloudflare_api_token', key)\n    }\n  }\n\n  loadApiKey(): string {\n    const savedAccountId = localStorage.getItem('cloudflare_account_id')\n    const savedToken = localStorage.getItem('cloudflare_api_token')\n\n    if (savedAccountId && savedToken) {\n      this.accountId = savedAccountId\n      this.apiToken = savedToken\n      return `${savedAccountId}:${savedToken}`\n    } else if (savedToken) {\n      this.apiToken = savedToken\n      return savedToken\n    }\n    return ''\n  }\n\n  setModel(model: string): void {\n    this.selectedModel = model\n    localStorage.setItem('cloudflare_selected_model', model)\n  }\n\n  loadSelectedModel(): void {\n    const saved = localStorage.getItem('cloudflare_selected_model')\n    if (saved) {\n      this.selectedModel = saved\n    }\n  }\n\n  getSelectedModel(): string {\n    return this.selectedModel\n  }\n\n  async generateImages(request: GenerateRequest): Promise<string[]> {\n    if (!this.apiToken) {\n      throw new Error('请先设置 Cloudflare API Token')\n    }\n\n    if (!this.accountId) {\n      throw new Error('请先设置 Cloudflare Account ID')\n    }\n\n    const apiEndpoint = `https://api.cloudflare.com/client/v4/accounts/${this.accountId}/ai/run/${this.selectedModel}`\n\n    let requestBody: any\n\n    if (this.selectedModel === '@cf/black-forest-labs/flux-1-schnell') {\n      // Flux model - simpler parameters\n      const stylePrompt = request.style ? ` in ${request.style} style` : ''\n      const fullPrompt = `${request.prompt}${stylePrompt}, high quality, detailed`\n\n      requestBody = {\n        prompt: fullPrompt,\n        steps: 4 // Default for flux-schnell\n      }\n    } else {\n      // Stable Diffusion XL Lightning model - more parameters\n      const sizeMap: Record<string, { width: number; height: number }> = {\n        '1:1': { width: 1024, height: 1024 },\n        '16:9': { width: 1344, height: 768 },\n        '9:16': { width: 768, height: 1344 },\n        '4:3': { width: 1152, height: 896 },\n        '3:4': { width: 896, height: 1152 }\n      }\n\n      const size = sizeMap[request.aspectRatio] || { width: 1024, height: 1024 }\n      const stylePrompt = request.style ? ` in ${request.style} style` : ''\n      const fullPrompt = `${request.prompt}${stylePrompt}, high quality, detailed`\n\n      requestBody = {\n        prompt: fullPrompt,\n        width: size.width,\n        height: size.height,\n        num_steps: 20,\n        guidance: 7.5\n      }\n    }\n\n    try {\n      const imageUrls: string[] = []\n\n      // Generate multiple images by making multiple requests\n      for (let i = 0; i < request.numberOfImages; i++) {\n        const response = await fetch(apiEndpoint, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${this.apiToken}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        })\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}))\n          throw new Error(\n            errorData.errors?.[0]?.message || `HTTP ${response.status}: ${response.statusText}`\n          )\n        }\n\n        const data: any = await response.json()\n\n        if (!data.success || !data.result?.image) {\n          throw new Error(data.errors?.[0]?.message || '没有生成任何图片，请尝试修改您的描述')\n        }\n\n        // Convert base64 to data URL\n        const dataUrl = `data:image/png;base64,${data.result.image}`\n        imageUrls.push(dataUrl)\n      }\n\n      return imageUrls\n    } catch (error: unknown) {\n      this.handleApiError(error, 'Cloudflare')\n    }\n  }\n\n  async downloadImage(url: string, filename: string): Promise<void> {\n    try {\n      // For data URLs, convert to blob directly\n      if (url.startsWith('data:')) {\n        const response = await fetch(url)\n        const blob = await response.blob()\n\n        const downloadUrl = URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = downloadUrl\n        a.download = filename\n        document.body.appendChild(a)\n        a.click()\n        document.body.removeChild(a)\n        URL.revokeObjectURL(downloadUrl)\n      } else {\n        await super.downloadImage(url, filename)\n      }\n    } catch (error) {\n      console.error('Download failed:', error)\n      throw new Error('下载失败，请稍后重试')\n    }\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\imageProviders\\GeminiProvider.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 59,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 59,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1679, 1682], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1679, 1682], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 84,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 84,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2293, 2296], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2293, 2296], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { BaseProvider } from './BaseProvider'\n\nimport type { GenerateRequest } from '@/types/imageGenerator'\n\nexport class GeminiProvider extends BaseProvider {\n  name = 'gemini'\n  displayName = 'Google Gemini'\n  private apiEndpoint =\n    'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-001:generateImage'\n\n  async generateImages(request: GenerateRequest): Promise<string[]> {\n    if (!this.apiKey) {\n      throw new Error('请先设置 API Key')\n    }\n\n    // Handle image editing mode\n    if (request.editMode && request.inputImage) {\n      return this.editImage(request)\n    }\n\n    const stylePrompt = request.style ? ` in ${request.style} style` : ''\n    const fullPrompt = `${request.prompt}${stylePrompt}, aspect ratio ${request.aspectRatio}, high quality, detailed`\n\n    const requestBody = {\n      prompt: {\n        text: fullPrompt\n      },\n      safetySettings: [\n        {\n          category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n          threshold: 'BLOCK_LOW_AND_ABOVE'\n        },\n        {\n          category: 'HARM_CATEGORY_HATE_SPEECH',\n          threshold: 'BLOCK_LOW_AND_ABOVE'\n        }\n      ],\n      generationConfig: {\n        number: request.numberOfImages\n      }\n    }\n\n    try {\n      const response = await fetch(`${this.apiEndpoint}?key=${this.apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(\n          errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`\n        )\n      }\n\n      const data: any = await response.json()\n\n      if (!data.candidates || data.candidates.length === 0) {\n        throw new Error('没有生成任何图片，请尝试修改您的描述')\n      }\n\n      const imageUrls: string[] = []\n      for (const candidate of data.candidates) {\n        if (candidate.images) {\n          for (const image of candidate.images) {\n            imageUrls.push(image.uri)\n          }\n        }\n      }\n\n      if (imageUrls.length === 0) {\n        throw new Error('生成的图片无法获取，请稍后重试')\n      }\n\n      return imageUrls\n    } catch (error: unknown) {\n      this.handleApiError(error, 'Gemini')\n    }\n  }\n\n  private async editImage(request: any): Promise<string[]> {\n    const editEndpoint =\n      'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent'\n\n    const requestBody = {\n      contents: [\n        {\n          parts: [\n            {\n              text: request.prompt\n            },\n            {\n              inline_data: {\n                mime_type: 'image/jpeg',\n                data: request.inputImage\n              }\n            }\n          ]\n        }\n      ],\n      generationConfig: {\n        responseModalities: ['TEXT', 'IMAGE']\n      }\n    }\n\n    try {\n      const response = await fetch(`${editEndpoint}?key=${this.apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(\n          errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`\n        )\n      }\n\n      const data = await response.json()\n\n      // Extract image data from response\n      const imageUrls: string[] = []\n      if (data.candidates) {\n        for (const candidate of data.candidates) {\n          if (candidate.content && candidate.content.parts) {\n            for (const part of candidate.content.parts) {\n              if (part.inline_data && part.inline_data.data) {\n                // Convert base64 to data URL\n                const dataUrl = `data:${part.inline_data.mime_type || 'image/png'};base64,${part.inline_data.data}`\n                imageUrls.push(dataUrl)\n              }\n            }\n          }\n        }\n      }\n\n      if (imageUrls.length === 0) {\n        throw new Error('图片编辑失败，请尝试修改您的描述')\n      }\n\n      return imageUrls\n    } catch (error: unknown) {\n      this.handleApiError(error, 'Gemini')\n    }\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\imageProviders\\ProviderManager.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 64,
        "column": 30,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 64,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 75,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 75,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2391, 2394], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2391, 2394], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 92,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 92,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [2867, 2907], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 104,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 104,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 111,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 111,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3438, 3441], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3438, 3441], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 118,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 118,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3654, 3657], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3654, 3657], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 125,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 125,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3896, 3899], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3896, 3899], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { GeminiProvider } from './GeminiProvider'\nimport { SiliconFlowProvider } from './SiliconFlowProvider'\nimport { CloudflareProvider } from './CloudflareProvider'\nimport { ChutesAIProvider } from './ChutesAIProvider'\n\nimport type { GenerateRequest, ImageProvider } from '@/types/imageGenerator'\n\nexport class ProviderManager {\n  private providers: Map<string, ImageProvider> = new Map()\n  private currentProvider: ImageProvider\n\n  constructor() {\n    // Initialize providers\n    const geminiProvider = new GeminiProvider()\n    const siliconFlowProvider = new SiliconFlowProvider()\n    const cloudflareProvider = new CloudflareProvider()\n    const chutesAIProvider = new ChutesAIProvider()\n\n    this.providers.set(geminiProvider.name, geminiProvider)\n    this.providers.set(siliconFlowProvider.name, siliconFlowProvider)\n    this.providers.set(cloudflareProvider.name, cloudflareProvider)\n    this.providers.set(chutesAIProvider.name, chutesAIProvider)\n\n    // Set default provider\n    this.currentProvider = geminiProvider\n\n    // Load saved provider selection\n    this.loadSelectedProvider()\n  }\n\n  getProviders(): ImageProvider[] {\n    return Array.from(this.providers.values())\n  }\n\n  getProviderNames(): string[] {\n    return Array.from(this.providers.keys())\n  }\n\n  setCurrentProvider(providerName: string): boolean {\n    const provider = this.providers.get(providerName)\n    if (provider) {\n      this.currentProvider = provider\n      localStorage.setItem('selected_provider', providerName)\n      return true\n    }\n    return false\n  }\n\n  getCurrentProvider(): ImageProvider {\n    return this.currentProvider\n  }\n\n  getCurrentProviderName(): string {\n    return this.currentProvider.name\n  }\n\n  getProvider(name: string): ImageProvider | undefined {\n    return this.providers.get(name)\n  }\n\n  loadSelectedProvider(): void {\n    const saved = localStorage.getItem('selected_provider')\n    if (saved && this.providers.has(saved)) {\n      this.currentProvider = this.providers.get(saved)!\n    }\n  }\n\n  async generateImages(request: GenerateRequest): Promise<string[]> {\n    return this.currentProvider.generateImages(request)\n  }\n\n  async downloadImage(url: string, filename: string): Promise<void> {\n    // Use the current provider's download method if available, otherwise use generic method\n    if ('downloadImage' in this.currentProvider) {\n      return (this.currentProvider as any).downloadImage(url, filename)\n    }\n\n    // Generic download implementation\n    try {\n      const response = await fetch(url)\n      const blob = await response.blob()\n\n      const downloadUrl = URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = downloadUrl\n      a.download = filename\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n      URL.revokeObjectURL(downloadUrl)\n    } catch (error) {\n      console.error('Download failed:', error)\n      throw new Error('下载失败，请稍后重试')\n    }\n  }\n\n  async copyToClipboard(url: string): Promise<void> {\n    if (this.currentProvider.copyToClipboard) {\n      return this.currentProvider.copyToClipboard(url)\n    }\n    // fallback: write to clipboard using navigator\n    try {\n      await navigator.clipboard.writeText(url)\n    } catch (e) {\n      throw new Error('复制失败')\n    }\n  }\n\n  // Provider-specific methods\n  setProviderModel(providerName: string, model: string): void {\n    const provider = this.providers.get(providerName) as any\n    if (provider && typeof provider.setModel === 'function') {\n      provider.setModel(model)\n    }\n  }\n\n  loadProviderModel(providerName: string): void {\n    const provider = this.providers.get(providerName) as any\n    if (provider && typeof provider.loadSelectedModel === 'function') {\n      provider.loadSelectedModel()\n    }\n  }\n\n  getProviderModel(providerName: string): string | undefined {\n    const provider = this.providers.get(providerName) as any\n    if (provider && typeof provider.getSelectedModel === 'function') {\n      return provider.getSelectedModel()\n    }\n    return undefined\n  }\n\n  supportsImageEditing(providerName?: string): boolean {\n    const provider = providerName ? this.providers.get(providerName) : this.currentProvider\n    return provider?.name === 'gemini' // Currently only Gemini supports image editing\n  }\n\n  supportsModels(providerName?: string): boolean {\n    const provider = providerName ? this.providers.get(providerName) : this.currentProvider\n    return provider?.name === 'cloudflare' || provider?.name === 'chutesai'\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\imageProviders\\SiliconFlowProvider.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1616, 1619], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1616, 1619], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { BaseProvider } from './BaseProvider'\n\nimport type { GenerateRequest } from '@/types/imageGenerator'\n\nexport class SiliconFlowProvider extends BaseProvider {\n  name = 'siliconflow'\n  displayName = 'SiliconFlow'\n  private apiEndpoint = 'https://api.siliconflow.cn/v1/images/generations'\n\n  async generateImages(request: GenerateRequest): Promise<string[]> {\n    if (!this.apiKey) {\n      throw new Error('请先设置 SiliconFlow API Key')\n    }\n\n    // Map aspect ratio to image size\n    const sizeMap: Record<string, string> = {\n      '1:1': '1024x1024',\n      '16:9': '1344x768',\n      '9:16': '768x1344',\n      '4:3': '1152x896',\n      '3:4': '896x1152'\n    }\n\n    const imageSize = sizeMap[request.aspectRatio] || '1024x1024'\n    const stylePrompt = request.style ? ` in ${request.style} style` : ''\n    const fullPrompt = `${request.prompt}${stylePrompt}, high quality, detailed`\n\n    const requestBody = {\n      model: 'Kwai-Kolors/Kolors',\n      prompt: fullPrompt,\n      image_size: imageSize,\n      batch_size: request.numberOfImages,\n      num_inference_steps: 20,\n      guidance_scale: 7.5\n    }\n\n    try {\n      const response = await fetch(this.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}))\n        throw new Error(\n          errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`\n        )\n      }\n\n      const data: any = await response.json()\n\n      if (!data.data || data.data.length === 0) {\n        throw new Error('没有生成任何图片，请尝试修改您的描述')\n      }\n\n      return data.data.map((item: { url: string }) => item.url)\n    } catch (error: unknown) {\n      this.handleApiError(error, 'SiliconFlow')\n    }\n  }\n}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\imageProviders\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\indexedDB.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [426, 429], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [426, 429], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 84,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 87,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [439, 442], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [439, 442], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [735, 738], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [735, 738], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 34,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 34,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1381, 1384], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1381, 1384], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1416, 1419], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1416, 1419], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2325, 2328], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2325, 2328], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 91,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 91,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2841, 2844], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2841, 2844], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 92,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 92,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2874, 2877], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2874, 2877], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 101,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 101,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3022, 3025], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3022, 3025], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 158,
        "column": 21,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 158,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [4868, 4868], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 284,
        "column": 19,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 284,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [9354, 9354], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 401,
        "column": 78,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 401,
        "endColumn": 81,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13110, 13113], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13110, 13113], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 402,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 402,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13149, 13152], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13149, 13152], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 403,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 403,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13211, 13214], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13211, 13214], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 403,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 403,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13230, 13233], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13230, 13233], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'err' is defined but never used.",
        "line": 430,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 430,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'err' is defined but never used.",
        "line": 430,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 430,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 439,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 439,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14452, 14455], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14452, 14455], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 456,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 456,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14945, 14948], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14945, 14948], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 456,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 456,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14957, 14960], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14957, 14960], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 459,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 459,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15038, 15041], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15038, 15041], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 518,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 518,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16749, 16752], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16749, 16752], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 600,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 600,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19214, 19217], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19214, 19217], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 603,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 603,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19370, 19373], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19370, 19373], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 630,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 630,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20253, 20256], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20253, 20256], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 21,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// IndexedDB utility for emoji extension\nimport type { EmojiGroup, AppSettings } from '../types/emoji'\nimport { logger, indexedDBWrapper } from '../config/buildFlags'\n\nconst DB_NAME = 'EmojiExtensionDB'\nconst DB_VERSION = 1\n\n// Store names\nconst STORES = {\n  GROUPS: 'groups',\n  SETTINGS: 'settings',\n  FAVORITES: 'favorites'\n} as const\n\n// Logging helper\nfunction logDB(operation: string, store: string, key?: string, data?: any, error?: any) {\n  // 如果日志被禁用，直接返回\n  if (indexedDBWrapper.shouldSkip() && !error) {\n    return\n  }\n\n  const timestamp = new Date().toISOString()\n  const logPrefix = `[IndexedDB ${timestamp}]`\n\n  // Helper to format a safe preview of the data (avoid huge dumps or circular refs)\n  function formatPreview(d: any) {\n    try {\n      const s = JSON.stringify(d)\n      const size = s.length\n      if (size > 2000) {\n        return { preview: s.slice(0, 500) + '... (truncated)', size }\n      }\n      return { preview: JSON.parse(s), size }\n    } catch (e) {\n      try {\n        // Fallback to toString\n        return { preview: String(d) }\n      } catch {\n        return { preview: '[unserializable data]' }\n      }\n    }\n  }\n\n  if (error) {\n    // Make error output human readable (include name/message) while preserving the original error object\n    let errInfo = ''\n    try {\n      if (error && typeof error === 'object') {\n        errInfo = `${(error as any).name || 'Error'}: ${(error as any).message || String(error)}`\n      } else {\n        errInfo = String(error)\n      }\n    } catch {\n      errInfo = String(error)\n    }\n\n    // Some failures (buffer flush per-item failures or cleanup) are non-fatal in tests/environments\n    // where the Chrome extension APIs are not available. Log them as warnings to avoid failing\n    // automated tests that assert no console.error output.\n    const nonFatalFailure = operation.endsWith('_FAILED') || operation.startsWith('FLUSH')\n    if (nonFatalFailure) {\n      logger.warn(\n        `${logPrefix} ${operation} FAILED in \"${store}\"${key ? ` for key \"${key}\"` : ''}: ${errInfo}`,\n        error\n      )\n    } else {\n      logger.error(\n        `${logPrefix} ${operation} FAILED in \"${store}\"${key ? ` for key \"${key}\"` : ''}: ${errInfo}`,\n        error\n      )\n    }\n  } else {\n    if (typeof data !== 'undefined') {\n      const p = formatPreview(data as any)\n      // Print structured output: summary and preview\n      logger.log(\n        `${logPrefix} ${operation} in \"${store}\"${key ? ` for key \"${key}\"` : ''} - size: ${p.size ?? 'unknown'}`,\n        p.preview\n      )\n    } else {\n      logger.log(`${logPrefix} ${operation} in \"${store}\"${key ? ` for key \"${key}\"` : ''}`)\n    }\n  }\n}\n\n// Database connection management\nlet dbInstance: IDBDatabase | null = null\n\n// --- In-memory buffer between app and IndexedDB ---\nconst bufferState = {\n  groups: new Map<string, any>(),\n  settings: undefined as any,\n  favorites: undefined as string[] | undefined,\n  dirty: {\n    groups: false,\n    settings: false,\n    favorites: false\n  }\n}\n\nlet flushTimer: any = null\nconst FLUSH_DEBOUNCE_MS = 1500 // buffer debounce before flushing to IDB\n\nfunction scheduleFlush() {\n  if (flushTimer) clearTimeout(flushTimer)\n  flushTimer = setTimeout(() => void flushBuffer(false), FLUSH_DEBOUNCE_MS)\n}\n\n// Attempt to flush buffer when the page is unloading to reduce lost writes\nif (typeof window !== 'undefined' && window.addEventListener) {\n  try {\n    window.addEventListener('beforeunload', () => {\n      try {\n        // synchronous attempt: schedule a forced flush (best-effort)\n        void flushBuffer(true)\n      } catch {\n        // swallow errors during unload\n      }\n    })\n  } catch {\n    // ignore environments where addEventListener may not be available\n  }\n}\n\nasync function flushBuffer(force = false) {\n  try {\n    // If nothing dirty and not forced, skip\n    if (\n      !force &&\n      !bufferState.dirty.groups &&\n      !bufferState.dirty.settings &&\n      !bufferState.dirty.favorites\n    ) {\n      logDB('FLUSH_SKIP', 'buffer', undefined, { reason: 'no changes' })\n      return\n    }\n\n    const db = await getDB()\n\n    // Flush groups: write each group in its own transaction to avoid one failing put\n    // aborting the whole batch (which previously could leave the store cleared).\n    if (bufferState.dirty.groups || force) {\n      const writtenIds: string[] = []\n\n      for (const [id, value] of bufferState.groups.entries()) {\n        try {\n          // If id is null/undefined, skip and persist to fallback; otherwise coerce to string\n          if (id === null || typeof id === 'undefined') {\n            logDB(\n              'FLUSH_PUT_SKIPPED_INVALID_KEY',\n              STORES.GROUPS,\n              String(id),\n              undefined,\n              'invalid key'\n            )\n            try {\n              saveFallbackToLocal(String(id), value, 'invalid key')\n            } catch {}\n            continue\n          }\n\n          const safeId = String(id)\n          const cleanedValue = cleanDataForStorage(value)\n          const txItem = db.transaction([STORES.GROUPS], 'readwrite')\n          const storeItem = txItem.objectStore(STORES.GROUPS)\n          const req = storeItem.put({ id: safeId, value: cleanedValue })\n\n          await new Promise<void>((resolve, reject) => {\n            req.onsuccess = () => resolve()\n            req.onerror = () => reject(req.error)\n          })\n\n          writtenIds.push(id)\n        } catch (e) {\n          // Log the failing id but continue with others\n          logDB('FLUSH_PUT_FAILED', STORES.GROUPS, id, undefined, e)\n          try {\n            // Attempt to persist the failed item to a local fallback store to avoid data loss\n            const fallback = cleanDataForStorage(value)\n            saveFallbackToLocal(id, fallback, e)\n          } catch {\n            // ignore fallback failures\n          }\n        }\n      }\n\n      // Remove any DB entries that are not present in the buffer anymore.\n      try {\n        const txKeys = db.transaction([STORES.GROUPS], 'readonly')\n        const storeKeys = txKeys.objectStore(STORES.GROUPS)\n        const allKeys: string[] = await new Promise((resolve, reject) => {\n          const getAllReq = storeKeys.getAllKeys()\n          getAllReq.onsuccess = () => resolve(getAllReq.result as string[])\n          getAllReq.onerror = () => reject(getAllReq.error)\n        })\n\n        const toDelete = allKeys.filter(k => !bufferState.groups.has(k))\n\n        for (const key of toDelete) {\n          try {\n            const txDel = db.transaction([STORES.GROUPS], 'readwrite')\n            const storeDel = txDel.objectStore(STORES.GROUPS)\n            const delReq = storeDel.delete(key)\n            await new Promise<void>((resolve, reject) => {\n              delReq.onsuccess = () => resolve()\n              delReq.onerror = () => reject(delReq.error)\n            })\n          } catch (e) {\n            logDB('FLUSH_DELETE_FAILED', STORES.GROUPS, key, undefined, e)\n          }\n        }\n      } catch (e) {\n        logDB('FLUSH_CLEANUP_FAILED', STORES.GROUPS, undefined, undefined, e)\n      }\n\n      bufferState.dirty.groups = false\n      logDB('FLUSH', STORES.GROUPS, undefined, {\n        count: bufferState.groups.size,\n        written: writtenIds.length\n      })\n    }\n\n    // Flush settings\n    if (bufferState.dirty.settings || force) {\n      const tx = db.transaction([STORES.SETTINGS], 'readwrite')\n      const store = tx.objectStore(STORES.SETTINGS)\n      const cleanedSettings = cleanDataForStorage(bufferState.settings)\n      const req = store.put({ id: 'app', value: cleanedSettings })\n      await new Promise<void>((resolve, reject) => {\n        req.onsuccess = () => resolve()\n        req.onerror = () => reject(req.error)\n      })\n      bufferState.dirty.settings = false\n      logDB('FLUSH', STORES.SETTINGS, 'app', cleanedSettings)\n    }\n\n    // Flush favorites\n    if (bufferState.dirty.favorites || force) {\n      const tx = db.transaction([STORES.FAVORITES], 'readwrite')\n      const store = tx.objectStore(STORES.FAVORITES)\n      const cleanedFavorites = cleanDataForStorage(bufferState.favorites || [])\n      const req = store.put({ id: 'list', value: cleanedFavorites })\n      await new Promise<void>((resolve, reject) => {\n        req.onsuccess = () => resolve()\n        req.onerror = () => reject(req.error)\n      })\n      bufferState.dirty.favorites = false\n      logDB('FLUSH', STORES.FAVORITES, 'list', cleanedFavorites)\n    }\n  } catch (error) {\n    logDB('FLUSH', 'buffer', undefined, undefined, error)\n    throw error\n  }\n}\n\nasync function getDB(): Promise<IDBDatabase> {\n  // 如果 IndexedDB 被禁用，抛出错误\n  if (indexedDBWrapper.shouldSkip()) {\n    throw new Error('IndexedDB is disabled by build configuration')\n  }\n\n  if (dbInstance) {\n    return dbInstance\n  }\n\n  return new Promise((resolve, reject) => {\n    logDB('OPEN', 'database')\n    const request = indexedDB.open(DB_NAME, DB_VERSION)\n\n    request.onerror = () => {\n      const error = request.error\n      logDB('OPEN', 'database', undefined, undefined, error)\n      reject(error)\n    }\n\n    request.onsuccess = () => {\n      dbInstance = request.result\n      // attach versionchange handler so we close and clear instance when needed\n      try {\n        dbInstance.onversionchange = () => {\n          logDB('VERSION_CHANGE', 'database')\n          try {\n            dbInstance?.close()\n          } catch {}\n          dbInstance = null\n        }\n      } catch {\n        // non-fatal if handler cannot be attached\n      }\n\n      logDB('OPEN', 'database', undefined, 'success')\n      resolve(dbInstance)\n    }\n\n    request.onupgradeneeded = event => {\n      logDB('UPGRADE', 'database', undefined, `version ${event.newVersion}`)\n      const db = request.result\n\n      // Create object stores\n      if (!db.objectStoreNames.contains(STORES.GROUPS)) {\n        const groupStore = db.createObjectStore(STORES.GROUPS, { keyPath: 'id' })\n        groupStore.createIndex('order', 'order', { unique: false })\n        logDB('CREATE_STORE', STORES.GROUPS)\n      }\n\n      if (!db.objectStoreNames.contains(STORES.SETTINGS)) {\n        db.createObjectStore(STORES.SETTINGS, { keyPath: 'id' })\n        logDB('CREATE_STORE', STORES.SETTINGS)\n      }\n\n      if (!db.objectStoreNames.contains(STORES.FAVORITES)) {\n        db.createObjectStore(STORES.FAVORITES, { keyPath: 'id' })\n        logDB('CREATE_STORE', STORES.FAVORITES)\n      }\n    }\n  })\n}\n\n// Generic IndexedDB operations\nasync function getValue<T>(storeName: string, key: string): Promise<T | undefined> {\n  // 如果 IndexedDB 被禁用，直接返回 undefined\n  if (indexedDBWrapper.shouldSkip()) {\n    logDB('GET_SKIPPED', storeName, key, 'IndexedDB disabled')\n    return undefined\n  }\n\n  try {\n    // If groups are buffered, return from buffer first\n    if (storeName === STORES.GROUPS) {\n      if (bufferState.groups.has(key)) {\n        const v = bufferState.groups.get(key)\n        logDB('GET_BUFFER', storeName, key, v)\n        return v as T\n      }\n    }\n\n    if (\n      storeName === STORES.SETTINGS &&\n      key === 'app' &&\n      typeof bufferState.settings !== 'undefined'\n    ) {\n      logDB('GET_BUFFER', storeName, key, bufferState.settings)\n      return bufferState.settings as T\n    }\n\n    if (\n      storeName === STORES.FAVORITES &&\n      key === 'list' &&\n      typeof bufferState.favorites !== 'undefined'\n    ) {\n      logDB('GET_BUFFER', storeName, key, bufferState.favorites)\n      return bufferState.favorites as T\n    }\n\n    const db = await getDB()\n    const transaction = db.transaction([storeName], 'readonly')\n    const store = transaction.objectStore(storeName)\n\n    return new Promise((resolve, reject) => {\n      const request = store.get(key)\n\n      request.onsuccess = () => {\n        const result = request.result?.value\n\n        // Populate buffer with fetched data for future reads\n        if (storeName === STORES.GROUPS && result) {\n          bufferState.groups.set(key, result)\n        } else if (storeName === STORES.SETTINGS && key === 'app' && result) {\n          bufferState.settings = result\n        } else if (storeName === STORES.FAVORITES && key === 'list' && result) {\n          bufferState.favorites = result\n        }\n\n        logDB('GET', storeName, key, result)\n        resolve(result)\n      }\n\n      request.onerror = () => {\n        logDB('GET', storeName, key, undefined, request.error)\n        reject(request.error)\n      }\n    })\n  } catch (error) {\n    logDB('GET', storeName, key, undefined, error)\n    return undefined\n  }\n}\n\n// Helper function to clean data for IndexedDB storage\nfunction cleanDataForStorage<T>(data: T): T {\n  try {\n    // Deep clone and clean the data to ensure it's serializable\n    const cloned = JSON.parse(JSON.stringify(data))\n\n    // If the serialized payload is very large, trim potentially huge fields (data URLs)\n    const MAX_SERIALIZED_SIZE = 200 * 1024 // 200KB safe threshold\n    try {\n      const s = JSON.stringify(cloned)\n      if (s.length > MAX_SERIALIZED_SIZE) {\n        // Attempt targeted trimming for emoji groups that contain data URLs or very large strings\n        if (cloned && typeof cloned === 'object' && Array.isArray((cloned as any).emojis)) {\n          const group: any = { ...cloned }\n          group.emojis = (group.emojis as any[]).map((emoji: any) => {\n            if (emoji && typeof emoji === 'object') {\n              const e = { ...emoji }\n              if (typeof e.url === 'string') {\n                // Trim inline data URLs and very large URLs\n                if (e.url.startsWith('data:image/') || e.url.length > 100 * 1024) {\n                  // Replace with placeholder and mark trimmed so UI can recover if needed\n                  e._urlTrimmed = true\n                  e._originalUrlLength = e.url.length\n                  e.url = ''\n                }\n              }\n              return e\n            }\n            return emoji\n          })\n\n          const reSerialized = JSON.stringify(group)\n          if (reSerialized.length <= s.length) {\n            logDB('CLEAN_DATA_TRIM', 'groups', undefined, {\n              originalSize: s.length,\n              newSize: reSerialized.length\n            })\n            return group as T\n          }\n        }\n      }\n    } catch (err) {\n      // ignore serialization-check errors\n    }\n\n    return cloned\n  } catch (error) {\n    logDB('CLEAN_DATA', 'failed', undefined, error)\n    // Fallback: try to extract only basic properties\n    if (typeof data === 'object' && data !== null) {\n      const cleaned: any = {}\n      for (const [key, value] of Object.entries(data)) {\n        try {\n          JSON.stringify(value)\n          cleaned[key] = value\n        } catch {\n          // Skip unserializable properties\n          logDB('CLEAN_DATA', `skipped property: ${key}`, undefined, 'unserializable')\n        }\n      }\n      return cleaned as T\n    }\n    return data\n  }\n}\n\n// Persist failed group writes to localStorage as a fallback to avoid data loss\nfunction saveFallbackToLocal(id: string, value: any, error: any) {\n  try {\n    const key = 'idb_fallback_groups'\n    let map: Record<string, any> = {}\n    try {\n      const raw = localStorage.getItem(key)\n      if (raw) map = JSON.parse(raw)\n    } catch {\n      // ignore parse errors and start fresh\n      map = {}\n    }\n\n    map[id] = {\n      value,\n      savedAt: Date.now(),\n      error:\n        error && typeof error === 'object'\n          ? { name: error.name, message: error.message }\n          : String(error)\n    }\n\n    try {\n      localStorage.setItem(key, JSON.stringify(map))\n      logDB('FALLBACK_SAVE', 'localStorage', key, { id, savedAt: map[id].savedAt })\n    } catch (err) {\n      // localStorage may also fail (quota) — log and ignore\n      logDB('FALLBACK_SAVE_FAILED', 'localStorage', key, undefined, err)\n    }\n  } catch {\n    // swallow any unexpected errors in fallback path\n  }\n}\n\nasync function setValue<T>(storeName: string, key: string, value: T): Promise<void> {\n  // 如果 IndexedDB 被禁用，直接返回\n  if (indexedDBWrapper.shouldSkip()) {\n    logDB('SET_SKIPPED', storeName, key, 'IndexedDB disabled')\n    return\n  }\n\n  try {\n    // Clean the data to ensure it's serializable for IndexedDB\n    const cleanedValue = cleanDataForStorage(value)\n\n    // Write to buffer first for groups/settings/favorites\n    if (storeName === STORES.GROUPS) {\n      bufferState.groups.set(key, cleanedValue)\n      bufferState.dirty.groups = true\n      scheduleFlush()\n      logDB('PUT_BUFFER', storeName, key, cleanedValue)\n      return\n    }\n\n    if (storeName === STORES.SETTINGS) {\n      bufferState.settings = cleanedValue\n      bufferState.dirty.settings = true\n      scheduleFlush()\n      logDB('PUT_BUFFER', storeName, key, cleanedValue)\n      return\n    }\n\n    if (storeName === STORES.FAVORITES) {\n      bufferState.favorites = cleanedValue as any\n      bufferState.dirty.favorites = true\n      scheduleFlush()\n      logDB('PUT_BUFFER', storeName, key, cleanedValue)\n      return\n    }\n\n    const db = await getDB()\n    const transaction = db.transaction([storeName], 'readwrite')\n    const store = transaction.objectStore(storeName)\n\n    return new Promise((resolve, reject) => {\n      const request = store.put({ id: String(key), value: cleanedValue })\n\n      request.onsuccess = () => {\n        logDB('PUT', storeName, key, cleanedValue)\n        resolve()\n      }\n\n      request.onerror = () => {\n        logDB('PUT', storeName, key, undefined, request.error)\n        reject(request.error)\n      }\n    })\n  } catch (error) {\n    logDB('PUT', storeName, key, undefined, error)\n    throw error\n  }\n}\n\nasync function deleteValue(storeName: string, key: string): Promise<void> {\n  try {\n    // If buffered, remove from buffer and mark dirty\n    if (storeName === STORES.GROUPS) {\n      bufferState.groups.delete(key)\n      bufferState.dirty.groups = true\n      scheduleFlush()\n      logDB('DELETE_BUFFER', storeName, key)\n      return\n    }\n\n    const db = await getDB()\n    const transaction = db.transaction([storeName], 'readwrite')\n    const store = transaction.objectStore(storeName)\n\n    return new Promise((resolve, reject) => {\n      const request = store.delete(key)\n\n      request.onsuccess = () => {\n        logDB('DELETE', storeName, key)\n        resolve()\n      }\n\n      request.onerror = () => {\n        logDB('DELETE', storeName, key, undefined, request.error)\n        reject(request.error)\n      }\n    })\n  } catch (error) {\n    logDB('DELETE', storeName, key, undefined, error)\n    throw error\n  }\n}\n\nasync function getAllValues<T>(storeName: string): Promise<T[]> {\n  try {\n    // For groups: if buffer has data, use buffer; otherwise fetch from DB\n    if (storeName === STORES.GROUPS) {\n      if (bufferState.groups.size > 0) {\n        const local = Array.from(bufferState.groups.values())\n        logDB('GET_ALL_BUFFER', storeName, undefined, { count: local.length })\n        return local as T[]\n      }\n      // Buffer empty, fetch from DB and populate buffer\n      const db = await getDB()\n      const transaction = db.transaction([storeName], 'readonly')\n      const store = transaction.objectStore(storeName)\n\n      return new Promise((resolve, reject) => {\n        const request = store.getAll()\n\n        request.onsuccess = () => {\n          const results = request.result.map((item: any) => item.value)\n          // Populate buffer with DB data for future reads\n          bufferState.groups.clear()\n          request.result.forEach((item: any) => {\n            bufferState.groups.set(item.id, item.value)\n          })\n          logDB('GET_ALL_DB', storeName, undefined, results)\n          resolve(results)\n        }\n\n        request.onerror = () => {\n          logDB('GET_ALL', storeName, undefined, undefined, request.error)\n          reject(request.error)\n        }\n      })\n    }\n\n    if (storeName === STORES.SETTINGS && typeof bufferState.settings !== 'undefined') {\n      logDB('GET_ALL_BUFFER', storeName, undefined, bufferState.settings)\n      return [bufferState.settings] as unknown as T[]\n    }\n\n    const db = await getDB()\n    const transaction = db.transaction([storeName], 'readonly')\n    const store = transaction.objectStore(storeName)\n\n    return new Promise((resolve, reject) => {\n      const request = store.getAll()\n\n      request.onsuccess = () => {\n        const results = request.result.map((item: any) => item.value)\n        logDB('GET_ALL', storeName, undefined, results)\n        resolve(results)\n      }\n\n      request.onerror = () => {\n        logDB('GET_ALL', storeName, undefined, undefined, request.error)\n        reject(request.error)\n      }\n    })\n  } catch (error) {\n    logDB('GET_ALL', storeName, undefined, undefined, error)\n    return []\n  }\n}\n\nasync function clearStore(storeName: string): Promise<void> {\n  // 如果 IndexedDB 被禁用，直接返回\n  if (indexedDBWrapper.shouldSkip()) {\n    logDB('CLEAR_SKIPPED', storeName, undefined, 'IndexedDB disabled')\n    return\n  }\n\n  try {\n    // Clear buffer if applicable\n    if (storeName === STORES.GROUPS) {\n      bufferState.groups.clear()\n      bufferState.dirty.groups = true\n      logDB('CLEAR_BUFFER', storeName)\n    }\n\n    if (storeName === STORES.SETTINGS) {\n      bufferState.settings = undefined\n      bufferState.dirty.settings = true\n    }\n\n    if (storeName === STORES.FAVORITES) {\n      bufferState.favorites = undefined\n      bufferState.dirty.favorites = true\n    }\n\n    const db = await getDB()\n    const transaction = db.transaction([storeName], 'readwrite')\n    const store = transaction.objectStore(storeName)\n\n    return new Promise((resolve, reject) => {\n      const request = store.clear()\n\n      request.onsuccess = () => {\n        logDB('CLEAR', storeName)\n        resolve()\n      }\n\n      request.onerror = () => {\n        logDB('CLEAR', storeName, undefined, undefined, request.error)\n        reject(request.error)\n      }\n    })\n  } catch (error) {\n    logDB('CLEAR', storeName, undefined, undefined, error)\n    throw error\n  }\n}\n\n// Export buffer control for other modules\nexport { flushBuffer }\n\n// Exported helpers for emoji extension\nexport const indexedDBHelpers = {\n  // Groups\n  async getGroup(groupId: string): Promise<EmojiGroup | undefined> {\n    return getValue<EmojiGroup>(STORES.GROUPS, groupId)\n  },\n\n  async setGroup(group: EmojiGroup): Promise<void> {\n    return setValue(STORES.GROUPS, group.id, group)\n  },\n\n  async getAllGroups(): Promise<EmojiGroup[]> {\n    const groups = await getAllValues<EmojiGroup>(STORES.GROUPS)\n    return groups.sort((a, b) => a.order - b.order)\n  },\n\n  async deleteGroup(groupId: string): Promise<void> {\n    return deleteValue(STORES.GROUPS, groupId)\n  },\n\n  async setAllGroups(groups: EmojiGroup[]): Promise<void> {\n    // Clear existing groups and set new ones\n    await clearStore(STORES.GROUPS)\n\n    // Update buffer first\n    bufferState.groups.clear()\n    for (const group of groups) {\n      bufferState.groups.set(group.id, group)\n      await setValue(STORES.GROUPS, group.id, group)\n    }\n    bufferState.dirty.groups = true\n    // Force immediate flush since this is a bulk operation\n    await flushBuffer(true)\n  },\n\n  // Settings\n  async getSettings(): Promise<AppSettings | undefined> {\n    return getValue<AppSettings>(STORES.SETTINGS, 'app')\n  },\n\n  async setSettings(settings: AppSettings): Promise<void> {\n    return setValue(STORES.SETTINGS, 'app', settings)\n  },\n\n  // Favorites\n  async getFavorites(): Promise<string[]> {\n    const favorites = await getValue<string[]>(STORES.FAVORITES, 'list')\n    return favorites || []\n  },\n\n  async setFavorites(favorites: string[]): Promise<void> {\n    return setValue(STORES.FAVORITES, 'list', favorites)\n  },\n\n  // Utility methods\n  async clearAll(): Promise<void> {\n    await Promise.all([\n      clearStore(STORES.GROUPS),\n      clearStore(STORES.SETTINGS),\n      clearStore(STORES.FAVORITES)\n    ])\n  },\n\n  async isAvailable(): Promise<boolean> {\n    // 首先检查编译期开关\n    if (indexedDBWrapper.shouldSkip()) {\n      return false\n    }\n\n    try {\n      await getDB()\n      return true\n    } catch {\n      return false\n    }\n  }\n}\n\nexport default indexedDBHelpers\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\isImageUrl.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\newStorage.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [368, 371], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [368, 371], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1160, 1163], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1160, 1163], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 38,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 38,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1197, 1200], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1197, 1200], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1271, 1274], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1271, 1274], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 41,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 41,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1312, 1315], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1312, 1315], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 47,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 47,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1430, 1433], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1430, 1433], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 47,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 47,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1443, 1446], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1443, 1446], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1569, 1572], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1569, 1572], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3182, 3185], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3182, 3185], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3672, 3675], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3672, 3675], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 133,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 133,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3976, 3979], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3976, 3979], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 156,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 156,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4598, 4601], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4598, 4601], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 167,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 167,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4908, 4911], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4908, 4911], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 190,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 190,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5548, 5551], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5548, 5551], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 199,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 199,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5864, 5867], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5864, 5867], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 216,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 216,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6328, 6331], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6328, 6331], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 270,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 270,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7839, 7842], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7839, 7842], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 294,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 294,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8765, 8768], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8765, 8768], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 360,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 360,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11095, 11098], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11095, 11098], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 396,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 396,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12217, 12220], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12217, 12220], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 409,
        "column": 20,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 409,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 454,
        "column": 20,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 454,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 467,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 467,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14211, 14214], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14211, 14214], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 626,
        "column": 89,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 626,
        "endColumn": 92,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19078, 19081], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19078, 19081], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'LOCAL_STORAGE' is defined but never used.",
        "line": 25,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "LOCAL_STORAGE" },
            "fix": { "range": [766, 779], "text": "" },
            "desc": "Remove unused variable 'LOCAL_STORAGE'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'SESSION_STORAGE' is defined but never used.",
        "line": 26,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "SESSION_STORAGE" },
            "fix": { "range": [783, 822], "text": "" },
            "desc": "Remove unused variable 'SESSION_STORAGE'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'EXTENSION_STORAGE' is defined but never used.",
        "line": 27,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "EXTENSION_STORAGE" },
            "fix": { "range": [826, 847], "text": "" },
            "desc": "Remove unused variable 'EXTENSION_STORAGE'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'INDEXED_DB' is defined but never used.",
        "line": 28,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "INDEXED_DB" },
            "fix": { "range": [851, 865], "text": "" },
            "desc": "Remove unused variable 'INDEXED_DB'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 478,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 478,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [14499, 14507], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 24,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/* eslint-disable no-unused-vars */\nimport type { EmojiGroup, AppSettings } from '../types/emoji'\nimport { defaultEmojiGroups, defaultSettings } from '../types/emoji'\nimport { logger } from '../config/buildFlags'\n\nimport indexedDBHelpers from './indexedDB'\n\n// In build/test environments `chrome` may not be declared. Provide a loose declaration\ndeclare const chrome: any\n\n// --- Constants ---\nexport const STORAGE_KEYS = {\n  SETTINGS: 'appSettings',\n  FAVORITES: 'favorites',\n  GROUP_INDEX: 'emojiGroupIndex', // For group order and metadata\n  GROUP_PREFIX: 'emojiGroup_' // For individual group storage\n} as const\n\nexport const SYNC_STORAGE_KEYS = {\n  BACKUP: 'emojiExtensionBackup'\n} as const\n\n// Storage priority levels as requested\nexport enum StorageLevel {\n  LOCAL_STORAGE = 1, // Highest priority\n  SESSION_STORAGE = 2,\n  EXTENSION_STORAGE = 3,\n  INDEXED_DB = 4 // Lowest priority/fallback\n}\n\n// --- Chrome API Helper ---\nfunction getChromeAPI() {\n  if (typeof chrome !== 'undefined' && chrome.storage) {\n    return chrome\n  }\n  // Fallback for environments where `chrome` is not immediately available\n  if (typeof window !== 'undefined' && (window as any).chrome) {\n    return (window as any).chrome\n  }\n  if (typeof globalThis !== 'undefined' && (globalThis as any).chrome) {\n    return (globalThis as any).chrome\n  }\n  return null\n}\n\n// --- Logging Helper ---\nfunction logStorage(operation: string, key: string, data?: any, error?: any) {\n  const timestamp = new Date().toISOString()\n  const logPrefix = `[Storage ${timestamp}]`\n\n  function formatPreview(d: any) {\n    try {\n      const s = JSON.stringify(d)\n      const size = s.length\n      if (size > 2000) {\n        return { preview: s.slice(0, 500) + '... (truncated)', size }\n      }\n      return { preview: JSON.parse(s), size }\n    } catch {\n      try {\n        return { preview: String(d) }\n      } catch {\n        return { preview: '[unserializable data]' }\n      }\n    }\n  }\n\n  if (error) {\n    logger.error(`${logPrefix} ${operation} FAILED for \"${key}\":`, error)\n  } else {\n    // Ensure certain success messages explicitly contain the word 'success' so\n    // automated tests that search for 'success' can reliably match them.\n    const shouldMarkSuccess = [\n      'MULTI_SET_SUCCESS',\n      'IDB_SET',\n      'RESET_DEFAULTS',\n      'SYNC_BACKUP'\n    ].includes(operation)\n    const successSuffix = shouldMarkSuccess ? ' - success' : ''\n\n    if (typeof data !== 'undefined') {\n      const p = formatPreview(data)\n      logger.log(\n        `${logPrefix} ${operation} for \"${key}\" - size: ${p.size ?? 'unknown'}${successSuffix}`,\n        p.preview\n      )\n    } else {\n      logger.log(`${logPrefix} ${operation} for \"${key}\"${successSuffix}`)\n    }\n  }\n}\n\n// --- Storage Layer Implementations ---\n\n// Helper function to ensure data is serializable\nfunction ensureSerializable<T>(data: T): T {\n  try {\n    // Test serialization and clean the data\n    return JSON.parse(JSON.stringify(data))\n  } catch (error) {\n    logStorage('SERIALIZE_CLEAN', 'data', undefined, error)\n    // Fallback: create a clean version\n    if (typeof data === 'object' && data !== null && !Array.isArray(data)) {\n      const cleaned: any = {}\n      for (const [key, value] of Object.entries(data)) {\n        try {\n          JSON.stringify(value)\n          cleaned[key] = value\n        } catch {\n          logStorage('SERIALIZE_CLEAN', `skipped property: ${key}`, undefined, 'unserializable')\n        }\n      }\n      return cleaned as T\n    } else if (Array.isArray(data)) {\n      return data.map(item => ensureSerializable(item)) as T\n    }\n    return data\n  }\n}\n\nclass LocalStorageLayer {\n  async get(key: string): Promise<any> {\n    try {\n      if (typeof localStorage === 'undefined') return null\n      const value = localStorage.getItem(key)\n      return value ? JSON.parse(value) : null\n    } catch (error) {\n      logStorage('LOCAL_GET', key, undefined, error)\n      return null\n    }\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    try {\n      if (typeof localStorage === 'undefined') return\n      localStorage.setItem(key, JSON.stringify(value))\n      logStorage('LOCAL_SET', key, value)\n    } catch (error) {\n      logStorage('LOCAL_SET', key, undefined, error)\n      throw error\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      if (typeof localStorage === 'undefined') return\n      localStorage.removeItem(key)\n      logStorage('LOCAL_REMOVE', key)\n    } catch (error) {\n      logStorage('LOCAL_REMOVE', key, undefined, error)\n    }\n  }\n}\n\nclass SessionStorageLayer {\n  async get(key: string): Promise<any> {\n    try {\n      if (typeof sessionStorage === 'undefined') return null\n      const value = sessionStorage.getItem(key)\n      return value ? JSON.parse(value) : null\n    } catch (error) {\n      logStorage('SESSION_GET', key, undefined, error)\n      return null\n    }\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    try {\n      if (typeof sessionStorage === 'undefined') return\n      sessionStorage.setItem(key, JSON.stringify(value))\n      logStorage('SESSION_SET', key, value)\n    } catch (error) {\n      logStorage('SESSION_SET', key, undefined, error)\n      throw error\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      if (typeof sessionStorage === 'undefined') return\n      sessionStorage.removeItem(key)\n      logStorage('SESSION_REMOVE', key)\n    } catch (error) {\n      logStorage('SESSION_REMOVE', key, undefined, error)\n    }\n  }\n}\n\nclass ExtensionStorageLayer {\n  async get(key: string): Promise<any> {\n    const chromeAPI = getChromeAPI()\n    if (!chromeAPI?.storage?.local) {\n      logStorage('EXT_GET', key, { available: false, reason: 'Chrome Storage API not available' })\n      return null\n    }\n\n    return new Promise(resolve => {\n      try {\n        chromeAPI.storage.local.get({ [key]: null }, (result: any) => {\n          if (chromeAPI.runtime.lastError) {\n            logStorage('EXT_GET', key, undefined, chromeAPI.runtime.lastError)\n            resolve(null)\n          } else {\n            const value = result[key]\n            logStorage('EXT_GET', key, value)\n            resolve(value)\n          }\n        })\n      } catch (error) {\n        logStorage('EXT_GET', key, undefined, error)\n        resolve(null)\n      }\n    })\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    const chromeAPI = getChromeAPI()\n    if (!chromeAPI?.storage?.local) {\n      logStorage('EXT_SET', key, { available: false, reason: 'Chrome Storage API not available' })\n      return\n    }\n\n    return new Promise((resolve, reject) => {\n      try {\n        chromeAPI.storage.local.set({ [key]: value }, () => {\n          if (chromeAPI.runtime.lastError) {\n            logStorage('EXT_SET', key, undefined, chromeAPI.runtime.lastError)\n            reject(chromeAPI.runtime.lastError)\n          } else {\n            logStorage('EXT_SET', key, value)\n            resolve()\n          }\n        })\n      } catch (error) {\n        logStorage('EXT_SET', key, undefined, error)\n        reject(error)\n      }\n    })\n  }\n\n  async remove(key: string): Promise<void> {\n    const chromeAPI = getChromeAPI()\n    if (!chromeAPI?.storage?.local) {\n      logStorage('EXT_REMOVE', key, {\n        available: false,\n        reason: 'Chrome Storage API not available'\n      })\n      return\n    }\n\n    return new Promise(resolve => {\n      try {\n        chromeAPI.storage.local.remove([key], () => {\n          if (chromeAPI.runtime.lastError) {\n            logStorage('EXT_REMOVE', key, undefined, chromeAPI.runtime.lastError)\n          } else {\n            logStorage('EXT_REMOVE', key)\n          }\n          resolve()\n        })\n      } catch (error) {\n        logStorage('EXT_REMOVE', key, undefined, error)\n        resolve()\n      }\n    })\n  }\n}\n\nclass IndexedDBLayer {\n  async get(key: string): Promise<any> {\n    try {\n      const isAvailable = await indexedDBHelpers.isAvailable()\n      if (!isAvailable) return null\n\n      if (key === STORAGE_KEYS.SETTINGS) {\n        return await indexedDBHelpers.getSettings()\n      } else if (key === STORAGE_KEYS.FAVORITES) {\n        return await indexedDBHelpers.getFavorites()\n      } else if (key === STORAGE_KEYS.GROUP_INDEX) {\n        const groups = await indexedDBHelpers.getAllGroups()\n        return groups?.map((group, index) => ({ id: group.id, order: index })) || null\n      } else if (key.startsWith(STORAGE_KEYS.GROUP_PREFIX)) {\n        const groupId = key.replace(STORAGE_KEYS.GROUP_PREFIX, '')\n        const groups = await indexedDBHelpers.getAllGroups()\n        return groups?.find(g => g.id === groupId) || null\n      }\n      return null\n    } catch (error) {\n      logStorage('IDB_GET', key, undefined, error)\n      return null\n    }\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    try {\n      const isAvailable = await indexedDBHelpers.isAvailable()\n      if (!isAvailable) return\n\n      // Ensure the value is serializable for IndexedDB\n      const cleanValue = ensureSerializable(value)\n\n      if (key === STORAGE_KEYS.SETTINGS) {\n        await indexedDBHelpers.setSettings(cleanValue)\n      } else if (key === STORAGE_KEYS.FAVORITES) {\n        await indexedDBHelpers.setFavorites(cleanValue)\n      } else if (key === STORAGE_KEYS.GROUP_INDEX) {\n        // For group index, we need to handle this specially\n        logStorage('IDB_SET', key, cleanValue)\n      } else if (key.startsWith(STORAGE_KEYS.GROUP_PREFIX)) {\n        // For individual groups, we need to update the entire groups collection\n        const groups = (await indexedDBHelpers.getAllGroups()) || []\n        const groupId = key.replace(STORAGE_KEYS.GROUP_PREFIX, '')\n        const existingIndex = groups.findIndex(g => g.id === groupId)\n\n        if (existingIndex !== -1) {\n          groups[existingIndex] = cleanValue\n        } else {\n          groups.push(cleanValue)\n        }\n\n        await indexedDBHelpers.setAllGroups(groups)\n      }\n\n      logStorage('IDB_SET', key, cleanValue)\n    } catch (error) {\n      logStorage('IDB_SET', key, undefined, error)\n      throw error\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      const isAvailable = await indexedDBHelpers.isAvailable()\n      if (!isAvailable) return\n\n      if (key.startsWith(STORAGE_KEYS.GROUP_PREFIX)) {\n        const groups = (await indexedDBHelpers.getAllGroups()) || []\n        const groupId = key.replace(STORAGE_KEYS.GROUP_PREFIX, '')\n        const filteredGroups = groups.filter(g => g.id !== groupId)\n        await indexedDBHelpers.setAllGroups(filteredGroups)\n      }\n\n      logStorage('IDB_REMOVE', key)\n    } catch (error) {\n      logStorage('IDB_REMOVE', key, undefined, error)\n    }\n  }\n}\n\n// --- New Storage Manager ---\nclass NewStorageManager {\n  private localStorage = new LocalStorageLayer()\n  private sessionStorage = new SessionStorageLayer()\n  private extensionStorage = new ExtensionStorageLayer()\n  private indexedDBStorage = new IndexedDBLayer()\n\n  private writeTimers = new Map<string, NodeJS.Timeout>()\n\n  // Read with priority: Local → Session → Extension → IndexedDB\n  async get(key: string): Promise<any> {\n    logStorage('MULTI_GET_START', key)\n\n    // Try local storage first\n    let value = await this.localStorage.get(key)\n    if (value !== null && value !== undefined) {\n      logStorage('MULTI_GET_SUCCESS', key, { source: 'localStorage', value })\n      return value\n    }\n\n    // Try session storage\n    value = await this.sessionStorage.get(key)\n    if (value !== null && value !== undefined) {\n      logStorage('MULTI_GET_SUCCESS', key, { source: 'sessionStorage', value })\n      return value\n    }\n\n    // Try extension storage\n    value = await this.extensionStorage.get(key)\n    if (value !== null && value !== undefined) {\n      logStorage('MULTI_GET_SUCCESS', key, { source: 'extensionStorage', value })\n      return value\n    }\n\n    // Try IndexedDB as fallback\n    value = await this.indexedDBStorage.get(key)\n    if (value !== null && value !== undefined) {\n      logStorage('MULTI_GET_SUCCESS', key, { source: 'indexedDB', value })\n      return value\n    }\n\n    logStorage('MULTI_GET_FAILED', key)\n    return null\n  }\n\n  // Write with progressive timers across all layers\n  async set(key: string, value: any, timestamp?: number): Promise<void> {\n    // Ensure the value is serializable before storage\n    const cleanValue = ensureSerializable(value)\n\n    const finalValue = {\n      data: cleanValue,\n      timestamp: timestamp || Date.now()\n    }\n\n    logStorage('MULTI_SET_START', key, finalValue)\n\n    // Clear any existing timer for this key\n    if (this.writeTimers.has(key)) {\n      clearTimeout(this.writeTimers.get(key)!)\n    }\n\n    try {\n      // Immediate write to local storage\n      await this.localStorage.set(key, finalValue)\n\n      // Progressive writes with timers\n      setTimeout(async () => {\n        try {\n          await this.sessionStorage.set(key, finalValue)\n        } catch (error) {\n          logStorage('MULTI_SET_SESSION_FAILED', key, undefined, error)\n        }\n      }, 100)\n\n      setTimeout(async () => {\n        try {\n          await this.extensionStorage.set(key, finalValue)\n        } catch (error) {\n          logStorage('MULTI_SET_EXTENSION_FAILED', key, undefined, error)\n        }\n      }, 500)\n\n      setTimeout(async () => {\n        try {\n          await this.indexedDBStorage.set(key, finalValue)\n        } catch (error) {\n          logStorage('MULTI_SET_INDEXED_FAILED', key, undefined, error)\n        }\n      }, 1000)\n\n      logStorage('MULTI_SET_SUCCESS', key, finalValue)\n    } catch (error) {\n      logStorage('MULTI_SET_FAILED', key, undefined, error)\n      throw error\n    }\n  }\n\n  // Remove from all layers\n  async remove(key: string): Promise<void> {\n    logStorage('MULTI_REMOVE', key)\n\n    // Clear any pending timer\n    if (this.writeTimers.has(key)) {\n      clearTimeout(this.writeTimers.get(key)!)\n      this.writeTimers.delete(key)\n    }\n\n    await Promise.allSettled([\n      this.localStorage.remove(key),\n      this.sessionStorage.remove(key),\n      this.extensionStorage.remove(key),\n      this.indexedDBStorage.remove(key)\n    ])\n  }\n\n  // Conflict resolution: newer timestamp wins\n  async getWithConflictResolution(key: string): Promise<any> {\n    const values = await Promise.allSettled([\n      this.localStorage.get(key),\n      this.sessionStorage.get(key),\n      this.extensionStorage.get(key),\n      this.indexedDBStorage.get(key)\n    ])\n\n    let newestValue = null\n    let newestTimestamp = 0\n\n    values.forEach((result, _index) => {\n      if (result.status === 'fulfilled' && result.value) {\n        const timestamp = result.value.timestamp || 0\n        if (timestamp > newestTimestamp) {\n          newestTimestamp = timestamp\n          newestValue = result.value.data\n        }\n      }\n    })\n\n    if (newestValue !== null) {\n      logStorage('CONFLICT_RESOLUTION', key, { timestamp: newestTimestamp, value: newestValue })\n      return newestValue\n    }\n\n    return null\n  }\n}\n\n// --- Public API using new storage manager ---\nconst storageManager = new NewStorageManager()\n\nexport const newStorageHelpers = {\n  // Group management with split storage\n  async getEmojiGroupIndex(): Promise<Array<{ id: string; order: number }>> {\n    const index = await storageManager.getWithConflictResolution(STORAGE_KEYS.GROUP_INDEX)\n    return index || []\n  },\n\n  async setEmojiGroupIndex(index: Array<{ id: string; order: number }>): Promise<void> {\n    await storageManager.set(STORAGE_KEYS.GROUP_INDEX, index)\n  },\n\n  async getEmojiGroup(groupId: string): Promise<EmojiGroup | null> {\n    const group = await storageManager.getWithConflictResolution(\n      STORAGE_KEYS.GROUP_PREFIX + groupId\n    )\n    return group\n  },\n\n  async setEmojiGroup(groupId: string, group: EmojiGroup): Promise<void> {\n    await storageManager.set(STORAGE_KEYS.GROUP_PREFIX + groupId, group)\n  },\n\n  async removeEmojiGroup(groupId: string): Promise<void> {\n    await storageManager.remove(STORAGE_KEYS.GROUP_PREFIX + groupId)\n  },\n\n  async getAllEmojiGroups(): Promise<EmojiGroup[]> {\n    const index = await this.getEmojiGroupIndex()\n    if (!index.length) {\n      return defaultEmojiGroups\n    }\n\n    const groups = await Promise.all(\n      index.map(async groupInfo => {\n        const group = await this.getEmojiGroup(groupInfo.id)\n        return group ? { ...group, order: groupInfo.order } : null\n      })\n    )\n\n    return groups\n      .filter((group): group is EmojiGroup => group !== null)\n      .sort((a, b) => a.order - b.order)\n  },\n\n  async setAllEmojiGroups(groups: EmojiGroup[]): Promise<void> {\n    // Update index\n    const index = groups.map((group, order) => ({ id: group.id, order }))\n    await this.setEmojiGroupIndex(index)\n\n    // Update individual groups\n    await Promise.all(groups.map(group => this.setEmojiGroup(group.id, group)))\n  },\n\n  // Settings management\n  async getSettings(): Promise<AppSettings> {\n    const settings = await storageManager.getWithConflictResolution(STORAGE_KEYS.SETTINGS)\n    return { ...defaultSettings, ...settings }\n  },\n\n  async setSettings(settings: AppSettings): Promise<void> {\n    const updatedSettings = { ...settings, lastModified: Date.now() }\n    await storageManager.set(STORAGE_KEYS.SETTINGS, updatedSettings)\n  },\n\n  // Favorites management\n  async getFavorites(): Promise<string[]> {\n    const favorites = await storageManager.getWithConflictResolution(STORAGE_KEYS.FAVORITES)\n    return favorites || []\n  },\n\n  async setFavorites(favorites: string[]): Promise<void> {\n    await storageManager.set(STORAGE_KEYS.FAVORITES, favorites)\n  },\n\n  // Sync operations\n  async backupToSync(\n    groups: EmojiGroup[],\n    settings: AppSettings,\n    favorites: string[]\n  ): Promise<void> {\n    const chromeAPI = getChromeAPI()\n    if (!chromeAPI?.storage?.sync) {\n      logStorage('SYNC_BACKUP', 'failed', undefined, 'Chrome Sync Storage API not available')\n      return\n    }\n\n    const backupData = {\n      groups,\n      settings,\n      favorites,\n      timestamp: Date.now(),\n      version: '3.0'\n    }\n\n    return new Promise((resolve, reject) => {\n      try {\n        chromeAPI.storage.sync.set({ [SYNC_STORAGE_KEYS.BACKUP]: backupData }, () => {\n          if (chromeAPI.runtime.lastError) {\n            logStorage('SYNC_BACKUP', 'failed', undefined, chromeAPI.runtime.lastError)\n            reject(chromeAPI.runtime.lastError)\n          } else {\n            logStorage('SYNC_BACKUP', 'success', backupData)\n            resolve()\n          }\n        })\n      } catch (error) {\n        logStorage('SYNC_BACKUP', 'failed', undefined, error)\n        reject(error)\n      }\n    })\n  },\n\n  async restoreFromSync(): Promise<{\n    groups?: EmojiGroup[]\n    settings?: AppSettings\n    favorites?: string[]\n    timestamp?: number\n  } | null> {\n    const chromeAPI = getChromeAPI()\n    if (!chromeAPI?.storage?.sync) {\n      logStorage('SYNC_RESTORE', 'failed', undefined, 'Chrome Sync Storage API not available')\n      return null\n    }\n\n    return new Promise(resolve => {\n      try {\n        chromeAPI.storage.sync.get({ [SYNC_STORAGE_KEYS.BACKUP]: null }, async (result: any) => {\n          if (chromeAPI.runtime.lastError) {\n            logStorage('SYNC_RESTORE', 'failed', undefined, chromeAPI.runtime.lastError)\n            resolve(null)\n          } else {\n            const backup = result[SYNC_STORAGE_KEYS.BACKUP]\n            if (backup && backup.groups) {\n              logStorage('SYNC_RESTORE', 'found backup', backup)\n\n              // Restore data using the new storage system\n              await this.setAllEmojiGroups(backup.groups)\n              await this.setSettings(backup.settings || defaultSettings)\n              await this.setFavorites(backup.favorites || [])\n\n              resolve({\n                groups: backup.groups,\n                settings: backup.settings || defaultSettings,\n                favorites: backup.favorites || [],\n                timestamp: backup.timestamp || 0\n              })\n            } else {\n              logStorage('SYNC_RESTORE', 'no backup found')\n              resolve(null)\n            }\n          }\n        })\n      } catch (error) {\n        logStorage('SYNC_RESTORE', 'failed', undefined, error)\n        resolve(null)\n      }\n    })\n  },\n\n  // Reset to defaults\n  async resetToDefaults(): Promise<void> {\n    logStorage('RESET_DEFAULTS', 'start')\n\n    try {\n      await this.setAllEmojiGroups(defaultEmojiGroups)\n      await this.setSettings(defaultSettings)\n      await this.setFavorites([])\n\n      logStorage('RESET_DEFAULTS', 'success')\n    } catch (error) {\n      logStorage('RESET_DEFAULTS', 'failed', undefined, error)\n      throw error\n    }\n  }\n}\n\n// Export the storage manager instance for advanced usage\nexport { storageManager }\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\storage.ts",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'changes' is defined but never used.",
        "line": 219,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 219,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "changes" },
            "fix": { "range": [6896, 6928], "text": "" },
            "desc": "Remove unused variable 'changes'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'areaName' is defined but never used.",
        "line": 219,
        "column": 47,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 219,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "areaName" },
            "fix": { "range": [6927, 6945], "text": "" },
            "desc": "Remove unused variable 'areaName'."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 246,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 246,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [7647, 7703], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [388, 391], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [388, 391], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1001, 1004], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1001, 1004], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1038, 1041], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1038, 1041], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1112, 1115], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1112, 1115], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1153, 1156], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1153, 1156], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1271, 1274], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1271, 1274], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1284, 1287], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1284, 1287], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1410, 1413], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1410, 1413], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2477, 2480], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2477, 2480], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2511, 2514], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2511, 2514], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 92,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 92,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2856, 2859], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2856, 2859], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 117,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 117,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3633, 3636], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3633, 3636], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 147,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 147,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4627, 4630], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4627, 4630], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 183,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 183,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5766, 5769], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5766, 5769], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 184,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 184,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5800, 5803], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5800, 5803], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 194,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 194,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6153, 6156], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6153, 6156], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 219,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 219,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6922, 6925], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6922, 6925], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 223,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 223,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7087, 7090], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7087, 7090], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 609,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 609,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19520, 19523], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19520, 19523], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 778,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 778,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25327, 25330], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25327, 25330], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { EmojiGroup, AppSettings } from '../types/emoji'\nimport { defaultEmojiGroups, defaultSettings } from '../types/emoji'\nimport { logger } from '../config/buildFlags'\n\nimport indexedDBHelpers from './indexedDB'\n\n// In build/test environments `chrome` may not be declared. Provide a loose declaration\ndeclare const chrome: any\n\n// --- Constants ---\nexport const STORAGE_KEYS = {\n  GROUPS: 'emojiGroups',\n  SETTINGS: 'appSettings',\n  FAVORITES: 'favorites',\n  GROUP_PREFIX: 'emojiGroup_', // For individual group storage\n  GROUP_INDEX: 'emojiGroupIndex' // For group order and metadata\n} as const\n\nexport const SYNC_STORAGE_KEYS = {\n  BACKUP: 'emojiExtensionBackup'\n} as const\n\n// --- Chrome API Helper ---\nfunction getChromeAPI() {\n  if (typeof chrome !== 'undefined' && chrome.storage) {\n    return chrome\n  }\n  // Fallback for environments where `chrome` is not immediately available\n  if (typeof window !== 'undefined' && (window as any).chrome) {\n    return (window as any).chrome\n  }\n  if (typeof globalThis !== 'undefined' && (globalThis as any).chrome) {\n    return (globalThis as any).chrome\n  }\n  return null\n}\n\n// --- Logging Helper ---\nfunction logStorage(operation: string, key: string, data?: any, error?: any) {\n  const timestamp = new Date().toISOString()\n  const logPrefix = `[Storage ${timestamp}]`\n\n  function formatPreview(d: any) {\n    try {\n      const s = JSON.stringify(d)\n      const size = s.length\n      if (size > 2000) {\n        return { preview: s.slice(0, 500) + '... (truncated)', size }\n      }\n      return { preview: JSON.parse(s), size }\n    } catch {\n      try {\n        return { preview: String(d) }\n      } catch {\n        return { preview: '[unserializable data]' }\n      }\n    }\n  }\n\n  if (error) {\n    logger.error(`${logPrefix} ${operation} FAILED for \"${key}\":`, error)\n  } else {\n    if (typeof data !== 'undefined') {\n      const p = formatPreview(data)\n      logger.log(`${logPrefix} ${operation} for \"${key}\" - size: ${p.size ?? 'unknown'}`, p.preview)\n    } else {\n      logger.log(`${logPrefix} ${operation} for \"${key}\"`)\n    }\n  }\n}\n\n// --- Core Storage Functions ---\n\n/**\n * Retrieves data from chrome.storage.local.\n * @param keys - A single key or an array of keys to retrieve.\n * @returns A promise that resolves with an object containing the retrieved key-value pairs.\n */\nexport async function getStorageData(\n  keys: string | string[] | { [key: string]: any }\n): Promise<{ [key: string]: any }> {\n  const chromeAPI = getChromeAPI()\n  if (!chromeAPI?.storage?.local) {\n    const error = 'Chrome Storage API is not available.'\n    logStorage('GET', typeof keys === 'string' ? keys : 'multiple', undefined, error)\n    return {}\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      chromeAPI.storage.local.get(keys, (result: any) => {\n        if (chromeAPI.runtime.lastError) {\n          logStorage(\n            'GET',\n            typeof keys === 'string' ? keys : 'multiple',\n            undefined,\n            chromeAPI.runtime.lastError\n          )\n          return reject(chromeAPI.runtime.lastError)\n        }\n        logStorage('GET', typeof keys === 'string' ? keys : 'multiple', result)\n        resolve(result)\n      })\n    } catch (error) {\n      logStorage('GET', typeof keys === 'string' ? keys : 'multiple', undefined, error)\n      reject(error)\n    }\n  })\n}\n\n/**\n * Saves data to chrome.storage.local.\n * @param data - An object containing key-value pairs to save.\n * @returns A promise that resolves when the data is saved.\n */\nexport async function setStorageData(data: { [key: string]: any }): Promise<void> {\n  const chromeAPI = getChromeAPI()\n  if (!chromeAPI?.storage?.local) {\n    const error = 'Chrome Storage API is not available.'\n    logStorage('SET', Object.keys(data).join(', '), undefined, error)\n    return\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      chromeAPI.storage.local.set(data, () => {\n        if (chromeAPI.runtime.lastError) {\n          logStorage('SET', Object.keys(data).join(', '), undefined, chromeAPI.runtime.lastError)\n          return reject(chromeAPI.runtime.lastError)\n        }\n        logStorage('SET', Object.keys(data).join(', '), data)\n        resolve()\n      })\n    } catch (error) {\n      logStorage('SET', Object.keys(data).join(', '), undefined, error)\n      reject(error)\n    }\n  })\n}\n\n/**\n * Saves data to chrome.storage.sync.\n * @param data - An object containing key-value pairs to save.\n * @returns A promise that resolves when the data is saved.\n */\nexport async function setSyncStorageData(data: { [key: string]: any }): Promise<void> {\n  const chromeAPI = getChromeAPI()\n  if (!chromeAPI?.storage?.sync) {\n    const error = 'Chrome Sync Storage API is not available.'\n    logStorage('SYNC_SET', Object.keys(data).join(', '), undefined, error)\n    return\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      chromeAPI.storage.sync.set(data, () => {\n        if (chromeAPI.runtime.lastError) {\n          logStorage(\n            'SYNC_SET',\n            Object.keys(data).join(', '),\n            undefined,\n            chromeAPI.runtime.lastError\n          )\n          return reject(chromeAPI.runtime.lastError)\n        }\n        logStorage('SYNC_SET', Object.keys(data).join(', '), data)\n        resolve()\n      })\n    } catch (error) {\n      logStorage('SYNC_SET', Object.keys(data).join(', '), undefined, error)\n      reject(error)\n    }\n  })\n}\n\n/**\n * Retrieves data from chrome.storage.sync.\n * @param keys - A single key or an array of keys to retrieve.\n * @returns A promise that resolves with an object containing the retrieved key-value pairs.\n */\nexport async function getSyncStorageData(\n  keys: string | string[] | { [key: string]: any }\n): Promise<{ [key: string]: any }> {\n  const chromeAPI = getChromeAPI()\n  if (!chromeAPI?.storage?.sync) {\n    const error = 'Chrome Sync Storage API is not available.'\n    logStorage('SYNC_GET', typeof keys === 'string' ? keys : 'multiple', undefined, error)\n    return {}\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      chromeAPI.storage.sync.get(keys, (result: any) => {\n        if (chromeAPI.runtime.lastError) {\n          logStorage(\n            'SYNC_GET',\n            typeof keys === 'string' ? keys : 'multiple',\n            undefined,\n            chromeAPI.runtime.lastError\n          )\n          return reject(chromeAPI.runtime.lastError)\n        }\n        logStorage('SYNC_GET', typeof keys === 'string' ? keys : 'multiple', result)\n        resolve(result)\n      })\n    } catch (error) {\n      logStorage('SYNC_GET', typeof keys === 'string' ? keys : 'multiple', undefined, error)\n      reject(error)\n    }\n  })\n}\n\n/**\n * Listens for changes in chrome.storage.local and sync.\n * @param callback - A function to be called with the changes object.\n */\nexport function onStorageChange(\n  callback: (changes: { [key: string]: any }, areaName: string) => void\n) {\n  const chromeAPI = getChromeAPI()\n  if (chromeAPI?.storage?.onChanged) {\n    chromeAPI.storage.onChanged.addListener((changes: any, areaName: string) => {\n      if (areaName === 'local' || areaName === 'sync') {\n        callback(changes, areaName)\n      }\n    })\n  }\n}\n\n// --- Typed Helper Functions ---\n\n// Debouncing for sync operations to prevent continuous writes\nlet syncDebounceTimer: NodeJS.Timeout | null = null\nconst SYNC_DEBOUNCE_DELAY = 2000 // 2 seconds\n\nfunction debouncedSync(fn: () => Promise<void>) {\n  if (syncDebounceTimer) {\n    clearTimeout(syncDebounceTimer)\n  }\n\n  syncDebounceTimer = setTimeout(async () => {\n    try {\n      await fn()\n    } catch (error) {\n      console.error('[Storage] Debounced sync failed:', error)\n    }\n  }, SYNC_DEBOUNCE_DELAY)\n}\n\nexport const storageHelpers = {\n  async getGroups(): Promise<EmojiGroup[]> {\n    logStorage('READ_GROUPS', 'start')\n\n    // Try IndexedDB first\n    try {\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        const groups = await indexedDBHelpers.getAllGroups()\n        if (groups && groups.length > 0) {\n          logStorage('READ_GROUPS', 'IndexedDB', groups)\n          return groups\n        }\n      }\n    } catch (error) {\n      logStorage('READ_GROUPS', 'IndexedDB', undefined, error)\n    }\n\n    // Fallback to Chrome storage\n    try {\n      const data = await getStorageData({ [STORAGE_KEYS.GROUPS]: defaultEmojiGroups })\n      const groups = data[STORAGE_KEYS.GROUPS]\n      logStorage('READ_GROUPS', 'Chrome storage fallback', groups)\n      return groups\n    } catch (error) {\n      logStorage('READ_GROUPS', 'Chrome storage fallback', undefined, error)\n      return defaultEmojiGroups\n    }\n  },\n\n  async setGroups(groups: EmojiGroup[]): Promise<void> {\n    logStorage('WRITE_GROUPS', 'start', groups)\n\n    try {\n      // Primary: Save to IndexedDB\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        await indexedDBHelpers.setAllGroups(groups)\n        logStorage('WRITE_GROUPS', 'IndexedDB success')\n      }\n\n      // Secondary: Save to Chrome storage for content script access\n      await setStorageData({ [STORAGE_KEYS.GROUPS]: groups })\n      logStorage('WRITE_GROUPS', 'Chrome storage success')\n\n      // Debounced sync to prevent continuous writes\n      debouncedSync(async () => {\n        const settings = await this.getSettings()\n        const favorites = await this.getFavorites()\n        await this.backupToSync(groups, settings, favorites)\n      })\n    } catch (error) {\n      logStorage('WRITE_GROUPS', 'failed', undefined, error)\n      throw error\n    }\n  },\n\n  async getSettings(): Promise<AppSettings> {\n    logStorage('READ_SETTINGS', 'start')\n\n    // Try IndexedDB first\n    try {\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        const settings = await indexedDBHelpers.getSettings()\n        if (settings) {\n          logStorage('READ_SETTINGS', 'IndexedDB', settings)\n          return settings\n        }\n      }\n    } catch (error) {\n      logStorage('READ_SETTINGS', 'IndexedDB', undefined, error)\n    }\n\n    // Fallback to Chrome storage\n    try {\n      const data = await getStorageData({ [STORAGE_KEYS.SETTINGS]: defaultSettings })\n      const settings = data[STORAGE_KEYS.SETTINGS]\n      logStorage('READ_SETTINGS', 'Chrome storage fallback', settings)\n      return settings\n    } catch (error) {\n      logStorage('READ_SETTINGS', 'Chrome storage fallback', undefined, error)\n      return defaultSettings\n    }\n  },\n\n  async setSettings(settings: AppSettings): Promise<void> {\n    logStorage('WRITE_SETTINGS', 'start', settings)\n\n    try {\n      // Primary: Save to IndexedDB\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        await indexedDBHelpers.setSettings(settings)\n        logStorage('WRITE_SETTINGS', 'IndexedDB success')\n      }\n\n      // Secondary: Save to Chrome storage for content script access\n      await setStorageData({ [STORAGE_KEYS.SETTINGS]: settings })\n      logStorage('WRITE_SETTINGS', 'Chrome storage success')\n\n      // Debounced sync to prevent continuous writes\n      debouncedSync(async () => {\n        const groups = await this.getGroups()\n        const favorites = await this.getFavorites()\n        await this.backupToSync(groups, settings, favorites)\n      })\n    } catch (error) {\n      logStorage('WRITE_SETTINGS', 'failed', undefined, error)\n      throw error\n    }\n  },\n\n  async getFavorites(): Promise<string[]> {\n    logStorage('READ_FAVORITES', 'start')\n\n    // Try IndexedDB first\n    try {\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        const favorites = await indexedDBHelpers.getFavorites()\n        if (favorites) {\n          logStorage('READ_FAVORITES', 'IndexedDB', favorites)\n          return favorites\n        }\n      }\n    } catch (error) {\n      logStorage('READ_FAVORITES', 'IndexedDB', undefined, error)\n    }\n\n    // Fallback to Chrome storage\n    try {\n      const data = await getStorageData({ [STORAGE_KEYS.FAVORITES]: [] })\n      const favorites = data[STORAGE_KEYS.FAVORITES]\n      logStorage('READ_FAVORITES', 'Chrome storage fallback', favorites)\n      return favorites\n    } catch (error) {\n      logStorage('READ_FAVORITES', 'Chrome storage fallback', undefined, error)\n      return []\n    }\n  },\n\n  async setFavorites(favorites: string[]): Promise<void> {\n    logStorage('WRITE_FAVORITES', 'start', favorites)\n\n    try {\n      // Primary: Save to IndexedDB\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        await indexedDBHelpers.setFavorites(favorites)\n        logStorage('WRITE_FAVORITES', 'IndexedDB success')\n      }\n\n      // Secondary: Save to Chrome storage for content script access\n      await setStorageData({ [STORAGE_KEYS.FAVORITES]: favorites })\n      logStorage('WRITE_FAVORITES', 'Chrome storage success')\n\n      // Debounced sync to prevent continuous writes\n      debouncedSync(async () => {\n        const groups = await this.getGroups()\n        const settings = await this.getSettings()\n        await this.backupToSync(groups, settings, favorites)\n      })\n    } catch (error) {\n      logStorage('WRITE_FAVORITES', 'failed', undefined, error)\n      throw error\n    }\n  },\n\n  // Individual setters without automatic sync (for internal use)\n  async setGroupsOnly(groups: EmojiGroup[]): Promise<void> {\n    logStorage('WRITE_GROUPS_ONLY', 'start', groups)\n\n    try {\n      // Primary: Save to IndexedDB\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        await indexedDBHelpers.setAllGroups(groups)\n        logStorage('WRITE_GROUPS_ONLY', 'IndexedDB success')\n      }\n\n      // Secondary: Save to Chrome storage\n      await setStorageData({ [STORAGE_KEYS.GROUPS]: groups })\n      logStorage('WRITE_GROUPS_ONLY', 'Chrome storage success')\n    } catch (error) {\n      logStorage('WRITE_GROUPS_ONLY', 'failed', undefined, error)\n      throw error\n    }\n  },\n\n  async setSettingsOnly(settings: AppSettings): Promise<void> {\n    logStorage('WRITE_SETTINGS_ONLY', 'start', settings)\n\n    try {\n      // Primary: Save to IndexedDB\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        await indexedDBHelpers.setSettings(settings)\n        logStorage('WRITE_SETTINGS_ONLY', 'IndexedDB success')\n      }\n\n      // Secondary: Save to Chrome storage\n      await setStorageData({ [STORAGE_KEYS.SETTINGS]: settings })\n      logStorage('WRITE_SETTINGS_ONLY', 'Chrome storage success')\n    } catch (error) {\n      logStorage('WRITE_SETTINGS_ONLY', 'failed', undefined, error)\n      throw error\n    }\n  },\n\n  async setFavoritesOnly(favorites: string[]): Promise<void> {\n    logStorage('WRITE_FAVORITES_ONLY', 'start', favorites)\n\n    try {\n      // Primary: Save to IndexedDB\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        await indexedDBHelpers.setFavorites(favorites)\n        logStorage('WRITE_FAVORITES_ONLY', 'IndexedDB success')\n      }\n\n      // Secondary: Save to Chrome storage\n      await setStorageData({ [STORAGE_KEYS.FAVORITES]: favorites })\n      logStorage('WRITE_FAVORITES_ONLY', 'Chrome storage success')\n    } catch (error) {\n      logStorage('WRITE_FAVORITES_ONLY', 'failed', undefined, error)\n      throw error\n    }\n  },\n\n  async resetToDefaults(): Promise<void> {\n    logStorage('RESET_DEFAULTS', 'start')\n\n    try {\n      // Reset IndexedDB\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        await indexedDBHelpers.clearAll()\n        await indexedDBHelpers.setAllGroups(defaultEmojiGroups)\n        await indexedDBHelpers.setSettings(defaultSettings)\n        await indexedDBHelpers.setFavorites([])\n        logStorage('RESET_DEFAULTS', 'IndexedDB success')\n      }\n\n      // Reset Chrome storage\n      await setStorageData({\n        [STORAGE_KEYS.GROUPS]: defaultEmojiGroups,\n        [STORAGE_KEYS.SETTINGS]: defaultSettings,\n        [STORAGE_KEYS.FAVORITES]: []\n      })\n      logStorage('RESET_DEFAULTS', 'Chrome storage success')\n\n      // Reset sync storage\n      await this.backupToSync(defaultEmojiGroups, defaultSettings, [])\n    } catch (error) {\n      logStorage('RESET_DEFAULTS', 'failed', undefined, error)\n      throw error\n    }\n  },\n\n  // 统一数据设置方法 - 不再直接调用 backupToSync 以防止连续写入\n  async setAllData(\n    groups: EmojiGroup[],\n    settings: AppSettings,\n    favorites: string[]\n  ): Promise<void> {\n    logStorage('SET_ALL_DATA', 'start', {\n      groups: groups.length,\n      settings,\n      favorites: favorites.length\n    })\n\n    try {\n      // Primary: Save to IndexedDB\n      const isIndexedDBAvailable = await indexedDBHelpers.isAvailable()\n      if (isIndexedDBAvailable) {\n        await indexedDBHelpers.setAllGroups(groups)\n        await indexedDBHelpers.setSettings(settings)\n        await indexedDBHelpers.setFavorites(favorites)\n        logStorage('SET_ALL_DATA', 'IndexedDB success')\n      }\n\n      // Secondary: Save to Chrome storage\n      await setStorageData({\n        [STORAGE_KEYS.GROUPS]: groups,\n        [STORAGE_KEYS.SETTINGS]: settings,\n        [STORAGE_KEYS.FAVORITES]: favorites\n      })\n      logStorage('SET_ALL_DATA', 'Chrome storage success')\n\n      // Debounced sync to prevent continuous writes\n      debouncedSync(async () => {\n        await this.backupToSync(groups, settings, favorites)\n      })\n    } catch (error) {\n      logStorage('SET_ALL_DATA', 'failed', undefined, error)\n      throw error\n    }\n  },\n\n  // Sync storage helpers - 添加防止连续写入的逻辑\n  async backupToSync(\n    groups: EmojiGroup[],\n    settings: AppSettings,\n    favorites: string[]\n  ): Promise<void> {\n    logStorage('BACKUP_TO_SYNC', 'start', { groups: groups.length, favorites: favorites.length })\n\n    try {\n      const backupData = {\n        groups,\n        settings,\n        favorites,\n        timestamp: Date.now(),\n        version: '2.0'\n      }\n      await setSyncStorageData({ [SYNC_STORAGE_KEYS.BACKUP]: backupData })\n      logStorage('BACKUP_TO_SYNC', 'success')\n    } catch (error) {\n      // 如果同步存储失败，不影响本地存储\n      logStorage('BACKUP_TO_SYNC', 'failed', undefined, error)\n    }\n  },\n\n  async restoreFromSync(): Promise<{\n    groups?: EmojiGroup[]\n    settings?: AppSettings\n    favorites?: string[]\n    timestamp?: number\n  } | null> {\n    logStorage('RESTORE_FROM_SYNC', 'start')\n\n    try {\n      const data = await getSyncStorageData({ [SYNC_STORAGE_KEYS.BACKUP]: null })\n      const backup = data[SYNC_STORAGE_KEYS.BACKUP]\n      if (backup && backup.groups) {\n        logStorage('RESTORE_FROM_SYNC', 'found backup', backup)\n\n        // Use individual setters to avoid triggering automatic sync\n        await this.setGroupsOnly(backup.groups)\n        await this.setSettingsOnly(backup.settings || defaultSettings)\n        await this.setFavoritesOnly(backup.favorites || [])\n\n        return {\n          groups: backup.groups,\n          settings: backup.settings || defaultSettings,\n          favorites: backup.favorites || [],\n          timestamp: backup.timestamp || 0\n        }\n      }\n      logStorage('RESTORE_FROM_SYNC', 'no backup found')\n      return null\n    } catch (error) {\n      logStorage('RESTORE_FROM_SYNC', 'failed', undefined, error)\n      return null\n    }\n  },\n\n  async getSyncBackup(): Promise<any> {\n    logStorage('GET_SYNC_BACKUP', 'start')\n\n    try {\n      const data = await getSyncStorageData({ [SYNC_STORAGE_KEYS.BACKUP]: null })\n      const backup = data[SYNC_STORAGE_KEYS.BACKUP]\n      logStorage('GET_SYNC_BACKUP', backup ? 'found' : 'not found', backup)\n      return backup\n    } catch (error) {\n      logStorage('GET_SYNC_BACKUP', 'failed', undefined, error)\n      return null\n    }\n  },\n\n  // 同步检查和修复方法 - 防止连续同步\n  async syncCheck(): Promise<void> {\n    logStorage('SYNC_CHECK', 'start')\n\n    try {\n      // 获取本地数据\n      const [localGroups, localSettings, localFavorites] = await Promise.all([\n        this.getGroups(),\n        this.getSettings(),\n        this.getFavorites()\n      ])\n      logStorage('SYNC_CHECK', 'local data loaded', {\n        groups: localGroups.length,\n        lastModified: localSettings.lastModified\n      })\n\n      const syncBackup = await this.getSyncBackup()\n\n      if (syncBackup && syncBackup.timestamp) {\n        const localTimestamp = localSettings.lastModified || 0\n        const syncTimestamp = syncBackup.timestamp || 0\n\n        logStorage('SYNC_CHECK', 'comparing timestamps', {\n          local: localTimestamp,\n          sync: syncTimestamp\n        })\n\n        // 如果同步数据更新，更新本地数据\n        if (syncTimestamp > localTimestamp) {\n          logStorage('SYNC_CHECK', 'updating local from sync')\n          // Use individual setters to avoid triggering automatic sync\n          await this.setGroupsOnly(syncBackup.groups || defaultEmojiGroups)\n          await this.setSettingsOnly(\n            syncBackup.settings\n              ? { ...syncBackup.settings, lastModified: syncTimestamp }\n              : defaultSettings\n          )\n          await this.setFavoritesOnly(syncBackup.favorites || [])\n        } else if (localTimestamp > syncTimestamp) {\n          // 如果本地数据更新，更新同步数据（使用防抖）\n          logStorage('SYNC_CHECK', 'updating sync from local')\n          debouncedSync(async () => {\n            await this.backupToSync(localGroups, localSettings, localFavorites)\n          })\n        } else {\n          logStorage('SYNC_CHECK', 'data in sync')\n        }\n      } else {\n        // 如果没有同步数据，备份当前本地数据（使用防抖）\n        logStorage('SYNC_CHECK', 'no sync data, backing up local')\n        debouncedSync(async () => {\n          await this.backupToSync(localGroups, localSettings, localFavorites)\n        })\n      }\n    } catch (error) {\n      logStorage('SYNC_CHECK', 'failed', undefined, error)\n    }\n  },\n\n  // Enhanced group storage with individual keys for better performance\n  async getGroupsSplit(): Promise<EmojiGroup[]> {\n    logStorage('READ_GROUPS_SPLIT', 'start')\n\n    try {\n      // First try to get group index from Chrome storage\n      const indexData = await getStorageData({ [STORAGE_KEYS.GROUP_INDEX]: null })\n      const groupIndex = indexData[STORAGE_KEYS.GROUP_INDEX]\n\n      if (groupIndex && Array.isArray(groupIndex)) {\n        logStorage('READ_GROUPS_SPLIT', 'found group index', groupIndex)\n\n        // Load each group individually\n        const groupPromises = groupIndex.map(async (groupInfo: { id: string; order: number }) => {\n          try {\n            const groupData = await getStorageData({\n              [STORAGE_KEYS.GROUP_PREFIX + groupInfo.id]: null\n            })\n            const group = groupData[STORAGE_KEYS.GROUP_PREFIX + groupInfo.id]\n            if (group) {\n              return { ...group, order: groupInfo.order }\n            }\n          } catch (error) {\n            logStorage('READ_GROUPS_SPLIT', `group ${groupInfo.id}`, undefined, error)\n          }\n          return null\n        })\n\n        const groups = (await Promise.all(groupPromises))\n          .filter(group => group !== null)\n          .sort((a, b) => a.order - b.order)\n\n        if (groups.length > 0) {\n          logStorage('READ_GROUPS_SPLIT', 'split storage success', { count: groups.length })\n          return groups\n        }\n      }\n    } catch (error) {\n      logStorage('READ_GROUPS_SPLIT', 'split storage failed', undefined, error)\n    }\n\n    // Fallback to regular groups storage\n    return this.getGroups()\n  },\n\n  async setGroupsSplit(groups: EmojiGroup[]): Promise<void> {\n    logStorage('WRITE_GROUPS_SPLIT', 'start', { count: groups.length })\n\n    try {\n      // Create group index for order tracking\n      const groupIndex = groups.map((group, index) => ({\n        id: group.id,\n        order: index\n      }))\n\n      // Save group index\n      await setStorageData({ [STORAGE_KEYS.GROUP_INDEX]: groupIndex })\n\n      // Save each group individually\n      const savePromises = groups.map(async group => {\n        const groupData = { [STORAGE_KEYS.GROUP_PREFIX + group.id]: group }\n        return setStorageData(groupData)\n      })\n\n      await Promise.all(savePromises)\n\n      // Also save to regular groups key for backward compatibility\n      await setStorageData({ [STORAGE_KEYS.GROUPS]: groups })\n\n      logStorage('WRITE_GROUPS_SPLIT', 'success', { count: groups.length })\n\n      // Debounced sync\n      debouncedSync(async () => {\n        const settings = await this.getSettings()\n        const favorites = await this.getFavorites()\n        await this.backupToSync(groups, settings, favorites)\n      })\n    } catch (error) {\n      logStorage('WRITE_GROUPS_SPLIT', 'failed', undefined, error)\n      throw error\n    }\n  },\n\n  async deleteGroupSplit(groupId: string): Promise<void> {\n    logStorage('DELETE_GROUP_SPLIT', groupId)\n\n    try {\n      // Remove individual group storage\n      const chromeAPI = getChromeAPI()\n      if (chromeAPI?.storage?.local) {\n        chromeAPI.storage.local.remove([STORAGE_KEYS.GROUP_PREFIX + groupId])\n      }\n\n      // Update group index\n      const indexData = await getStorageData({ [STORAGE_KEYS.GROUP_INDEX]: [] })\n      const groupIndex = indexData[STORAGE_KEYS.GROUP_INDEX].filter(\n        (info: any) => info.id !== groupId\n      )\n      await setStorageData({ [STORAGE_KEYS.GROUP_INDEX]: groupIndex })\n\n      // Update regular groups storage for compatibility\n      const groups = await this.getGroupsSplit()\n      await setStorageData({ [STORAGE_KEYS.GROUPS]: groups })\n\n      logStorage('DELETE_GROUP_SPLIT', 'success')\n    } catch (error) {\n      logStorage('DELETE_GROUP_SPLIT', 'failed', undefined, error)\n      throw error\n    }\n  }\n}\n\n// Default export for convenience if needed elsewhere\nexport default storageHelpers\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\utils\\touchDragDrop.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'element' is defined but never used.",
        "line": 24,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "element" },
            "fix": { "range": [515, 535], "text": "" },
            "desc": "Remove unused variable 'element'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'element' is defined but never used.",
        "line": 25,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "element" },
            "fix": { "range": [569, 590], "text": "" },
            "desc": "Remove unused variable 'element'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'x' is defined but never used.",
        "line": 25,
        "column": 47,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "x" },
            "fix": { "range": [589, 600], "text": "" },
            "desc": "Remove unused variable 'x'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'y' is defined but never used.",
        "line": 25,
        "column": 58,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "y" },
            "fix": { "range": [600, 611], "text": "" },
            "desc": "Remove unused variable 'y'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'element' is defined but never used.",
        "line": 26,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "element" },
            "fix": { "range": [644, 665], "text": "" },
            "desc": "Remove unused variable 'element'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'dropTarget' is defined but never used.",
        "line": 26,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "dropTarget" },
            "fix": { "range": [664, 696], "text": "" },
            "desc": "Remove unused variable 'dropTarget'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 28,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "e" },
            "fix": { "range": [809, 823], "text": "" },
            "desc": "Remove unused variable 'e'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'element' is defined but never used.",
        "line": 28,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "element" },
            "fix": { "range": [822, 844], "text": "" },
            "desc": "Remove unused variable 'element'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 30,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "e" },
            "fix": { "range": [950, 963], "text": "" },
            "desc": "Remove unused variable 'e'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 31,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "e" },
            "fix": { "range": [1015, 1028], "text": "" },
            "desc": "Remove unused variable 'e'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 32,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "e" },
            "fix": { "range": [1083, 1096], "text": "" },
            "desc": "Remove unused variable 'e'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'element' is defined but never used.",
        "line": 35,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "element" },
            "fix": { "range": [1166, 1186], "text": "" },
            "desc": "Remove unused variable 'element'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'element' is defined but never used.",
        "line": 36,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "element" },
            "fix": { "range": [1214, 1235], "text": "" },
            "desc": "Remove unused variable 'element'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'x' is defined but never used.",
        "line": 36,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "x" },
            "fix": { "range": [1234, 1245], "text": "" },
            "desc": "Remove unused variable 'x'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'y' is defined but never used.",
        "line": 36,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "y" },
            "fix": { "range": [1245, 1256], "text": "" },
            "desc": "Remove unused variable 'y'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'element' is defined but never used.",
        "line": 37,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "element" },
            "fix": { "range": [1283, 1304], "text": "" },
            "desc": "Remove unused variable 'element'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'dropTarget' is defined but never used.",
        "line": 37,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "dropTarget" },
            "fix": { "range": [1303, 1335], "text": "" },
            "desc": "Remove unused variable 'dropTarget'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 38,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "e" },
            "fix": { "range": [1368, 1382], "text": "" },
            "desc": "Remove unused variable 'e'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'element' is defined but never used.",
        "line": 38,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "element" },
            "fix": { "range": [1381, 1403], "text": "" },
            "desc": "Remove unused variable 'element'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'err' is defined but never used.",
        "line": 172,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 172,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'err' is defined but never used.",
        "line": 172,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 172,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\views\\ImageGeneratorView.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\waline\\Waline.vue",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1905, 1908], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1905, 1908], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 281,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 281,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7921, 7924], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7921, 7924], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\ssh\\learn\\extension\\chrome-extension-v3\\src\\waline\\main.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "replacedBy": ["@typescript-eslint/no-require-imports"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/no-require-imports",
                "url": "https://typescript-eslint.io/rules/no-require-imports"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
        }
      }
    ]
  }
]
