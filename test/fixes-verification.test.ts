import { describe, test, expect, vi, beforeEach } from 'vitest'

// È™åËØÅ‰øÆÂ§çÁöÑ‰∏â‰∏™ÈóÆÈ¢òÁöÑÊµãËØï
describe('‰øÆÂ§çÈ™åËØÅÊµãËØï', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('ÈóÆÈ¢ò1: popupÈ°µÈù¢ÈáçÂ§çÊòæÁ§∫Â∏∏Áî®Ë°®ÊÉÖ', () => {
    test('menuItemsÂ∫îËØ•ËøáÊª§Â∏∏Áî®Ë°®ÊÉÖÂàÜÁªÑÈÅøÂÖçÈáçÂ§çÊòæÁ§∫', () => {
      // Ê®°ÊãüÂåÖÂê´Â∏∏Áî®Ë°®ÊÉÖÂàÜÁªÑÁöÑgroupsÊï∞ÊçÆ
      const mockGroups = [
        { UUID: 'common-emoji-group', displayName: 'Â∏∏Áî®Ë°®ÊÉÖ', icon: '‚≠ê' },
        { UUID: 'animals-group', displayName: 'Âä®Áâ©', icon: 'üêæ' },
        { UUID: 'other-group', displayName: 'ÂÖ∂‰ªñ', icon: 'üéØ' },
      ]

      // Ê®°ÊãüËøáÊª§ÈÄªËæë
      const filteredGroups = mockGroups.filter((g) => {
        const displayName = g.displayName || ''
        return (
          !displayName.includes('Â∏∏Áî®') &&
          !displayName.includes('Êî∂Ëóè') &&
          !displayName.includes('ÊúÄËøë')
        )
      })

      // ÁîüÊàêËèúÂçïÈ°π
      const menuItems = [
        { key: 'all', label: 'ÂÖ®ÈÉ®' },
        { key: 'hot', label: 'Â∏∏Áî®' }, // ËøôÊòØÁã¨Á´ãÁöÑÂ∏∏Áî®ËèúÂçïÈ°π
        ...filteredGroups.map((g) => ({ key: g.UUID, label: g.displayName })),
        { key: 'ungrouped', label: 'Êú™ÂàÜÁªÑ' },
      ]

      // È™åËØÅ‰∏ç‰ºöÈáçÂ§çÊòæÁ§∫Â∏∏Áî®
      const hotLabels = menuItems.filter((item) => item.label.includes('Â∏∏Áî®'))
      expect(hotLabels).toHaveLength(1) // Â∫îËØ•Âè™Êúâ‰∏Ä‰∏™"Â∏∏Áî®"Ê†áÁ≠æ
      expect(hotLabels[0].key).toBe('hot') // Â∫îËØ•ÊòØÁã¨Á´ãÁöÑhotËèúÂçïÈ°π

      // È™åËØÅÂ∏∏Áî®Ë°®ÊÉÖÂàÜÁªÑË¢´Ê≠£Á°ÆËøáÊª§
      const commonGroupInMenu = menuItems.find((item) => item.key === 'common-emoji-group')
      expect(commonGroupInMenu).toBeUndefined()

      // È™åËØÅÂÖ∂‰ªñÂàÜÁªÑÊ≠£Â∏∏ÊòæÁ§∫
      expect(menuItems.find((item) => item.key === 'animals-group')).toBeDefined()
      expect(menuItems.find((item) => item.key === 'other-group')).toBeDefined()
    })
  })

  describe('ÈóÆÈ¢ò2: ÂâçÁ´ØË°®ÊÉÖÈÄâÊã©Âô®Êï∞ÊçÆÂä†ËΩΩ', () => {
    test('createEmojiPickerÂ∫îËØ•ËÉΩËé∑ÂèñÊúÄÊñ∞ÁöÑË°®ÊÉÖÊï∞ÊçÆ', async () => {
      // Ê®°ÊãüÂêéÂè∞ÈÄö‰ø°
      const mockSendMessage = vi.fn().mockResolvedValue({
        success: true,
        data: {
          groups: [
            {
              UUID: 'common-emoji-group',
              displayName: 'Â∏∏Áî®Ë°®ÊÉÖ',
              icon: '‚≠ê',
              emojis: [
                { UUID: 'emoji-1', displayName: 'Á¨ëËÑ∏', realUrl: 'https://example.com/smile.png' },
                { UUID: 'emoji-2', displayName: 'Âì≠ËÑ∏', realUrl: 'https://example.com/cry.png' },
              ],
            },
            {
              UUID: 'animals-group',
              displayName: 'Âä®Áâ©',
              icon: 'üêæ',
              emojis: [
                { UUID: 'emoji-3', displayName: 'Áå´Âí™', realUrl: 'https://example.com/cat.png' },
              ],
            },
          ],
        },
      })

      // Ê®°ÊãüÁºìÂ≠òÁä∂ÊÄÅ
      const cachedState = {
        emojiGroups: [], // ÂàùÂßã‰∏∫Á©∫
        settings: { imageScale: 30, outputFormat: 'markdown' },
      }

      // Ê®°ÊãüÊï∞ÊçÆÂä†ËΩΩÈÄªËæë
      let groups = cachedState.emojiGroups
      const response = await mockSendMessage({ type: 'GET_EMOJI_DATA' })

      if (response && response.success && response.data && response.data.groups) {
        const freshGroups = response.data.groups.filter(
          (g: any) => g && typeof g.UUID === 'string' && Array.isArray(g.emojis),
        )
        if (freshGroups.length > 0) {
          groups = freshGroups
          cachedState.emojiGroups = groups
        }
      }

      // È™åËØÅÊï∞ÊçÆÊ≠£Á°ÆÂä†ËΩΩ
      expect(groups).toHaveLength(2)
      expect(groups[0].displayName).toBe('Â∏∏Áî®Ë°®ÊÉÖ')
      expect(groups[0].emojis).toHaveLength(2)
      expect(groups[1].displayName).toBe('Âä®Áâ©')
      expect(groups[1].emojis).toHaveLength(1)

      // È™åËØÅÂ∏∏Áî®Ë°®ÊÉÖÂàÜÁªÑÂ≠òÂú®‰∏îÊúâÊï∞ÊçÆ
      const commonGroup = groups.find((g) => g.UUID === 'common-emoji-group')
      expect(commonGroup).toBeDefined()
      expect(commonGroup?.emojis.length).toBeGreaterThan(0)
    })
  })

  describe('ÈóÆÈ¢ò3: Ë°®ÊÉÖÊèíÂÖ•ÊñáÂ≠óÂäüËÉΩ', () => {
    test('insertEmojiÂ∫îËØ•ËÉΩÊ≠£Á°ÆÊèíÂÖ•Ë°®ÊÉÖÊñáÂ≠óÂà∞ÊñáÊú¨Ê°Ü', () => {
      // Ê®°ÊãüDOMÁéØÂ¢É
      const mockTextArea = {
        value: 'Hello ',
        selectionStart: 6,
        selectionEnd: 6,
        focus: vi.fn(),
        dispatchEvent: vi.fn(),
      }

      // Ê®°Êãüdocument.querySelector
      const mockQuerySelector = vi.fn().mockImplementation((selector) => {
        if (selector === 'textarea.d-editor-input') {
          return mockTextArea
        }
        return null
      })

      // Ê®°ÊãüEventÊûÑÈÄ†ÂáΩÊï∞
      global.Event = vi.fn().mockImplementation((type, options) => ({
        type,
        bubbles: options?.bubbles || false,
        cancelable: options?.cancelable || false,
      })) as any

      // Ê®°ÊãüË°®ÊÉÖÊï∞ÊçÆ
      const emojiData = {
        id: 'smile',
        displayName: 'Á¨ëËÑ∏',
        realUrl: new URL('https://example.com/smile_500x500.png'),
        displayUrl: new URL('https://example.com/smile_500x500.png'),
        order: 0,
        UUID: 'emoji-uuid-001',
      }

      // Ê®°ÊãüËÆæÁΩÆ
      const currentSettings = {
        outputFormat: 'markdown',
        imageScale: 30,
      }

      // Ê®°ÊãüÊèíÂÖ•ÈÄªËæë
      const width = '500'
      const height = '500'
      const imgSrc = emojiData.realUrl.toString()
      const imageScale = currentSettings.imageScale || 30

      let emojiText: string
      switch (currentSettings.outputFormat) {
        case 'markdown':
        default:
          emojiText = `![${emojiData.displayName}|${width}x${height},${imageScale}%](${imgSrc}) `
          break
      }

      const start = mockTextArea.selectionStart || 0
      const end = mockTextArea.selectionEnd || 0
      const text = mockTextArea.value

      // ÊâßË°åÊèíÂÖ•
      mockTextArea.value = text.substring(0, start) + emojiText + text.substring(end)
      const expectedText = 'Hello ![Á¨ëËÑ∏|500x500,30%](https://example.com/smile_500x500.png) '

      // È™åËØÅÁªìÊûú
      expect(mockTextArea.value).toBe(expectedText)

      // È™åËØÅË°®ÊÉÖÊñáÊú¨Ê†ºÂºèÊ≠£Á°Æ
      expect(emojiText).toContain('![Á¨ëËÑ∏|500x500,30%]')
      expect(emojiText).toContain('https://example.com/smile_500x500.png')
      expect(emojiText).toContain(' ') // ÁªìÂ∞æÂ∫îËØ•ÊúâÁ©∫Ê†º
    })

    test('Â∫îËØ•ÊîØÊåÅHTMLÊ†ºÂºèËæìÂá∫', () => {
      const emojiData = {
        displayName: 'Á¨ëËÑ∏',
        realUrl: new URL('https://example.com/smile_500x500.png'),
        displayUrl: new URL('https://example.com/smile_500x500.png'),
        UUID: 'emoji-001',
      }

      const currentSettings = {
        outputFormat: 'html',
        imageScale: 50,
      }

      const width = '500'
      const height = '500'
      const imgSrc = emojiData.realUrl.toString()
      const imageScale = currentSettings.imageScale || 30

      const scaledWidth = Math.round((parseInt(width) * imageScale) / 100)
      const scaledHeight = Math.round((parseInt(height) * imageScale) / 100)

      const emojiText = `<img src="${imgSrc}" title=":${emojiData.displayName}:" class="emoji only-emoji" alt=":${emojiData.displayName}:" loading="lazy" width="${scaledWidth}" height="${scaledHeight}" style="aspect-ratio: ${scaledWidth} / ${scaledHeight};">`

      // È™åËØÅHTMLÊ†ºÂºèÊ≠£Á°Æ
      expect(emojiText).toContain('<img src="https://example.com/smile_500x500.png"')
      expect(emojiText).toContain('title=":Á¨ëËÑ∏:"')
      expect(emojiText).toContain('alt=":Á¨ëËÑ∏:"')
      expect(emojiText).toContain('width="250"') // 500 * 50% = 250
      expect(emojiText).toContain('height="250"')
      expect(emojiText).toContain('class="emoji only-emoji"')
    })
  })
})
